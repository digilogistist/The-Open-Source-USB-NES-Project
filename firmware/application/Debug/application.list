
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000002c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b10  0800802c  0800802c  0000802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  0800db3c  0800db3c  0000db3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e6cc  0800e6cc  0000e6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e6d0  0800e6d0  0000e6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20002800  0800e6d4  00012800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e8c  20002864  0800e738  00012864  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200036f0  0800e738  000136f0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00012864  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004094  00000000  00000000  0001288d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000468  00000000  00000000  00016921  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000518  00000000  00000000  00016d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  000172a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001994  00000000  00000000  00017869  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001753  00000000  00000000  000191fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001a950  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000017b8  00000000  00000000  0001a9cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800802c <__do_global_dtors_aux>:
 800802c:	b510      	push	{r4, lr}
 800802e:	4c05      	ldr	r4, [pc, #20]	; (8008044 <__do_global_dtors_aux+0x18>)
 8008030:	7823      	ldrb	r3, [r4, #0]
 8008032:	b933      	cbnz	r3, 8008042 <__do_global_dtors_aux+0x16>
 8008034:	4b04      	ldr	r3, [pc, #16]	; (8008048 <__do_global_dtors_aux+0x1c>)
 8008036:	b113      	cbz	r3, 800803e <__do_global_dtors_aux+0x12>
 8008038:	4804      	ldr	r0, [pc, #16]	; (800804c <__do_global_dtors_aux+0x20>)
 800803a:	f3af 8000 	nop.w
 800803e:	2301      	movs	r3, #1
 8008040:	7023      	strb	r3, [r4, #0]
 8008042:	bd10      	pop	{r4, pc}
 8008044:	20002864 	.word	0x20002864
 8008048:	00000000 	.word	0x00000000
 800804c:	0800db24 	.word	0x0800db24

08008050 <frame_dummy>:
 8008050:	b508      	push	{r3, lr}
 8008052:	4b03      	ldr	r3, [pc, #12]	; (8008060 <frame_dummy+0x10>)
 8008054:	b11b      	cbz	r3, 800805e <frame_dummy+0xe>
 8008056:	4903      	ldr	r1, [pc, #12]	; (8008064 <frame_dummy+0x14>)
 8008058:	4803      	ldr	r0, [pc, #12]	; (8008068 <frame_dummy+0x18>)
 800805a:	f3af 8000 	nop.w
 800805e:	bd08      	pop	{r3, pc}
 8008060:	00000000 	.word	0x00000000
 8008064:	20002868 	.word	0x20002868
 8008068:	0800db24 	.word	0x0800db24

0800806c <next_delimiter>:
} debug;

//---------------------------------------------------------------------------------------------------------
// these functions maintain the settings.txt file and the timing parameters

int next_delimiter () {
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0

	// loop to find delimiters
	int i = SAVE_SIZE;
 8008072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008076:	607b      	str	r3, [r7, #4]
	do {
		fpos++;
 8008078:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <next_delimiter+0x5c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3301      	adds	r3, #1
 800807e:	4a12      	ldr	r2, [pc, #72]	; (80080c8 <next_delimiter+0x5c>)
 8008080:	6013      	str	r3, [r2, #0]
		switch (fpos [0]) {
 8008082:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <next_delimiter+0x5c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b0a      	cmp	r3, #10
 800808a:	dc04      	bgt.n	8008096 <next_delimiter+0x2a>
 800808c:	2b09      	cmp	r3, #9
 800808e:	da0c      	bge.n	80080aa <next_delimiter+0x3e>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d007      	beq.n	80080a4 <next_delimiter+0x38>
 8008094:	e00b      	b.n	80080ae <next_delimiter+0x42>
 8008096:	2b20      	cmp	r3, #32
 8008098:	d007      	beq.n	80080aa <next_delimiter+0x3e>
 800809a:	2bff      	cmp	r3, #255	; 0xff
 800809c:	d002      	beq.n	80080a4 <next_delimiter+0x38>
 800809e:	2b0d      	cmp	r3, #13
 80080a0:	d003      	beq.n	80080aa <next_delimiter+0x3e>
 80080a2:	e004      	b.n	80080ae <next_delimiter+0x42>

		case   0:
		case 255:	return -1;
 80080a4:	f04f 33ff 	mov.w	r3, #4294967295
 80080a8:	e009      	b.n	80080be <next_delimiter+0x52>
		case   9:
		case  10:
		case  13:
		case  32:	return  0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e007      	b.n	80080be <next_delimiter+0x52>

		}
	} while (--i);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	607b      	str	r3, [r7, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1de      	bne.n	8008078 <next_delimiter+0xc>
	return -1;
 80080ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr
 80080c8:	20002c9c 	.word	0x20002c9c

080080cc <next_string>:

int next_string () {
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0

	// loop while in delimiters
	int i = SAVE_SIZE;
 80080d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d6:	607b      	str	r3, [r7, #4]
	do {
		fpos++;
 80080d8:	4b13      	ldr	r3, [pc, #76]	; (8008128 <next_string+0x5c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3301      	adds	r3, #1
 80080de:	4a12      	ldr	r2, [pc, #72]	; (8008128 <next_string+0x5c>)
 80080e0:	6013      	str	r3, [r2, #0]
		switch (fpos [0]) {
 80080e2:	4b11      	ldr	r3, [pc, #68]	; (8008128 <next_string+0x5c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b0a      	cmp	r3, #10
 80080ea:	dc04      	bgt.n	80080f6 <next_string+0x2a>
 80080ec:	2b09      	cmp	r3, #9
 80080ee:	da0d      	bge.n	800810c <next_string+0x40>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d008      	beq.n	8008106 <next_string+0x3a>
 80080f4:	e005      	b.n	8008102 <next_string+0x36>
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d008      	beq.n	800810c <next_string+0x40>
 80080fa:	2bff      	cmp	r3, #255	; 0xff
 80080fc:	d003      	beq.n	8008106 <next_string+0x3a>
 80080fe:	2b0d      	cmp	r3, #13
 8008100:	d004      	beq.n	800810c <next_string+0x40>

		default :	return  0;
 8008102:	2300      	movs	r3, #0
 8008104:	e00a      	b.n	800811c <next_string+0x50>
		case   0:
		case 255:	return -1;
 8008106:	f04f 33ff 	mov.w	r3, #4294967295
 800810a:	e007      	b.n	800811c <next_string+0x50>
		case  10:
		case  13:
		case  32:;

		}
	} while (--i);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3b01      	subs	r3, #1
 8008110:	607b      	str	r3, [r7, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1df      	bne.n	80080d8 <next_string+0xc>
	return -1;
 8008118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	20002c9c 	.word	0x20002c9c

0800812c <next_number>:

int next_number (uint32_t * num) {
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

	// find size of number string
	unsigned char * endpos = fpos;
 8008134:	4b1e      	ldr	r3, [pc, #120]	; (80081b0 <next_number+0x84>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60fb      	str	r3, [r7, #12]
	next_delimiter ();
 800813a:	f7ff ff97 	bl	800806c <next_delimiter>
	if ((int) fpos - (int) endpos > 10) return -1;
 800813e:	4b1c      	ldr	r3, [pc, #112]	; (80081b0 <next_number+0x84>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b0a      	cmp	r3, #10
 800814a:	dd02      	ble.n	8008152 <next_number+0x26>
 800814c:	f04f 33ff 	mov.w	r3, #4294967295
 8008150:	e02a      	b.n	80081a8 <next_number+0x7c>

	// extract the digits
	unsigned char * curpos = fpos;
 8008152:	4b17      	ldr	r3, [pc, #92]	; (80081b0 <next_number+0x84>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	617b      	str	r3, [r7, #20]
	unsigned int i = 1;
 8008158:	2301      	movs	r3, #1
 800815a:	613b      	str	r3, [r7, #16]
	num [0] = 0;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
	do {

		curpos--;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	3b01      	subs	r3, #1
 8008166:	617b      	str	r3, [r7, #20]
		char tmp = curpos [0];
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	72fb      	strb	r3, [r7, #11]
		switch (tmp) {
 800816e:	7afb      	ldrb	r3, [r7, #11]
 8008170:	3b30      	subs	r3, #48	; 0x30
 8008172:	2b09      	cmp	r3, #9
 8008174:	d902      	bls.n	800817c <next_number+0x50>

			default				: return -1;
 8008176:	f04f 33ff 	mov.w	r3, #4294967295
 800817a:	e015      	b.n	80081a8 <next_number+0x7c>
			case '0' ... '9'	: num [0] += (tmp - '0') * i;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	3b30      	subs	r3, #48	; 0x30
 8008184:	4619      	mov	r1, r3
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	fb03 f301 	mul.w	r3, r3, r1
 800818c:	441a      	add	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	601a      	str	r2, [r3, #0]

		}
		i *= 10;
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	613b      	str	r3, [r7, #16]

	} while (curpos != endpos);
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d1dd      	bne.n	8008162 <next_number+0x36>
	return 0;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20002c9c 	.word	0x20002c9c

080081b4 <import_settings>:

// will import all existing settings from file
uint8_t settings_items;
void import_settings (register t_settings * buf, int init_) {
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4606      	mov	r6, r0
 80081bc:	6079      	str	r1, [r7, #4]

	// find the new settings
	int ctr = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
	buf -> byte [SAVE_SIZE - 1] = 0;					//	inject a null char in there to terminate strstr ()
 80081c2:	2300      	movs	r3, #0
 80081c4:	f886 33ff 	strb.w	r3, [r6, #1023]	; 0x3ff
	for (register uint32_t j = 0; j < settings_items; j++) {
 80081c8:	2400      	movs	r4, #0
 80081ca:	e061      	b.n	8008290 <import_settings+0xdc>

		// find the string
		fpos = (unsigned char *) strstr ((char *) buf, ch_init [j].name);
 80081cc:	4a54      	ldr	r2, [pc, #336]	; (8008320 <import_settings+0x16c>)
 80081ce:	00e3      	lsls	r3, r4, #3
 80081d0:	4413      	add	r3, r2
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	4619      	mov	r1, r3
 80081d6:	4630      	mov	r0, r6
 80081d8:	f005 f880 	bl	800d2dc <strstr>
 80081dc:	4602      	mov	r2, r0
 80081de:	4b51      	ldr	r3, [pc, #324]	; (8008324 <import_settings+0x170>)
 80081e0:	601a      	str	r2, [r3, #0]
		if (!fpos)										goto FAIL;
 80081e2:	4b50      	ldr	r3, [pc, #320]	; (8008324 <import_settings+0x170>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d03a      	beq.n	8008260 <import_settings+0xac>

		// advance past the name string
		if (next_delimiter ())							goto FAIL;
 80081ea:	f7ff ff3f 	bl	800806c <next_delimiter>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d137      	bne.n	8008264 <import_settings+0xb0>
		if (next_string	   ())							goto FAIL;
 80081f4:	f7ff ff6a 	bl	80080cc <next_string>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d134      	bne.n	8008268 <import_settings+0xb4>

		// check next param for '='
		unsigned char * oldpos = fpos;
 80081fe:	4b49      	ldr	r3, [pc, #292]	; (8008324 <import_settings+0x170>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	613b      	str	r3, [r7, #16]
		if (next_delimiter ())							goto FAIL;
 8008204:	f7ff ff32 	bl	800806c <next_delimiter>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d12e      	bne.n	800826c <import_settings+0xb8>
		if ( 1  != (int) fpos - (int) oldpos	)		goto FAIL;
 800820e:	4b45      	ldr	r3, [pc, #276]	; (8008324 <import_settings+0x170>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	d129      	bne.n	8008270 <import_settings+0xbc>
		if ('=' !=					  oldpos [0])		goto FAIL;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b3d      	cmp	r3, #61	; 0x3d
 8008222:	d127      	bne.n	8008274 <import_settings+0xc0>

		// advance to number
		if (next_string	())								goto FAIL;
 8008224:	f7ff ff52 	bl	80080cc <next_string>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d124      	bne.n	8008278 <import_settings+0xc4>

		// get the number
		uint32_t tmp_u;
		if (next_number (&tmp_u))						goto FAIL;
 800822e:	f107 030c 	add.w	r3, r7, #12
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff ff7a 	bl	800812c <next_number>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d11e      	bne.n	800827c <import_settings+0xc8>

		// test against maximum parameter
		if (tmp_u > ch_init [j].max_wait)				goto FAIL;
 800823e:	4a38      	ldr	r2, [pc, #224]	; (8008320 <import_settings+0x16c>)
 8008240:	00e3      	lsls	r3, r4, #3
 8008242:	4413      	add	r3, r2
 8008244:	885b      	ldrh	r3, [r3, #2]
 8008246:	461a      	mov	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	429a      	cmp	r2, r3
 800824c:	d318      	bcc.n	8008280 <import_settings+0xcc>

		// assign the setting
		ch.item [j] = tmp_u;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	b29a      	uxth	r2, r3
 8008252:	4b35      	ldr	r3, [pc, #212]	; (8008328 <import_settings+0x174>)
 8008254:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		ctr++;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	3301      	adds	r3, #1
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e016      	b.n	800828e <import_settings+0xda>
		if (!fpos)										goto FAIL;
 8008260:	bf00      	nop
 8008262:	e00e      	b.n	8008282 <import_settings+0xce>
		if (next_delimiter ())							goto FAIL;
 8008264:	bf00      	nop
 8008266:	e00c      	b.n	8008282 <import_settings+0xce>
		if (next_string	   ())							goto FAIL;
 8008268:	bf00      	nop
 800826a:	e00a      	b.n	8008282 <import_settings+0xce>
		if (next_delimiter ())							goto FAIL;
 800826c:	bf00      	nop
 800826e:	e008      	b.n	8008282 <import_settings+0xce>
		if ( 1  != (int) fpos - (int) oldpos	)		goto FAIL;
 8008270:	bf00      	nop
 8008272:	e006      	b.n	8008282 <import_settings+0xce>
		if ('=' !=					  oldpos [0])		goto FAIL;
 8008274:	bf00      	nop
 8008276:	e004      	b.n	8008282 <import_settings+0xce>
		if (next_string	())								goto FAIL;
 8008278:	bf00      	nop
 800827a:	e002      	b.n	8008282 <import_settings+0xce>
		if (next_number (&tmp_u))						goto FAIL;
 800827c:	bf00      	nop
 800827e:	e000      	b.n	8008282 <import_settings+0xce>
		if (tmp_u > ch_init [j].max_wait)				goto FAIL;
 8008280:	bf00      	nop
		continue;

		// load the default setting if no new one found
FAIL:	ch.item [j] = ch_init [j].wait;
 8008282:	4b27      	ldr	r3, [pc, #156]	; (8008320 <import_settings+0x16c>)
 8008284:	f833 2034 	ldrh.w	r2, [r3, r4, lsl #3]
 8008288:	4b27      	ldr	r3, [pc, #156]	; (8008328 <import_settings+0x174>)
 800828a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (register uint32_t j = 0; j < settings_items; j++) {
 800828e:	3401      	adds	r4, #1
 8008290:	4b26      	ldr	r3, [pc, #152]	; (800832c <import_settings+0x178>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	42a3      	cmp	r3, r4
 8008296:	d899      	bhi.n	80081cc <import_settings+0x18>
	}

	// import parameters from new data, check to see if all parameters are present
	if (ctr != settings_items) {
 8008298:	4b24      	ldr	r3, [pc, #144]	; (800832c <import_settings+0x178>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d015      	beq.n	80082d0 <import_settings+0x11c>

		// rewrite settings file if not all parameters there
		register int pos = 0;
 80082a4:	2500      	movs	r5, #0
		for (register uint32_t j = 0; j < settings_items; j++)
 80082a6:	2400      	movs	r4, #0
 80082a8:	e00d      	b.n	80082c6 <import_settings+0x112>

			// write each setting parameter out to the buffer line by line
			pos += sprintf (& buf -> byte [pos], "%s\t=\t%u\r\n", ch_init [j].name, ch.item [j]);
 80082aa:	1970      	adds	r0, r6, r5
 80082ac:	4a1c      	ldr	r2, [pc, #112]	; (8008320 <import_settings+0x16c>)
 80082ae:	00e3      	lsls	r3, r4, #3
 80082b0:	4413      	add	r3, r2
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	4b1c      	ldr	r3, [pc, #112]	; (8008328 <import_settings+0x174>)
 80082b6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80082ba:	491d      	ldr	r1, [pc, #116]	; (8008330 <import_settings+0x17c>)
 80082bc:	f004 ffea 	bl	800d294 <siprintf>
 80082c0:	4603      	mov	r3, r0
 80082c2:	441d      	add	r5, r3
		for (register uint32_t j = 0; j < settings_items; j++)
 80082c4:	3401      	adds	r4, #1
 80082c6:	4b19      	ldr	r3, [pc, #100]	; (800832c <import_settings+0x178>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	42a3      	cmp	r3, r4
 80082cc:	d8ed      	bhi.n	80082aa <import_settings+0xf6>
 80082ce:	e002      	b.n	80082d6 <import_settings+0x122>

	// don't update flash if running from init
	} else if (init_) return;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d120      	bne.n	8008318 <import_settings+0x164>

	// unlock FPEC
	BOOT_BLOCK -> unlock_fpec ();
 80082d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082da:	f8d3 39ac 	ldr.w	r3, [r3, #2476]	; 0x9ac
 80082de:	4798      	blx	r3

  	// erase existing block
	BOOT_BLOCK -> page_erase_handler (0x40022000, SETTINGS_BIN);	// erase last 1KB of 64KB segment
 80082e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082e4:	f8d3 39b4 	ldr.w	r3, [r3, #2484]	; 0x9b4
 80082e8:	4912      	ldr	r1, [pc, #72]	; (8008334 <import_settings+0x180>)
 80082ea:	4813      	ldr	r0, [pc, #76]	; (8008338 <import_settings+0x184>)
 80082ec:	4798      	blx	r3

	// copy new data into flash
	for (register uint32_t j = 0; j < (SAVE_SIZE / 2); j++)
 80082ee:	2400      	movs	r4, #0
 80082f0:	e00e      	b.n	8008310 <import_settings+0x15c>

		BOOT_BLOCK -> flash_halfword_handler (0x40022000, (t_settings *) & SETTINGS_BIN -> half [j], buf -> half [j]);
 80082f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082f6:	f8d3 59b8 	ldr.w	r5, [r3, #2488]	; 0x9b8
 80082fa:	0063      	lsls	r3, r4, #1
 80082fc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8008300:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8008304:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
 8008308:	4619      	mov	r1, r3
 800830a:	480b      	ldr	r0, [pc, #44]	; (8008338 <import_settings+0x184>)
 800830c:	47a8      	blx	r5
	for (register uint32_t j = 0; j < (SAVE_SIZE / 2); j++)
 800830e:	3401      	adds	r4, #1
 8008310:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8008314:	d3ed      	bcc.n	80082f2 <import_settings+0x13e>
 8008316:	e000      	b.n	800831a <import_settings+0x166>
	} else if (init_) return;
 8008318:	bf00      	nop

}
 800831a:	371c      	adds	r7, #28
 800831c:	46bd      	mov	sp, r7
 800831e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008320:	0800de80 	.word	0x0800de80
 8008324:	20002c9c 	.word	0x20002c9c
 8008328:	20003638 	.word	0x20003638
 800832c:	200030b4 	.word	0x200030b4
 8008330:	0800dce0 	.word	0x0800dce0
 8008334:	0800e800 	.word	0x0800e800
 8008338:	40022000 	.word	0x40022000

0800833c <NUL_xxx>:
		int		(*test) (uint32_t d);

} mirr_sw;

static void scan_PRG	(void);
static void NUL_xxx		(void		) {	  };
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
 8008340:	bf00      	nop
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <NUL_xXx>:
static void NUL_xXx		(uint32_t b	) {	  };
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr

0800835a <null_io>:
static int  goto_bank	(uint32_t b		  );
static void PRG_xxx		(uint32_t ROM_addr);
static void CHR_xxx		(uint32_t ROM_addr);
static void null_io		(register ptr_all_types buf, register uint32_t file_ofs) {}
 800835a:	b480      	push	{r7}
 800835c:	af00      	add	r7, sp, #0
 800835e:	bf00      	nop
 8008360:	46bd      	mov	sp, r7
 8008362:	bc80      	pop	{r7}
 8008364:	4770      	bx	lr
	...

08008368 <chill>:
uint8_t			info_5_mask;			//	indicates validity of info [5] after call to scan CHR
uint8_t			simple_cnt;

//---------------------------------------------------------------------------------------------------------
// at 72 MHz, delay provides CPU-clock accurate delays for up to a minute.
void chill (register uint32_t cycles) {
 8008368:	b490      	push	{r4, r7}
 800836a:	af00      	add	r7, sp, #0
 800836c:	4602      	mov	r2, r0

	register uint32_t i = DWT -> CYCCNT;
 800836e:	4b06      	ldr	r3, [pc, #24]	; (8008388 <chill+0x20>)
 8008370:	685c      	ldr	r4, [r3, #4]
	while ((DWT -> CYCCNT - i) < cycles);
 8008372:	bf00      	nop
 8008374:	4b04      	ldr	r3, [pc, #16]	; (8008388 <chill+0x20>)
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	1b1b      	subs	r3, r3, r4
 800837a:	4293      	cmp	r3, r2
 800837c:	d3fa      	bcc.n	8008374 <chill+0xc>

}
 800837e:	bf00      	nop
 8008380:	46bd      	mov	sp, r7
 8008382:	bc90      	pop	{r4, r7}
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	e0001000 	.word	0xe0001000

0800838c <shut_down>:

// disable any SRAM, tri-state all GPIO lines, and cut the power to the cart
static void shut_down (void) {
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  	map.DOWN_ ();				// disable SRAM
 8008390:	4b13      	ldr	r3, [pc, #76]	; (80083e0 <shut_down+0x54>)
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	4798      	blx	r3
	GPIOA->CRL = 0x44444444;	// disable A8-A14, ROMSEL
 8008396:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <shut_down+0x58>)
 8008398:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 800839c:	601a      	str	r2, [r3, #0]
	GPIOB->CRL = 0x44444444;	// disable A0-A7
 800839e:	4b12      	ldr	r3, [pc, #72]	; (80083e8 <shut_down+0x5c>)
 80083a0:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 80083a4:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0x44444444;	// disable D0-D7
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <shut_down+0x5c>)
 80083a8:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 80083ac:	605a      	str	r2, [r3, #4]
	GPIOA->CRH = 0x44444444;	// disable M2, R/W, PPU_RD, PPU_WR
 80083ae:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <shut_down+0x58>)
 80083b0:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 80083b4:	605a      	str	r2, [r3, #4]
	GPIOC->BSRR = CART_POWER;	// shut off cart power
 80083b6:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <shut_down+0x60>)
 80083b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80083bc:	611a      	str	r2, [r3, #16]
	old_PRG_bank = 0xFFFFFFFF;
 80083be:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <shut_down+0x64>)
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295
 80083c4:	601a      	str	r2, [r3, #0]
	old_CHR_bank = 0xFFFFFFFF;
 80083c6:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <shut_down+0x68>)
 80083c8:	f04f 32ff 	mov.w	r2, #4294967295
 80083cc:	601a      	str	r2, [r3, #0]
	old_SAV_bank = 0xFFFFFFFF;
 80083ce:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <shut_down+0x6c>)
 80083d0:	f04f 32ff 	mov.w	r2, #4294967295
 80083d4:	601a      	str	r2, [r3, #0]
	timeout = 0;
 80083d6:	4b09      	ldr	r3, [pc, #36]	; (80083fc <shut_down+0x70>)
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
}
 80083dc:	bf00      	nop
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20002aac 	.word	0x20002aac
 80083e4:	40010800 	.word	0x40010800
 80083e8:	40010c00 	.word	0x40010c00
 80083ec:	40011000 	.word	0x40011000
 80083f0:	20002aec 	.word	0x20002aec
 80083f4:	2000350c 	.word	0x2000350c
 80083f8:	200030b0 	.word	0x200030b0
 80083fc:	20003518 	.word	0x20003518

08008400 <discharge>:

// tries to discharge the cart by intentionally causing bus shorts
void discharge () {
 8008400:	b480      	push	{r7}
 8008402:	af00      	add	r7, sp, #0

	GPIOA -> ODR = 0x0000 | CPU_RW | PPU_WR;
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <discharge+0x38>)
 8008406:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 800840a:	60da      	str	r2, [r3, #12]
	GPIOB -> ODR = 0x0000;
 800840c:	4b0b      	ldr	r3, [pc, #44]	; (800843c <discharge+0x3c>)
 800840e:	2200      	movs	r2, #0
 8008410:	60da      	str	r2, [r3, #12]
	GPIOB -> CRL = 0x33333333;				// enable A0-A7 outputs
 8008412:	4b0a      	ldr	r3, [pc, #40]	; (800843c <discharge+0x3c>)
 8008414:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008418:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x33333333;				// enable D0-D7
 800841a:	4b08      	ldr	r3, [pc, #32]	; (800843c <discharge+0x3c>)
 800841c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008420:	605a      	str	r2, [r3, #4]
	GPIOA -> CRL = 0x33333333;				// enable A8-A14, ROMSEL outputs
 8008422:	4b05      	ldr	r3, [pc, #20]	; (8008438 <discharge+0x38>)
 8008424:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008428:	601a      	str	r2, [r3, #0]
	GPIOA -> CRH = 0x43444443;				// enable M2, PPU_RD
 800842a:	4b03      	ldr	r3, [pc, #12]	; (8008438 <discharge+0x38>)
 800842c:	4a04      	ldr	r2, [pc, #16]	; (8008440 <discharge+0x40>)
 800842e:	605a      	str	r2, [r3, #4]

}
 8008430:	bf00      	nop
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr
 8008438:	40010800 	.word	0x40010800
 800843c:	40010c00 	.word	0x40010c00
 8008440:	43444443 	.word	0x43444443

08008444 <systick>:

void systick (void) {
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0

	if (timeout) {
 8008448:	4b14      	ldr	r3, [pc, #80]	; (800849c <systick+0x58>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <systick+0x22>
		timeout --;
 8008450:	4b12      	ldr	r3, [pc, #72]	; (800849c <systick+0x58>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3b01      	subs	r3, #1
 8008456:	4a11      	ldr	r2, [pc, #68]	; (800849c <systick+0x58>)
 8008458:	6013      	str	r3, [r2, #0]
		if (! timeout)
 800845a:	4b10      	ldr	r3, [pc, #64]	; (800849c <systick+0x58>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <systick+0x22>
			shut_down ();
 8008462:	f7ff ff93 	bl	800838c <shut_down>

	}
	if (files_dirty) {
 8008466:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <systick+0x5c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d014      	beq.n	8008498 <systick+0x54>
		files_dirty --;
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <systick+0x5c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3b01      	subs	r3, #1
 8008474:	4a0a      	ldr	r2, [pc, #40]	; (80084a0 <systick+0x5c>)
 8008476:	6013      	str	r3, [r2, #0]
		if (! files_dirty) {
 8008478:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <systick+0x5c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10b      	bne.n	8008498 <systick+0x54>

			if (settings_dirty)				import_settings ((t_settings *) debug.buf, 0);
 8008480:	4b08      	ldr	r3, [pc, #32]	; (80084a4 <systick+0x60>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <systick+0x4c>
 8008488:	2100      	movs	r1, #0
 800848a:	4807      	ldr	r0, [pc, #28]	; (80084a8 <systick+0x64>)
 800848c:	f7ff fe92 	bl	80081b4 <import_settings>
			ptr_krnl -> media_change_handler ();
 8008490:	4b06      	ldr	r3, [pc, #24]	; (80084ac <systick+0x68>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	4798      	blx	r3

		}
	}
}
 8008498:	bf00      	nop
 800849a:	bd80      	pop	{r7, pc}
 800849c:	20003518 	.word	0x20003518
 80084a0:	20003504 	.word	0x20003504
 80084a4:	20003509 	.word	0x20003509
 80084a8:	20002ca8 	.word	0x20002ca8
 80084ac:	20003634 	.word	0x20003634

080084b0 <check_power_OK>:

// the value of timeout does not change inside STORAGE_xx_FS methods.
static void check_power_OK (void) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0

	if (!timeout) {
 80084b4:	4b21      	ldr	r3, [pc, #132]	; (800853c <check_power_OK+0x8c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d138      	bne.n	800852e <check_power_OK+0x7e>

		timeout = ch.items.idle_powerdown_ms + 1;			// reset timeout counter
 80084bc:	4b20      	ldr	r3, [pc, #128]	; (8008540 <check_power_OK+0x90>)
 80084be:	885b      	ldrh	r3, [r3, #2]
 80084c0:	3301      	adds	r3, #1
 80084c2:	461a      	mov	r2, r3
 80084c4:	4b1d      	ldr	r3, [pc, #116]	; (800853c <check_power_OK+0x8c>)
 80084c6:	601a      	str	r2, [r3, #0]
		GPIOC->BRR = CART_POWER;							// energize cart
 80084c8:	4b1e      	ldr	r3, [pc, #120]	; (8008544 <check_power_OK+0x94>)
 80084ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084ce:	615a      	str	r2, [r3, #20]
//		chill (ch.items.unit_power_warmup * MSEC_const >> 1);
		GPIOA -> ODR = 0x2400 | ROMSEL | CPU_RW | PPU_RD | PPU_WR;
 80084d0:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <check_power_OK+0x98>)
 80084d2:	f24e 6280 	movw	r2, #59008	; 0xe680
 80084d6:	60da      	str	r2, [r3, #12]
		GPIOB -> ODR = 0x0000;
 80084d8:	4b1c      	ldr	r3, [pc, #112]	; (800854c <check_power_OK+0x9c>)
 80084da:	2200      	movs	r2, #0
 80084dc:	60da      	str	r2, [r3, #12]
		GPIOA -> CRH = 0x33444833;							// enable M2, R/W, PPU_RD, PPU_WR outputs
 80084de:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <check_power_OK+0x98>)
 80084e0:	4a1b      	ldr	r2, [pc, #108]	; (8008550 <check_power_OK+0xa0>)
 80084e2:	605a      	str	r2, [r3, #4]
		GPIOA -> CRL = 0x33333333;							// enable A8-A14, ROMSEL outputs
 80084e4:	4b18      	ldr	r3, [pc, #96]	; (8008548 <check_power_OK+0x98>)
 80084e6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80084ea:	601a      	str	r2, [r3, #0]
		GPIOB -> CRL = 0x33333333;							// enable A0-A7 outputs
 80084ec:	4b17      	ldr	r3, [pc, #92]	; (800854c <check_power_OK+0x9c>)
 80084ee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80084f2:	601a      	str	r2, [r3, #0]
		GPIOB -> CRH = 0x44444444;							// disable D0-D7
 80084f4:	4b15      	ldr	r3, [pc, #84]	; (800854c <check_power_OK+0x9c>)
 80084f6:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 80084fa:	605a      	str	r2, [r3, #4]
		old_PRG_bank = 0xFFFFFFFF;
 80084fc:	4b15      	ldr	r3, [pc, #84]	; (8008554 <check_power_OK+0xa4>)
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	601a      	str	r2, [r3, #0]
		old_CHR_bank = 0xFFFFFFFF;
 8008504:	4b14      	ldr	r3, [pc, #80]	; (8008558 <check_power_OK+0xa8>)
 8008506:	f04f 32ff 	mov.w	r2, #4294967295
 800850a:	601a      	str	r2, [r3, #0]
		old_SAV_bank = 0xFFFFFFFF;
 800850c:	4b13      	ldr	r3, [pc, #76]	; (800855c <check_power_OK+0xac>)
 800850e:	f04f 32ff 	mov.w	r2, #4294967295
 8008512:	601a      	str	r2, [r3, #0]
		chill (ch.items.unit_power_warmup * MSEC_const);	// waste some time while cart energizes
 8008514:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <check_power_OK+0x90>)
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	4b11      	ldr	r3, [pc, #68]	; (8008560 <check_power_OK+0xb0>)
 800851c:	fb03 f302 	mul.w	r3, r3, r2
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff ff21 	bl	8008368 <chill>
		map.INIT_ ();										// configure banking modes and enable SRAM
 8008526:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <check_power_OK+0xb4>)
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	4798      	blx	r3
		return;
 800852c:	e005      	b.n	800853a <check_power_OK+0x8a>

	}
	timeout = ch.items.idle_powerdown_ms + 1;				// reset timeout counter
 800852e:	4b04      	ldr	r3, [pc, #16]	; (8008540 <check_power_OK+0x90>)
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	3301      	adds	r3, #1
 8008534:	461a      	mov	r2, r3
 8008536:	4b01      	ldr	r3, [pc, #4]	; (800853c <check_power_OK+0x8c>)
 8008538:	601a      	str	r2, [r3, #0]

}
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20003518 	.word	0x20003518
 8008540:	20003638 	.word	0x20003638
 8008544:	40011000 	.word	0x40011000
 8008548:	40010800 	.word	0x40010800
 800854c:	40010c00 	.word	0x40010c00
 8008550:	33444833 	.word	0x33444833
 8008554:	20002aec 	.word	0x20002aec
 8008558:	2000350c 	.word	0x2000350c
 800855c:	200030b0 	.word	0x200030b0
 8008560:	00011940 	.word	0x00011940
 8008564:	20002aac 	.word	0x20002aac

08008568 <CPU_R>:

uint32_t CPU_R (register uint32_t addr) {
 8008568:	b598      	push	{r3, r4, r7, lr}
 800856a:	af00      	add	r7, sp, #0
 800856c:	4604      	mov	r4, r0

	// phase 1: data & address setup
	check_power_OK ();									// phase 0: turn on cart power if not already on
 800856e:	f7ff ff9f 	bl	80084b0 <check_power_OK>
	GPIOB->ODR = (pull << 8) | (addr & 255);			// low address
 8008572:	4a13      	ldr	r2, [pc, #76]	; (80085c0 <CPU_R+0x58>)
 8008574:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <CPU_R+0x5c>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	4619      	mov	r1, r3
 800857c:	b2e3      	uxtb	r3, r4
 800857e:	430b      	orrs	r3, r1
 8008580:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR = ((addr >> 8) & 0x7F)					// high address
 8008582:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <CPU_R+0x60>)
 8008584:	0a23      	lsrs	r3, r4, #8
				| ROMSEL | CPU_RW | PPU_RD | PPU_WR		// control signals
 8008586:	b2db      	uxtb	r3, r3
				| 0x2400;								// pull-up for IRQ & NT.A10
 8008588:	f443 4366 	orr.w	r3, r3, #58880	; 0xe600
 800858c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	GPIOA->ODR = ((addr >> 8) & 0x7F)					// high address
 8008590:	60d3      	str	r3, [r2, #12]
	chill (10);
 8008592:	200a      	movs	r0, #10
 8008594:	f7ff fee8 	bl	8008368 <chill>

	// phase 2: assert clock line(s)
	GPIOA->BSRR = ((addr << 8) & 0x800000) | M2;		// enable M2 and /ROMSEL if A15 = 1
 8008598:	4a0b      	ldr	r2, [pc, #44]	; (80085c8 <CPU_R+0x60>)
 800859a:	0223      	lsls	r3, r4, #8
 800859c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a4:	6113      	str	r3, [r2, #16]
	chill (20);
 80085a6:	2014      	movs	r0, #20
 80085a8:	f7ff fede 	bl	8008368 <chill>

	//phase 3: sample data byte and negate clock lines
	register uint32_t i = GPIOB->IDR >> 8 & 255;
 80085ac:	4b04      	ldr	r3, [pc, #16]	; (80085c0 <CPU_R+0x58>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	0a1b      	lsrs	r3, r3, #8
 80085b2:	b2dc      	uxtb	r4, r3
	GPIOA->BSRR = M2 << 16 | ROMSEL;					// clears M2 and sets ROMSEL
 80085b4:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <CPU_R+0x60>)
 80085b6:	4a05      	ldr	r2, [pc, #20]	; (80085cc <CPU_R+0x64>)
 80085b8:	611a      	str	r2, [r3, #16]
	return (i);
 80085ba:	4623      	mov	r3, r4
}
 80085bc:	4618      	mov	r0, r3
 80085be:	bd98      	pop	{r3, r4, r7, pc}
 80085c0:	40010c00 	.word	0x40010c00
 80085c4:	20002af0 	.word	0x20002af0
 80085c8:	40010800 	.word	0x40010800
 80085cc:	01000080 	.word	0x01000080

080085d0 <CPU_W>:

uint32_t CPU_W (register uint32_t addr, register uint32_t data) {
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	4604      	mov	r4, r0
 80085d6:	460d      	mov	r5, r1

	// phase 1: data & address setup
	check_power_OK ();									// phase 0: turn on cart power if not already on
 80085d8:	f7ff ff6a 	bl	80084b0 <check_power_OK>
	GPIOB->ODR = (data << 8) | (addr & 255);			// data and low address
 80085dc:	491d      	ldr	r1, [pc, #116]	; (8008654 <CPU_W+0x84>)
 80085de:	022a      	lsls	r2, r5, #8
 80085e0:	b2e3      	uxtb	r3, r4
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60cb      	str	r3, [r1, #12]
	GPIOA->ODR = ((addr >> 8) & 0x7F)					// high address
 80085e6:	4a1c      	ldr	r2, [pc, #112]	; (8008658 <CPU_W+0x88>)
 80085e8:	0a23      	lsrs	r3, r4, #8
				| ROMSEL | PPU_RD | PPU_WR				// control signals
 80085ea:	b2db      	uxtb	r3, r3
				| 0x2400;								// pull-up for IRQ & NT.A10
 80085ec:	f443 4364 	orr.w	r3, r3, #58368	; 0xe400
 80085f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	GPIOA->ODR = ((addr >> 8) & 0x7F)					// high address
 80085f4:	60d3      	str	r3, [r2, #12]
	chill (10);
 80085f6:	200a      	movs	r0, #10
 80085f8:	f7ff feb6 	bl	8008368 <chill>

	// phase 2: assert clock line(s) and enable output register
	if (addr & 0x8000)	GPIOB->CRH = CPU_W_enable;
 80085fc:	f404 4300 	and.w	r3, r4, #32768	; 0x8000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <CPU_W+0x3e>
 8008604:	4a13      	ldr	r2, [pc, #76]	; (8008654 <CPU_W+0x84>)
 8008606:	4b15      	ldr	r3, [pc, #84]	; (800865c <CPU_W+0x8c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6053      	str	r3, [r2, #4]
 800860c:	e003      	b.n	8008616 <CPU_W+0x46>
	else				GPIOB->CRH = 0x33333333;		// enable data bus if addr in $0000 - $7FFF
 800860e:	4b11      	ldr	r3, [pc, #68]	; (8008654 <CPU_W+0x84>)
 8008610:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008614:	605a      	str	r2, [r3, #4]
	GPIOA->BSRR = ((addr << 8) & 0x800000) | M2;		// enable M2 and /ROMSEL if A15 = 1
 8008616:	4a10      	ldr	r2, [pc, #64]	; (8008658 <CPU_W+0x88>)
 8008618:	0223      	lsls	r3, r4, #8
 800861a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800861e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008622:	6113      	str	r3, [r2, #16]
	chill (20);
 8008624:	2014      	movs	r0, #20
 8008626:	f7ff fe9f 	bl	8008368 <chill>

	//phase 3: negate clock line and disable output register
	register uint32_t i = GPIOB->IDR >> 8 & 255;
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <CPU_W+0x84>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	b2de      	uxtb	r6, r3
//	GPIOA->BSRR = M2 << 16 | ROMSEL;					// clear M2 and set ROMSEL

	// fixes a bug with mappers that sample /ROMSEL on the falling edge of M2
	register GPIO_TypeDef *	t = GPIOA;
 8008632:	4c09      	ldr	r4, [pc, #36]	; (8008658 <CPU_W+0x88>)
	register unsigned int	s = ROMSEL;
 8008634:	2580      	movs	r5, #128	; 0x80
	t -> BRR  = M2;
 8008636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800863a:	6163      	str	r3, [r4, #20]
	t -> BSRR = s;
 800863c:	6125      	str	r5, [r4, #16]
//	chill (ch.items.CPU_W_bus_settle);

	//phase 4: cool down
	GPIOB->CRH = CPU_W_disable;							// disable data bus
 800863e:	4a05      	ldr	r2, [pc, #20]	; (8008654 <CPU_W+0x84>)
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <CPU_W+0x90>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR = CPU_RW;								// clear CPU R/W line
 8008646:	4b04      	ldr	r3, [pc, #16]	; (8008658 <CPU_W+0x88>)
 8008648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800864c:	611a      	str	r2, [r3, #16]
	return (i);
 800864e:	4633      	mov	r3, r6
}
 8008650:	4618      	mov	r0, r3
 8008652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008654:	40010c00 	.word	0x40010c00
 8008658:	40010800 	.word	0x40010800
 800865c:	20002c98 	.word	0x20002c98
 8008660:	20002ca0 	.word	0x20002ca0

08008664 <PPU_R>:

uint32_t PPU_R (register uint32_t addr) {
 8008664:	b598      	push	{r3, r4, r7, lr}
 8008666:	af00      	add	r7, sp, #0
 8008668:	4604      	mov	r4, r0

	// phase 1: data & address setup
	check_power_OK ();									// phase 0: turn on cart power if not already on
 800866a:	f7ff ff21 	bl	80084b0 <check_power_OK>
	GPIOB->ODR = addr & 255;							// data and low address
 800866e:	4a13      	ldr	r2, [pc, #76]	; (80086bc <PPU_R+0x58>)
 8008670:	b2e3      	uxtb	r3, r4
 8008672:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR = ((~addr >> 7) & 0x40)					// inverted A13
 8008674:	4912      	ldr	r1, [pc, #72]	; (80086c0 <PPU_R+0x5c>)
 8008676:	43e3      	mvns	r3, r4
 8008678:	09db      	lsrs	r3, r3, #7
 800867a:	f003 0240 	and.w	r2, r3, #64	; 0x40
				| ((addr >> 8) & 0x3F)					// high address
 800867e:	0a23      	lsrs	r3, r4, #8
 8008680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008684:	4313      	orrs	r3, r2
				| ROMSEL | CPU_RW | PPU_RD | PPU_WR		// control signals
				| 0x2400;  								// pull-up for IRQ & NT.A10
 8008686:	f443 4366 	orr.w	r3, r3, #58880	; 0xe600
 800868a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	GPIOA->ODR = ((~addr >> 7) & 0x40)					// inverted A13
 800868e:	60cb      	str	r3, [r1, #12]
	chill (10);
 8008690:	200a      	movs	r0, #10
 8008692:	f7ff fe69 	bl	8008368 <chill>

	// phase 2: assert clock line
	GPIOA->BRR = PPU_RD;
 8008696:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <PPU_R+0x5c>)
 8008698:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800869c:	615a      	str	r2, [r3, #20]
	chill (20);
 800869e:	2014      	movs	r0, #20
 80086a0:	f7ff fe62 	bl	8008368 <chill>

	//phase 3: sample data byte and negate clock lines
	register uint32_t i = GPIOB->IDR >> 8 & 255;
 80086a4:	4b05      	ldr	r3, [pc, #20]	; (80086bc <PPU_R+0x58>)
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	0a1b      	lsrs	r3, r3, #8
 80086aa:	b2dc      	uxtb	r4, r3
	GPIOA->BSRR = PPU_RD;
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <PPU_R+0x5c>)
 80086ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086b2:	611a      	str	r2, [r3, #16]
	return (i);
 80086b4:	4623      	mov	r3, r4
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	bd98      	pop	{r3, r4, r7, pc}
 80086ba:	bf00      	nop
 80086bc:	40010c00 	.word	0x40010c00
 80086c0:	40010800 	.word	0x40010800

080086c4 <PPU_W>:

void PPU_W (register uint32_t addr, register uint32_t data) {
 80086c4:	b5b0      	push	{r4, r5, r7, lr}
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1

	// phase 1: data & address setup
	check_power_OK ();									// phase 0: turn on cart power if not already on
 80086cc:	f7ff fef0 	bl	80084b0 <check_power_OK>
	GPIOB->ODR = (data << 8) | (addr & 255);			// data and low address
 80086d0:	4915      	ldr	r1, [pc, #84]	; (8008728 <PPU_W+0x64>)
 80086d2:	022a      	lsls	r2, r5, #8
 80086d4:	b2e3      	uxtb	r3, r4
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60cb      	str	r3, [r1, #12]
	GPIOA->ODR = ((~addr >> 7) & 0x40)					// inverted A13
 80086da:	4914      	ldr	r1, [pc, #80]	; (800872c <PPU_W+0x68>)
 80086dc:	43e3      	mvns	r3, r4
 80086de:	09db      	lsrs	r3, r3, #7
 80086e0:	f003 0240 	and.w	r2, r3, #64	; 0x40
				| ((addr >> 8) & 0x3F)					// high address
 80086e4:	0a23      	lsrs	r3, r4, #8
 80086e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086ea:	4313      	orrs	r3, r2
				| ROMSEL | CPU_RW | PPU_RD | PPU_WR		// control signals
				| 0x2400;  								// pull-up for IRQ & NT.A10
 80086ec:	f443 4366 	orr.w	r3, r3, #58880	; 0xe600
 80086f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	GPIOA->ODR = ((~addr >> 7) & 0x40)					// inverted A13
 80086f4:	60cb      	str	r3, [r1, #12]
	chill (10);
 80086f6:	200a      	movs	r0, #10
 80086f8:	f7ff fe36 	bl	8008368 <chill>

	// phase 2: assert clock line and enable output register
	GPIOB->CRH = 0x33333333;							// enable data bus
 80086fc:	4b0a      	ldr	r3, [pc, #40]	; (8008728 <PPU_W+0x64>)
 80086fe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008702:	605a      	str	r2, [r3, #4]
	GPIOA->BRR = PPU_WR;
 8008704:	4b09      	ldr	r3, [pc, #36]	; (800872c <PPU_W+0x68>)
 8008706:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800870a:	615a      	str	r2, [r3, #20]
	chill (20);
 800870c:	2014      	movs	r0, #20
 800870e:	f7ff fe2b 	bl	8008368 <chill>

	//phase 3: negate clock line
	GPIOA->BSRR = PPU_WR;
 8008712:	4b06      	ldr	r3, [pc, #24]	; (800872c <PPU_W+0x68>)
 8008714:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008718:	611a      	str	r2, [r3, #16]
//	chill (ch.items.PPU_W_bus_settle);

	//phase 4: cool down
	GPIOB->CRH = CPU_W_disable;							// disable output register
 800871a:	4a03      	ldr	r2, [pc, #12]	; (8008728 <PPU_W+0x64>)
 800871c:	4b04      	ldr	r3, [pc, #16]	; (8008730 <PPU_W+0x6c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6053      	str	r3, [r2, #4]

}
 8008722:	bf00      	nop
 8008724:	bdb0      	pop	{r4, r5, r7, pc}
 8008726:	bf00      	nop
 8008728:	40010c00 	.word	0x40010c00
 800872c:	40010800 	.word	0x40010800
 8008730:	20002ca0 	.word	0x20002ca0

08008734 <verify_sequence>:

//***************************************************************************************
//*************** Manual override cart access methods ***********************************
//***************************************************************************************

static int verify_sequence (register unsigned int * j) {
 8008734:	b4f0      	push	{r4, r5, r6, r7}
 8008736:	af00      	add	r7, sp, #0
 8008738:	4602      	mov	r2, r0

	register char t;
	do {

		// check the bounds
		if (j [0] >= (OVERRIDE_SIZE / 32))	return 1;
 800873a:	6813      	ldr	r3, [r2, #0]
 800873c:	2b7f      	cmp	r3, #127	; 0x7f
 800873e:	d901      	bls.n	8008744 <verify_sequence+0x10>
 8008740:	2301      	movs	r3, #1
 8008742:	e063      	b.n	800880c <verify_sequence+0xd8>

		//
		register t_s_override * seq = & OVERRIDE_BIN -> sequence [j [0]];
 8008744:	6813      	ldr	r3, [r2, #0]
 8008746:	015b      	lsls	r3, r3, #5
 8008748:	f103 6400 	add.w	r4, r3, #134217728	; 0x8000000
 800874c:	f504 4470 	add.w	r4, r4, #61440	; 0xf000

		// check the main signatures
		t = seq -> ID_string [3];
 8008750:	7f66      	ldrb	r6, [r4, #29]
		if (seq -> CRLF		 	  != 0x0A0D
 8008752:	8be3      	ldrh	r3, [r4, #30]
 8008754:	f640 210d 	movw	r1, #2573	; 0xa0d
 8008758:	428b      	cmp	r3, r1
 800875a:	d121      	bne.n	80087a0 <verify_sequence+0x6c>
		||  seq -> SP2			  != '.'
 800875c:	7e63      	ldrb	r3, [r4, #25]
 800875e:	2b2e      	cmp	r3, #46	; 0x2e
 8008760:	d11e      	bne.n	80087a0 <verify_sequence+0x6c>
		|| (seq -> data_dir		  != '.' && seq -> data_dir		 != '=' && seq -> data_dir != '?')
 8008762:	7c23      	ldrb	r3, [r4, #16]
 8008764:	2b2e      	cmp	r3, #46	; 0x2e
 8008766:	d005      	beq.n	8008774 <verify_sequence+0x40>
 8008768:	7c23      	ldrb	r3, [r4, #16]
 800876a:	2b3d      	cmp	r3, #61	; 0x3d
 800876c:	d002      	beq.n	8008774 <verify_sequence+0x40>
 800876e:	7c23      	ldrb	r3, [r4, #16]
 8008770:	2b3f      	cmp	r3, #63	; 0x3f
 8008772:	d115      	bne.n	80087a0 <verify_sequence+0x6c>
		|| (seq -> ID_string [0]  != 'P' && seq -> ID_string [0] != 'C')
 8008774:	7ea3      	ldrb	r3, [r4, #26]
 8008776:	2b50      	cmp	r3, #80	; 0x50
 8008778:	d002      	beq.n	8008780 <verify_sequence+0x4c>
 800877a:	7ea3      	ldrb	r3, [r4, #26]
 800877c:	2b43      	cmp	r3, #67	; 0x43
 800877e:	d10f      	bne.n	80087a0 <verify_sequence+0x6c>
		|| (seq -> ID_string [1]  != 'R' && seq -> ID_string [1] != 'H')
 8008780:	7ee3      	ldrb	r3, [r4, #27]
 8008782:	2b52      	cmp	r3, #82	; 0x52
 8008784:	d002      	beq.n	800878c <verify_sequence+0x58>
 8008786:	7ee3      	ldrb	r3, [r4, #27]
 8008788:	2b48      	cmp	r3, #72	; 0x48
 800878a:	d109      	bne.n	80087a0 <verify_sequence+0x6c>
		|| (seq -> ID_string [2]  != 'G' && seq -> ID_string [2] != 'R')
 800878c:	7f23      	ldrb	r3, [r4, #28]
 800878e:	2b47      	cmp	r3, #71	; 0x47
 8008790:	d002      	beq.n	8008798 <verify_sequence+0x64>
 8008792:	7f23      	ldrb	r3, [r4, #28]
 8008794:	2b52      	cmp	r3, #82	; 0x52
 8008796:	d103      	bne.n	80087a0 <verify_sequence+0x6c>
		|| (t					  != ' ' && t					 != '!'))
 8008798:	2e20      	cmp	r6, #32
 800879a:	d003      	beq.n	80087a4 <verify_sequence+0x70>
 800879c:	2e21      	cmp	r6, #33	; 0x21
 800879e:	d001      	beq.n	80087a4 <verify_sequence+0x70>

			return 1;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e033      	b.n	800880c <verify_sequence+0xd8>

		// check the address string
		for (register int i = 0; i < 16; i ++)	switch (seq -> address_map [i]) {
 80087a4:	2500      	movs	r5, #0
 80087a6:	e00e      	b.n	80087c6 <verify_sequence+0x92>
 80087a8:	5d63      	ldrb	r3, [r4, r5]
 80087aa:	2b5a      	cmp	r3, #90	; 0x5a
 80087ac:	dc05      	bgt.n	80087ba <verify_sequence+0x86>
 80087ae:	2b41      	cmp	r3, #65	; 0x41
 80087b0:	da08      	bge.n	80087c4 <verify_sequence+0x90>
 80087b2:	3b30      	subs	r3, #48	; 0x30
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d803      	bhi.n	80087c0 <verify_sequence+0x8c>
 80087b8:	e004      	b.n	80087c4 <verify_sequence+0x90>
 80087ba:	3b61      	subs	r3, #97	; 0x61
 80087bc:	2b19      	cmp	r3, #25
 80087be:	d901      	bls.n	80087c4 <verify_sequence+0x90>

			default:			return 1;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e023      	b.n	800880c <verify_sequence+0xd8>
		for (register int i = 0; i < 16; i ++)	switch (seq -> address_map [i]) {
 80087c4:	3501      	adds	r5, #1
 80087c6:	2d0f      	cmp	r5, #15
 80087c8:	ddee      	ble.n	80087a8 <verify_sequence+0x74>
			case 'a' ... 'z':
			case 'A' ... 'Z':;

		}
		// check the data string
		for (register int i = 0; i < 8; i ++)	switch (seq -> data_map [i]) {
 80087ca:	2500      	movs	r5, #0
 80087cc:	e016      	b.n	80087fc <verify_sequence+0xc8>
 80087ce:	1963      	adds	r3, r4, r5
 80087d0:	7c5b      	ldrb	r3, [r3, #17]
 80087d2:	2b5a      	cmp	r3, #90	; 0x5a
 80087d4:	dc09      	bgt.n	80087ea <verify_sequence+0xb6>
 80087d6:	2b41      	cmp	r3, #65	; 0x41
 80087d8:	da0f      	bge.n	80087fa <verify_sequence+0xc6>
 80087da:	2b2d      	cmp	r3, #45	; 0x2d
 80087dc:	d00a      	beq.n	80087f4 <verify_sequence+0xc0>
 80087de:	2b2d      	cmp	r3, #45	; 0x2d
 80087e0:	db06      	blt.n	80087f0 <verify_sequence+0xbc>
 80087e2:	3b30      	subs	r3, #48	; 0x30
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d803      	bhi.n	80087f0 <verify_sequence+0xbc>
 80087e8:	e007      	b.n	80087fa <verify_sequence+0xc6>
 80087ea:	3b61      	subs	r3, #97	; 0x61
 80087ec:	2b19      	cmp	r3, #25
 80087ee:	d904      	bls.n	80087fa <verify_sequence+0xc6>

			default:			return 1;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e00b      	b.n	800880c <verify_sequence+0xd8>
			case '-':			bus_contention = 1;
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <verify_sequence+0xe0>)
 80087f6:	2101      	movs	r1, #1
 80087f8:	7019      	strb	r1, [r3, #0]
		for (register int i = 0; i < 8; i ++)	switch (seq -> data_map [i]) {
 80087fa:	3501      	adds	r5, #1
 80087fc:	2d07      	cmp	r5, #7
 80087fe:	dde6      	ble.n	80087ce <verify_sequence+0x9a>
			case '0' ... '1':
			case 'a' ... 'z':
			case 'A' ... 'Z':;

		}
		j [0] ++;
 8008800:	6813      	ldr	r3, [r2, #0]
 8008802:	3301      	adds	r3, #1
 8008804:	6013      	str	r3, [r2, #0]

	} while (t == ' ');
 8008806:	2e20      	cmp	r6, #32
 8008808:	d097      	beq.n	800873a <verify_sequence+0x6>
	return 0;
 800880a:	2300      	movs	r3, #0

}
 800880c:	4618      	mov	r0, r3
 800880e:	46bd      	mov	sp, r7
 8008810:	bcf0      	pop	{r4, r5, r6, r7}
 8008812:	4770      	bx	lr
 8008814:	200030ac 	.word	0x200030ac

08008818 <MMC1>:

static void MMC1 (register int a, register int d) {
 8008818:	b5b0      	push	{r4, r5, r7, lr}
 800881a:	af00      	add	r7, sp, #0
 800881c:	4605      	mov	r5, r0
 800881e:	460c      	mov	r4, r1

	CPU_R (a); CPU_W (a, d		);
 8008820:	462b      	mov	r3, r5
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff fea0 	bl	8008568 <CPU_R>
 8008828:	462b      	mov	r3, r5
 800882a:	4622      	mov	r2, r4
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fece 	bl	80085d0 <CPU_W>
	CPU_R (a); CPU_W (a, d >> 1	);
 8008834:	462b      	mov	r3, r5
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff fe96 	bl	8008568 <CPU_R>
 800883c:	462a      	mov	r2, r5
 800883e:	1063      	asrs	r3, r4, #1
 8008840:	4619      	mov	r1, r3
 8008842:	4610      	mov	r0, r2
 8008844:	f7ff fec4 	bl	80085d0 <CPU_W>
	CPU_R (a); CPU_W (a, d >> 2	);
 8008848:	462b      	mov	r3, r5
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fe8c 	bl	8008568 <CPU_R>
 8008850:	462a      	mov	r2, r5
 8008852:	10a3      	asrs	r3, r4, #2
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f7ff feba 	bl	80085d0 <CPU_W>
	CPU_R (a); CPU_W (a, d >> 3	);
 800885c:	462b      	mov	r3, r5
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff fe82 	bl	8008568 <CPU_R>
 8008864:	462a      	mov	r2, r5
 8008866:	10e3      	asrs	r3, r4, #3
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f7ff feb0 	bl	80085d0 <CPU_W>
	CPU_R (a); CPU_W (a, d >> 4	);
 8008870:	462b      	mov	r3, r5
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fe78 	bl	8008568 <CPU_R>
 8008878:	462a      	mov	r2, r5
 800887a:	1123      	asrs	r3, r4, #4
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	f7ff fea6 	bl	80085d0 <CPU_W>

}
 8008884:	bf00      	nop
 8008886:	bdb0      	pop	{r4, r5, r7, pc}

08008888 <manual_bankswitch>:

static int manual_bankswitch (register int i, register int bank_addr) {
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	4683      	mov	fp, r0
 8008892:	468a      	mov	sl, r1

	do {
CMP_LP:;
		// --------------------------------------------------------------------------------
		// construct the address
		register int addr = 0;
 8008894:	2400      	movs	r4, #0
		register int bs_mask = 0xffff;
 8008896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800889a:	607b      	str	r3, [r7, #4]
		for (register int j = 0; j < 16; j ++) {
 800889c:	2600      	movs	r6, #0
 800889e:	e032      	b.n	8008906 <manual_bankswitch+0x7e>

			register int tmp = OVERRIDE_BIN -> sequence [i].address_map [j];
 80088a0:	4aca      	ldr	r2, [pc, #808]	; (8008bcc <manual_bankswitch+0x344>)
 80088a2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80088a6:	4413      	add	r3, r2
 80088a8:	4433      	add	r3, r6
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	461d      	mov	r5, r3
			switch (tmp) {
 80088ae:	2d5a      	cmp	r5, #90	; 0x5a
 80088b0:	dc04      	bgt.n	80088bc <manual_bankswitch+0x34>
 80088b2:	2d41      	cmp	r5, #65	; 0x41
 80088b4:	da0c      	bge.n	80088d0 <manual_bankswitch+0x48>
 80088b6:	2d31      	cmp	r5, #49	; 0x31
 80088b8:	d005      	beq.n	80088c6 <manual_bankswitch+0x3e>
 80088ba:	e023      	b.n	8008904 <manual_bankswitch+0x7c>
 80088bc:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80088c0:	2b19      	cmp	r3, #25
 80088c2:	d81f      	bhi.n	8008904 <manual_bankswitch+0x7c>
 80088c4:	e00a      	b.n	80088dc <manual_bankswitch+0x54>

case '1':			addr += 0x8000 >> j;	break;								//	set the address bit
 80088c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ca:	4133      	asrs	r3, r6
 80088cc:	441c      	add	r4, r3
 80088ce:	e019      	b.n	8008904 <manual_bankswitch+0x7c>
case 'A' ... 'Z':	addr += 0x8000 >> j;	tmp ^= 0x20;
 80088d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d4:	4133      	asrs	r3, r6
 80088d6:	441c      	add	r4, r3
 80088d8:	f085 0520 	eor.w	r5, r5, #32
case 'a' ... 'z':	addr += (bank_addr >>  (tmp - 'a') & 1) << (15 - j);
 80088dc:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80088e0:	fa4a f303 	asr.w	r3, sl, r3
 80088e4:	f003 0201 	and.w	r2, r3, #1
 80088e8:	f1c6 030f 	rsb	r3, r6, #15
 80088ec:	fa02 f303 	lsl.w	r3, r2, r3
 80088f0:	441c      	add	r4, r3
					bs_mask &= ~ (1 << (tmp - 'a'));
 80088f2:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80088f6:	2201      	movs	r2, #1
 80088f8:	fa02 f303 	lsl.w	r3, r2, r3
 80088fc:	43db      	mvns	r3, r3
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	401a      	ands	r2, r3
 8008902:	607a      	str	r2, [r7, #4]
		for (register int j = 0; j < 16; j ++) {
 8008904:	3601      	adds	r6, #1
 8008906:	2e0f      	cmp	r6, #15
 8008908:	ddca      	ble.n	80088a0 <manual_bankswitch+0x18>
			}
		}
		// formulate the instruction
		register int data;
		register int mask;
		register int opcode = OVERRIDE_BIN -> sequence [i].data_dir
 800890a:	4ab0      	ldr	r2, [pc, #704]	; (8008bcc <manual_bankswitch+0x344>)
 800890c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8008910:	4413      	add	r3, r2
 8008912:	3310      	adds	r3, #16
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	4619      	mov	r1, r3
							+ OVERRIDE_BIN -> sequence [i].ID_string [0];
 8008918:	4aac      	ldr	r2, [pc, #688]	; (8008bcc <manual_bankswitch+0x344>)
 800891a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800891e:	4413      	add	r3, r2
 8008920:	331a      	adds	r3, #26
 8008922:	781b      	ldrb	r3, [r3, #0]
		register int opcode = OVERRIDE_BIN -> sequence [i].data_dir
 8008924:	18cb      	adds	r3, r1, r3
 8008926:	4619      	mov	r1, r3

		// --------------------------------------------------------------------------------
		// * READ CYCLES *

		// update the bank_addr register
		switch (opcode) {
 8008928:	2b71      	cmp	r3, #113	; 0x71
 800892a:	d003      	beq.n	8008934 <manual_bankswitch+0xac>
 800892c:	460b      	mov	r3, r1
 800892e:	2b7e      	cmp	r3, #126	; 0x7e
 8008930:	d007      	beq.n	8008942 <manual_bankswitch+0xba>
 8008932:	e039      	b.n	80089a8 <manual_bankswitch+0x120>

				// load bank address with read data based on data map
case 'C'+'.':	data = PPU_R (addr);	goto LOAD_BA;		//	PPU read sequence
 8008934:	4623      	mov	r3, r4
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff fe94 	bl	8008664 <PPU_R>
 800893c:	4603      	mov	r3, r0
 800893e:	461d      	mov	r5, r3
 8008940:	e005      	b.n	800894e <manual_bankswitch+0xc6>
case 'P'+'.':	data = CPU_R (addr);						//	CPU read sequence
 8008942:	4623      	mov	r3, r4
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff fe0f 	bl	8008568 <CPU_R>
 800894a:	4603      	mov	r3, r0
 800894c:	461d      	mov	r5, r3
LOAD_BA:		for (register int j = 0; j < 8; j ++) {
 800894e:	f04f 0800 	mov.w	r8, #0
 8008952:	e025      	b.n	80089a0 <manual_bankswitch+0x118>

					register int tmp = OVERRIDE_BIN -> sequence [i].data_map [j];
 8008954:	4a9d      	ldr	r2, [pc, #628]	; (8008bcc <manual_bankswitch+0x344>)
 8008956:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800895a:	4413      	add	r3, r2
 800895c:	4443      	add	r3, r8
 800895e:	3311      	adds	r3, #17
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	461c      	mov	r4, r3
					switch (tmp) {
 8008964:	2c41      	cmp	r4, #65	; 0x41
 8008966:	db19      	blt.n	800899c <manual_bankswitch+0x114>
 8008968:	2c5a      	cmp	r4, #90	; 0x5a
 800896a:	dd04      	ble.n	8008976 <manual_bankswitch+0xee>
 800896c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008970:	2b19      	cmp	r3, #25
 8008972:	d813      	bhi.n	800899c <manual_bankswitch+0x114>
 8008974:	e005      	b.n	8008982 <manual_bankswitch+0xfa>

case 'A' ... 'Z':		data		^= 128 >> j;	tmp ^= 0x20;	//	invert the data
 8008976:	2380      	movs	r3, #128	; 0x80
 8008978:	fa43 f308 	asr.w	r3, r3, r8
 800897c:	405d      	eors	r5, r3
 800897e:	f084 0420 	eor.w	r4, r4, #32
case 'a' ... 'z':		tmp			-= 'a';
 8008982:	3c61      	subs	r4, #97	; 0x61
						mask		 = 1 << tmp;
 8008984:	2301      	movs	r3, #1
 8008986:	fa03 f604 	lsl.w	r6, r3, r4
						bank_addr	 = (bank_addr & ~ mask) | ((data >> j) << tmp & mask);
 800898a:	43f3      	mvns	r3, r6
 800898c:	ea03 020a 	and.w	r2, r3, sl
 8008990:	fa45 f308 	asr.w	r3, r5, r8
 8008994:	40a3      	lsls	r3, r4
 8008996:	4033      	ands	r3, r6
 8008998:	ea42 0a03 	orr.w	sl, r2, r3
LOAD_BA:		for (register int j = 0; j < 8; j ++) {
 800899c:	f108 0801 	add.w	r8, r8, #1
 80089a0:	f1b8 0f07 	cmp.w	r8, #7
 80089a4:	ddd6      	ble.n	8008954 <manual_bankswitch+0xcc>

					}
				}
				continue;	//	skip the rest
 80089a6:	e11d      	b.n	8008be4 <manual_bankswitch+0x35c>
		}
		// --------------------------------------------------------------------------------
		// * WRITE CYCLES and COMPARE FOR EQUALITY *

		// construct the data to write or compare
		data = 0;
 80089a8:	2500      	movs	r5, #0
		mask = 0;
 80089aa:	2600      	movs	r6, #0
		for (register int j = 0; j < 8; j ++) {
 80089ac:	f04f 0900 	mov.w	r9, #0
 80089b0:	e03e      	b.n	8008a30 <manual_bankswitch+0x1a8>

			register int tmp = OVERRIDE_BIN -> sequence [i].data_map [j];
 80089b2:	4a86      	ldr	r2, [pc, #536]	; (8008bcc <manual_bankswitch+0x344>)
 80089b4:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80089b8:	4413      	add	r3, r2
 80089ba:	444b      	add	r3, r9
 80089bc:	3311      	adds	r3, #17
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	4698      	mov	r8, r3
			switch (tmp) {
 80089c2:	f1b8 0f5a 	cmp.w	r8, #90	; 0x5a
 80089c6:	dc09      	bgt.n	80089dc <manual_bankswitch+0x154>
 80089c8:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
 80089cc:	da14      	bge.n	80089f8 <manual_bankswitch+0x170>
 80089ce:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 80089d2:	d02b      	beq.n	8008a2c <manual_bankswitch+0x1a4>
 80089d4:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 80089d8:	d009      	beq.n	80089ee <manual_bankswitch+0x166>
 80089da:	e003      	b.n	80089e4 <manual_bankswitch+0x15c>
 80089dc:	f1a8 0361 	sub.w	r3, r8, #97	; 0x61
 80089e0:	2b19      	cmp	r3, #25
 80089e2:	d90f      	bls.n	8008a04 <manual_bankswitch+0x17c>

default:			mask |=   128 >> j;		break;		//	unknown bits will force a read
 80089e4:	2380      	movs	r3, #128	; 0x80
 80089e6:	fa43 f309 	asr.w	r3, r3, r9
 80089ea:	431e      	orrs	r6, r3
 80089ec:	e01e      	b.n	8008a2c <manual_bankswitch+0x1a4>
case '1':			data |=   128 >> j;		break;		//	set the data bit
 80089ee:	2380      	movs	r3, #128	; 0x80
 80089f0:	fa43 f309 	asr.w	r3, r3, r9
 80089f4:	431d      	orrs	r5, r3
 80089f6:	e019      	b.n	8008a2c <manual_bankswitch+0x1a4>
case 'A' ... 'Z':	data |=   128 >> j;		tmp ^= 0x20;
 80089f8:	2380      	movs	r3, #128	; 0x80
 80089fa:	fa43 f309 	asr.w	r3, r3, r9
 80089fe:	431d      	orrs	r5, r3
 8008a00:	f088 0820 	eor.w	r8, r8, #32
case 'a' ... 'z':	data ^=  (bank_addr >> (tmp - 'a') & 1) << (7 - j);	//break;
 8008a04:	f1a8 0361 	sub.w	r3, r8, #97	; 0x61
 8008a08:	fa4a f303 	asr.w	r3, sl, r3
 8008a0c:	f003 0201 	and.w	r2, r3, #1
 8008a10:	f1c9 0307 	rsb	r3, r9, #7
 8008a14:	fa02 f303 	lsl.w	r3, r2, r3
 8008a18:	405d      	eors	r5, r3
					bs_mask &= ~ (1 << (tmp - 'a'));
 8008a1a:	f1a8 0361 	sub.w	r3, r8, #97	; 0x61
 8008a1e:	2201      	movs	r2, #1
 8008a20:	fa02 f303 	lsl.w	r3, r2, r3
 8008a24:	43db      	mvns	r3, r3
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	401a      	ands	r2, r3
 8008a2a:	607a      	str	r2, [r7, #4]
		for (register int j = 0; j < 8; j ++) {
 8008a2c:	f109 0901 	add.w	r9, r9, #1
 8008a30:	f1b9 0f07 	cmp.w	r9, #7
 8008a34:	ddbd      	ble.n	80089b2 <manual_bankswitch+0x12a>
case '0':;//		data &= ~(128 >> j);	break;

			}
		}
		// determine the write type
		switch (opcode) {
 8008a36:	460b      	mov	r3, r1
 8008a38:	3b80      	subs	r3, #128	; 0x80
 8008a3a:	2b0f      	cmp	r3, #15
 8008a3c:	f200 80d2 	bhi.w	8008be4 <manual_bankswitch+0x35c>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <manual_bankswitch+0x1c0>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a89 	.word	0x08008a89
 8008a4c:	08008be5 	.word	0x08008be5
 8008a50:	08008afb 	.word	0x08008afb
 8008a54:	08008be5 	.word	0x08008be5
 8008a58:	08008be5 	.word	0x08008be5
 8008a5c:	08008be5 	.word	0x08008be5
 8008a60:	08008be5 	.word	0x08008be5
 8008a64:	08008be5 	.word	0x08008be5
 8008a68:	08008be5 	.word	0x08008be5
 8008a6c:	08008be5 	.word	0x08008be5
 8008a70:	08008be5 	.word	0x08008be5
 8008a74:	08008be5 	.word	0x08008be5
 8008a78:	08008be5 	.word	0x08008be5
 8008a7c:	08008aaf 	.word	0x08008aaf
 8008a80:	08008be5 	.word	0x08008be5
 8008a84:	08008b15 	.word	0x08008b15

				// PPU write sequence
case 'C'+'=':	if (mask				)	data |= mask & PPU_R (addr);
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	d009      	beq.n	8008aa0 <manual_bankswitch+0x218>
 8008a8c:	4623      	mov	r3, r4
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff fde8 	bl	8008664 <PPU_R>
 8008a94:	4602      	mov	r2, r0
 8008a96:	4633      	mov	r3, r6
 8008a98:	4013      	ands	r3, r2
 8008a9a:	462a      	mov	r2, r5
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	461d      	mov	r5, r3
				PPU_W (addr, data);
 8008aa0:	4623      	mov	r3, r4
 8008aa2:	462a      	mov	r2, r5
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fe0c 	bl	80086c4 <PPU_W>
				break;
 8008aac:	e09a      	b.n	8008be4 <manual_bankswitch+0x35c>

				// CPU write sequence
case 'P'+'=':	if (mask				)	data |= mask & CPU_R (addr);
 8008aae:	2e00      	cmp	r6, #0
 8008ab0:	d009      	beq.n	8008ac6 <manual_bankswitch+0x23e>
 8008ab2:	4623      	mov	r3, r4
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff fd57 	bl	8008568 <CPU_R>
 8008aba:	4602      	mov	r2, r0
 8008abc:	4633      	mov	r3, r6
 8008abe:	4013      	ands	r3, r2
 8008ac0:	462a      	mov	r2, r5
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	461d      	mov	r5, r3
				if ((v.init_mode & 128	)
 8008ac6:	4b42      	ldr	r3, [pc, #264]	; (8008bd0 <manual_bankswitch+0x348>)
 8008ac8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008acc:	b25b      	sxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	da0c      	bge.n	8008aec <manual_bankswitch+0x264>
				&& (addr & 0x8000		)
 8008ad2:	f404 4300 	and.w	r3, r4, #32768	; 0x8000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <manual_bankswitch+0x264>
				&& (~data & 128)		)	MMC1  (addr, data);
 8008ada:	f005 0380 	and.w	r3, r5, #128	; 0x80
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d104      	bne.n	8008aec <manual_bankswitch+0x264>
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f7ff fe97 	bl	8008818 <MMC1>
				else 						CPU_W (addr, data);
				break;
 8008aea:	e07b      	b.n	8008be4 <manual_bankswitch+0x35c>
				else 						CPU_W (addr, data);
 8008aec:	4623      	mov	r3, r4
 8008aee:	462a      	mov	r2, r5
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff fd6c 	bl	80085d0 <CPU_W>
				break;
 8008af8:	e074      	b.n	8008be4 <manual_bankswitch+0x35c>

				// CHR compare sequenece
case 'C'+'?':	if (mask == 255)							return 0;	//	unconditional return
 8008afa:	2eff      	cmp	r6, #255	; 0xff
 8008afc:	d101      	bne.n	8008b02 <manual_bankswitch+0x27a>
 8008afe:	2300      	movs	r3, #0
 8008b00:	e07c      	b.n	8008bfc <manual_bankswitch+0x374>
				data ^= PPU_R (addr);
 8008b02:	4623      	mov	r3, r4
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff fdad 	bl	8008664 <PPU_R>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	4053      	eors	r3, r2
 8008b10:	461d      	mov	r5, r3
				goto CMP_SEQ;
 8008b12:	e04a      	b.n	8008baa <manual_bankswitch+0x322>

				// PRG compare sequence
case 'P'+'?':	if (mask == 255)							return 0;	//	unconditional return
 8008b14:	2eff      	cmp	r6, #255	; 0xff
 8008b16:	d101      	bne.n	8008b1c <manual_bankswitch+0x294>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	e06f      	b.n	8008bfc <manual_bankswitch+0x374>
				switch (addr) {
 8008b1c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8008b20:	d013      	beq.n	8008b4a <manual_bankswitch+0x2c2>
 8008b22:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8008b26:	dc03      	bgt.n	8008b30 <manual_bankswitch+0x2a8>
 8008b28:	1c23      	adds	r3, r4, #0
 8008b2a:	2b1f      	cmp	r3, #31
 8008b2c:	d825      	bhi.n	8008b7a <manual_bankswitch+0x2f2>
 8008b2e:	e008      	b.n	8008b42 <manual_bankswitch+0x2ba>
 8008b30:	f240 1301 	movw	r3, #257	; 0x101
 8008b34:	429c      	cmp	r4, r3
 8008b36:	d011      	beq.n	8008b5c <manual_bankswitch+0x2d4>
 8008b38:	f5a4 7388 	sub.w	r3, r4, #272	; 0x110
 8008b3c:	2bef      	cmp	r3, #239	; 0xef
 8008b3e:	d81c      	bhi.n	8008b7a <manual_bankswitch+0x2f2>
 8008b40:	e024      	b.n	8008b8c <manual_bankswitch+0x304>

case 0 ... 31:		data ^= info.b [addr];					break;		//	iNES header @ CPU [$0000 - $001F]
 8008b42:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <manual_bankswitch+0x34c>)
 8008b44:	5d1b      	ldrb	r3, [r3, r4]
 8008b46:	405d      	eors	r5, r3
 8008b48:	e02f      	b.n	8008baa <manual_bankswitch+0x322>
case 256:			data ^= GPIOA -> IDR >> 10 & 1;			break;		//	IRQ port @ CPU [$0100]
 8008b4a:	4b23      	ldr	r3, [pc, #140]	; (8008bd8 <manual_bankswitch+0x350>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	0a9b      	lsrs	r3, r3, #10
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	462a      	mov	r2, r5
 8008b56:	4053      	eors	r3, r2
 8008b58:	461d      	mov	r5, r3
 8008b5a:	e026      	b.n	8008baa <manual_bankswitch+0x322>
case 257:			GPIOA -> BSRR = 0x540028;							//	A11 = A13 = 1; A10 = A12 = /A13 = 0
 8008b5c:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <manual_bankswitch+0x350>)
 8008b5e:	4a1f      	ldr	r2, [pc, #124]	; (8008bdc <manual_bankswitch+0x354>)
 8008b60:	611a      	str	r2, [r3, #16]
					chill (40);
 8008b62:	2028      	movs	r0, #40	; 0x28
 8008b64:	f7ff fc00 	bl	8008368 <chill>
					data ^= GPIOA -> IDR >> 13 & 1;			break;		//	NT.A10 port @ CPU [$0101]
 8008b68:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <manual_bankswitch+0x350>)
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	0b5b      	lsrs	r3, r3, #13
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	462a      	mov	r2, r5
 8008b74:	4053      	eors	r3, r2
 8008b76:	461d      	mov	r5, r3
 8008b78:	e017      	b.n	8008baa <manual_bankswitch+0x322>
default:			data ^= CPU_R (addr);					break;
 8008b7a:	4623      	mov	r3, r4
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff fcf3 	bl	8008568 <CPU_R>
 8008b82:	4602      	mov	r2, r0
 8008b84:	462b      	mov	r3, r5
 8008b86:	4053      	eors	r3, r2
 8008b88:	461d      	mov	r5, r3
 8008b8a:	e00e      	b.n	8008baa <manual_bankswitch+0x322>
case 272 ... 511:	chill (72 * (addr >> 4 & 15) << (addr & 15));		//	delay generator macros
 8008b8c:	1123      	asrs	r3, r4, #4
 8008b8e:	f003 020f 	and.w	r2, r3, #15
 8008b92:	4613      	mov	r3, r2
 8008b94:	00db      	lsls	r3, r3, #3
 8008b96:	4413      	add	r3, r2
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f004 030f 	and.w	r3, r4, #15
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff fbdf 	bl	8008368 <chill>

				}
CMP_SEQ:		if (data & (mask ^ 255))					return 1;	//	fail if not an exact match
 8008baa:	f086 03ff 	eor.w	r3, r6, #255	; 0xff
 8008bae:	402b      	ands	r3, r5
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <manual_bankswitch+0x330>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e021      	b.n	8008bfc <manual_bankswitch+0x374>
				bank_addr = (bank_addr | bs_mask) + 1;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	ea4a 0303 	orr.w	r3, sl, r3
 8008bbe:	f103 0a01 	add.w	sl, r3, #1
				if		(bank_addr < 0x10000)				goto CMP_LP;//	repeat the same instruction until done
 8008bc2:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
 8008bc6:	da0b      	bge.n	8008be0 <manual_bankswitch+0x358>
 8008bc8:	e664      	b.n	8008894 <manual_bankswitch+0xc>
 8008bca:	bf00      	nop
 8008bcc:	0800f000 	.word	0x0800f000
 8008bd0:	200034cc 	.word	0x200034cc
 8008bd4:	2000288c 	.word	0x2000288c
 8008bd8:	40010800 	.word	0x40010800
 8008bdc:	00540028 	.word	0x00540028
				else	 bank_addr = 0;									//	be sure to clear the register when done
 8008be0:	f04f 0a00 	mov.w	sl, #0

		}

	} while (OVERRIDE_BIN -> sequence [i ++].ID_string [3] == ' ');
 8008be4:	4a08      	ldr	r2, [pc, #32]	; (8008c08 <manual_bankswitch+0x380>)
 8008be6:	465b      	mov	r3, fp
 8008be8:	f103 0b01 	add.w	fp, r3, #1
 8008bec:	015b      	lsls	r3, r3, #5
 8008bee:	4413      	add	r3, r2
 8008bf0:	331d      	adds	r3, #29
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	f43f ae4d 	beq.w	8008894 <manual_bankswitch+0xc>
	return 0;
 8008bfa:	2300      	movs	r3, #0

}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c06:	bf00      	nop
 8008c08:	0800f000 	.word	0x0800f000

08008c0c <INIT_override>:

static void INIT_override (void) {
 8008c0c:	b598      	push	{r3, r4, r7, lr}
 8008c0e:	af00      	add	r7, sp, #0

	if (v.init_mode & 128	)	CPU_W (0x8000, 0x80);		//	a shortcut for dealing with the MMC1
 8008c10:	4b1a      	ldr	r3, [pc, #104]	; (8008c7c <INIT_override+0x70>)
 8008c12:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008c16:	b25b      	sxtb	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da04      	bge.n	8008c26 <INIT_override+0x1a>
 8008c1c:	2180      	movs	r1, #128	; 0x80
 8008c1e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008c22:	f7ff fcd5 	bl	80085d0 <CPU_W>
	if (v.init_mode & 1		)	manual_bankswitch (v.INIT_override_index, 0);
 8008c26:	4b15      	ldr	r3, [pc, #84]	; (8008c7c <INIT_override+0x70>)
 8008c28:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d006      	beq.n	8008c42 <INIT_override+0x36>
 8008c34:	4b11      	ldr	r3, [pc, #68]	; (8008c7c <INIT_override+0x70>)
 8008c36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff fe23 	bl	8008888 <manual_bankswitch>
	if (v.init_mode & 4		)	{
 8008c42:	4b0e      	ldr	r3, [pc, #56]	; (8008c7c <INIT_override+0x70>)
 8008c44:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008c48:	f003 0304 	and.w	r3, r3, #4
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d012      	beq.n	8008c76 <INIT_override+0x6a>

		CPU_R (0x4800);			//	LO 1 screen mirroring mode
 8008c50:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8008c54:	f7ff fc88 	bl	8008568 <CPU_R>
		CPU_R (0x5088);			//	enable CHR-FLASH access mode, enable CHR-RAM, set RAM bank 0
 8008c58:	f245 0088 	movw	r0, #20616	; 0x5088
 8008c5c:	f7ff fc84 	bl	8008568 <CPU_R>
		for (register int i = 0; i < 256; i ++)	  PPU_W (i, i);
 8008c60:	2400      	movs	r4, #0
 8008c62:	e006      	b.n	8008c72 <INIT_override+0x66>
 8008c64:	4623      	mov	r3, r4
 8008c66:	4622      	mov	r2, r4
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff fd2a 	bl	80086c4 <PPU_W>
 8008c70:	3401      	adds	r4, #1
 8008c72:	2cff      	cmp	r4, #255	; 0xff
 8008c74:	ddf6      	ble.n	8008c64 <INIT_override+0x58>

	}
}
 8008c76:	bf00      	nop
 8008c78:	bd98      	pop	{r3, r4, r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200034cc 	.word	0x200034cc

08008c80 <DOWN_override>:

static void DOWN_override (void					) { manual_bankswitch (v.DOWN_override_index,						0); }
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	4b04      	ldr	r3, [pc, #16]	; (8008c98 <DOWN_override+0x18>)
 8008c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff fdfb 	bl	8008888 <manual_bankswitch>
 8008c92:	bf00      	nop
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200034cc 	.word	0x200034cc

08008c9c <PRG_override>:
static void PRG_override  (register int ROM_addr) { manual_bankswitch (v.PRG_override_index , ROM_addr >> info.r.PRG_bank_bits); }
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <PRG_override+0x20>)
 8008ca4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008ca8:	4618      	mov	r0, r3
 8008caa:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <PRG_override+0x24>)
 8008cac:	7e1b      	ldrb	r3, [r3, #24]
 8008cae:	fa42 f303 	asr.w	r3, r2, r3
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	f7ff fde8 	bl	8008888 <manual_bankswitch>
 8008cb8:	bf00      	nop
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	200034cc 	.word	0x200034cc
 8008cc0:	2000288c 	.word	0x2000288c

08008cc4 <CHR_override>:
static void CHR_override  (register int ROM_addr) { manual_bankswitch (v.CHR_override_index , ROM_addr >> info.r.CHR_bank_bits); }
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	4602      	mov	r2, r0
 8008cca:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <CHR_override+0x20>)
 8008ccc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <CHR_override+0x24>)
 8008cd4:	7e5b      	ldrb	r3, [r3, #25]
 8008cd6:	fa42 f303 	asr.w	r3, r2, r3
 8008cda:	4619      	mov	r1, r3
 8008cdc:	f7ff fdd4 	bl	8008888 <manual_bankswitch>
 8008ce0:	bf00      	nop
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	200034cc 	.word	0x200034cc
 8008ce8:	2000288c 	.word	0x2000288c

08008cec <SAV_override>:
static void SAV_override  (register int ROM_addr) { manual_bankswitch (v.SAV_override_index , ROM_addr >> v.SAV_B_ofs); }
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <SAV_override+0x24>)
 8008cf4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <SAV_override+0x24>)
 8008cfc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008d00:	fa42 f303 	asr.w	r3, r2, r3
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7ff fdbf 	bl	8008888 <manual_bankswitch>
 8008d0a:	bf00      	nop
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	200034cc 	.word	0x200034cc

08008d14 <find_map_header>:

// scan to find a mapper abstract header signature
// set c to index of overrides to skip over, or -1 to find any override with a TEST sequence
int find_map_header (register unsigned int * i, register int c) {
 8008d14:	b480      	push	{r7}
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	4603      	mov	r3, r0
 8008d1a:	460a      	mov	r2, r1

	// scan to end of file
	do {

		if (OVERRIDE_BIN -> header [i [0]].iNES_signature == 0x1A53454E) {
 8008d1c:	4812      	ldr	r0, [pc, #72]	; (8008d68 <find_map_header+0x54>)
 8008d1e:	6819      	ldr	r1, [r3, #0]
 8008d20:	0149      	lsls	r1, r1, #5
 8008d22:	4401      	add	r1, r0
 8008d24:	6809      	ldr	r1, [r1, #0]
 8008d26:	4811      	ldr	r0, [pc, #68]	; (8008d6c <find_map_header+0x58>)
 8008d28:	4281      	cmp	r1, r0
 8008d2a:	d112      	bne.n	8008d52 <find_map_header+0x3e>

			if ((c < 0) && (OVERRIDE_BIN -> header [i [0]].SEQ_present & 4))	return 2;
 8008d2c:	2a00      	cmp	r2, #0
 8008d2e:	da0b      	bge.n	8008d48 <find_map_header+0x34>
 8008d30:	480d      	ldr	r0, [pc, #52]	; (8008d68 <find_map_header+0x54>)
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	0149      	lsls	r1, r1, #5
 8008d36:	4401      	add	r1, r0
 8008d38:	311c      	adds	r1, #28
 8008d3a:	7809      	ldrb	r1, [r1, #0]
 8008d3c:	f001 0104 	and.w	r1, r1, #4
 8008d40:	2900      	cmp	r1, #0
 8008d42:	d001      	beq.n	8008d48 <find_map_header+0x34>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e00b      	b.n	8008d60 <find_map_header+0x4c>
			c --;
 8008d48:	3a01      	subs	r2, #1
			if (c == 0)															return 1;
 8008d4a:	2a00      	cmp	r2, #0
 8008d4c:	d101      	bne.n	8008d52 <find_map_header+0x3e>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e006      	b.n	8008d60 <find_map_header+0x4c>

		}

	} while ((++ i [0]) < (OVERRIDE_SIZE / 32));
 8008d52:	6819      	ldr	r1, [r3, #0]
 8008d54:	3101      	adds	r1, #1
 8008d56:	6019      	str	r1, [r3, #0]
 8008d58:	6819      	ldr	r1, [r3, #0]
 8008d5a:	297f      	cmp	r1, #127	; 0x7f
 8008d5c:	d9de      	bls.n	8008d1c <find_map_header+0x8>
	return 0;
 8008d5e:	2300      	movs	r3, #0

}
 8008d60:	4618      	mov	r0, r3
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr
 8008d68:	0800f000 	.word	0x0800f000
 8008d6c:	1a53454e 	.word	0x1a53454e

08008d70 <check_map_abstract>:

// verify mapper abstract
int check_map_abstract (register unsigned int * i) {
 8008d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4605      	mov	r5, r0

	register t_v * _v = & v;
 8008d78:	4e65      	ldr	r6, [pc, #404]	; (8008f10 <check_map_abstract+0x1a0>)

	// erase all the index values
	memset (& _v -> header_override_index, 0, 8);
 8008d7a:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8008d7e:	2208      	movs	r2, #8
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f004 fa7d 	bl	800d282 <memset>

	// save the header index
	register unsigned int j = i [0] ++;		//	if (j >= (OVERRIDE_SIZE / 32))		return 11;
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	602a      	str	r2, [r5, #0]
 8008d8e:	469a      	mov	sl, r3
	register t_h_override *	hdr = & OVERRIDE_BIN -> header [j];
 8008d90:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8008d94:	f103 6400 	add.w	r4, r3, #134217728	; 0x8000000
 8008d98:	f504 4470 	add.w	r4, r4, #61440	; 0xf000

	// check header signatures
	if (hdr -> iNES_signature != 0x1A53454E)									return 1;
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	4a5d      	ldr	r2, [pc, #372]	; (8008f14 <check_map_abstract+0x1a4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d001      	beq.n	8008da8 <check_map_abstract+0x38>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e0b0      	b.n	8008f0a <check_map_abstract+0x19a>
	if (hdr -> CRLF != 0x0A0D)													return 2;
 8008da8:	8be3      	ldrh	r3, [r4, #30]
 8008daa:	f640 220d 	movw	r2, #2573	; 0xa0d
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d001      	beq.n	8008db6 <check_map_abstract+0x46>
 8008db2:	2302      	movs	r3, #2
 8008db4:	e0a9      	b.n	8008f0a <check_map_abstract+0x19a>

	// check PRG-ROM size not zero
	register unsigned int t = (hdr -> PRG_ROM_size << 14) | ((hdr -> PRG_CHR_ROM_size_MSB & 15) << 22);
 8008db6:	7923      	ldrb	r3, [r4, #4]
 8008db8:	039a      	lsls	r2, r3, #14
 8008dba:	7a63      	ldrb	r3, [r4, #9]
 8008dbc:	059b      	lsls	r3, r3, #22
 8008dbe:	f003 7370 	and.w	r3, r3, #62914560	; 0x3c00000
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	4698      	mov	r8, r3
	if (! t)																	return 3;
 8008dc6:	f1b8 0f00 	cmp.w	r8, #0
 8008dca:	d101      	bne.n	8008dd0 <check_map_abstract+0x60>
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e09c      	b.n	8008f0a <check_map_abstract+0x19a>

	// any PRG bank sequence?
	if (1 << (hdr -> PRG_bank_bits) < t) {
 8008dd0:	7e23      	ldrb	r3, [r4, #24]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	4093      	lsls	r3, r2
 8008dd8:	4543      	cmp	r3, r8
 8008dda:	d20b      	bcs.n	8008df4 <check_map_abstract+0x84>

		_v -> PRG_override_index = i [0];	if (verify_sequence (i))			return 6; }
 8008ddc:	682b      	ldr	r3, [r5, #0]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 8008de4:	4628      	mov	r0, r5
 8008de6:	f7ff fca5 	bl	8008734 <verify_sequence>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <check_map_abstract+0x84>
 8008df0:	2306      	movs	r3, #6
 8008df2:	e08a      	b.n	8008f0a <check_map_abstract+0x19a>

	// any CHR bank sequence?
	t = (hdr -> CHR_ROM_size << 13) | ((hdr -> PRG_CHR_ROM_size_MSB >> 4) << 21);
 8008df4:	7963      	ldrb	r3, [r4, #5]
 8008df6:	035a      	lsls	r2, r3, #13
 8008df8:	7a63      	ldrb	r3, [r4, #9]
 8008dfa:	091b      	lsrs	r3, r3, #4
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	055b      	lsls	r3, r3, #21
 8008e00:	4313      	orrs	r3, r2
 8008e02:	4698      	mov	r8, r3
	if (1 << (hdr -> CHR_bank_bits) < t) {
 8008e04:	7e63      	ldrb	r3, [r4, #25]
 8008e06:	461a      	mov	r2, r3
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4093      	lsls	r3, r2
 8008e0c:	4543      	cmp	r3, r8
 8008e0e:	d20b      	bcs.n	8008e28 <check_map_abstract+0xb8>

		_v -> CHR_override_index = i [0];	if (verify_sequence (i))			return 7; }
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
 8008e18:	4628      	mov	r0, r5
 8008e1a:	f7ff fc8b 	bl	8008734 <verify_sequence>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <check_map_abstract+0xb8>
 8008e24:	2307      	movs	r3, #7
 8008e26:	e070      	b.n	8008f0a <check_map_abstract+0x19a>

	// any PRG SAV bank sequence?
					  	  t = hdr -> PRG_RAM_size >> 4;
 8008e28:	7aa3      	ldrb	r3, [r4, #10]
 8008e2a:	091b      	lsrs	r3, r3, #4
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	4698      	mov	r8, r3
	register unsigned int u = hdr -> CHR_RAM_size >> 4;
 8008e30:	7ae3      	ldrb	r3, [r4, #11]
 8008e32:	091b      	lsrs	r3, r3, #4
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	4699      	mov	r9, r3
	if		( t
 8008e38:	f1b8 0f00 	cmp.w	r8, #0
 8008e3c:	d010      	beq.n	8008e60 <check_map_abstract+0xf0>
	&&		((t + 6)
 8008e3e:	f108 0306 	add.w	r3, r8, #6
	>		hdr -> PRG_bank_bits_SRAM)) {
 8008e42:	7ea2      	ldrb	r2, [r4, #26]
	&&		((t + 6)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d90b      	bls.n	8008e60 <check_map_abstract+0xf0>
		_v -> SAV_override_index = i [0];	if (verify_sequence (i))			return 8; }
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7ff fc6f 	bl	8008734 <verify_sequence>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d015      	beq.n	8008e88 <check_map_abstract+0x118>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	e054      	b.n	8008f0a <check_map_abstract+0x19a>

	// any CHR SAV bank sequence?
	else if ( u
 8008e60:	f1b9 0f00 	cmp.w	r9, #0
 8008e64:	d010      	beq.n	8008e88 <check_map_abstract+0x118>
	&&		((u + 6)
 8008e66:	f109 0306 	add.w	r3, r9, #6
	>		hdr -> CHR_bank_bits_SRAM)) {
 8008e6a:	7ee2      	ldrb	r2, [r4, #27]
	&&		((u + 6)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d90b      	bls.n	8008e88 <check_map_abstract+0x118>
		_v -> SAV_override_index = i [0];	if (verify_sequence (i))			return 8; }
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f7ff fc5b 	bl	8008734 <verify_sequence>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <check_map_abstract+0x118>
 8008e84:	2308      	movs	r3, #8
 8008e86:	e040      	b.n	8008f0a <check_map_abstract+0x19a>

	// any INIT sequence?
	if (hdr -> SEQ_present & 1) {
 8008e88:	7f23      	ldrb	r3, [r4, #28]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <check_map_abstract+0x13a>
		_v -> INIT_override_index = i [0];	if (verify_sequence (i))			return 4; }
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7ff fc4a 	bl	8008734 <verify_sequence>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <check_map_abstract+0x13a>
 8008ea6:	2304      	movs	r3, #4
 8008ea8:	e02f      	b.n	8008f0a <check_map_abstract+0x19a>

	// any DOWN sequence?
	if (hdr -> SEQ_present & 2) {
 8008eaa:	7f23      	ldrb	r3, [r4, #28]
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <check_map_abstract+0x15c>
		_v -> DOWN_override_index = i [0];	if (verify_sequence (i))			return 5; }
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f7ff fc39 	bl	8008734 <verify_sequence>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <check_map_abstract+0x15c>
 8008ec8:	2305      	movs	r3, #5
 8008eca:	e01e      	b.n	8008f0a <check_map_abstract+0x19a>

	// any TEST sequence?
	if (hdr -> SEQ_present & 4) {
 8008ecc:	7f23      	ldrb	r3, [r4, #28]
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00b      	beq.n	8008eee <check_map_abstract+0x17e>
		_v -> TEST_override_index = i [0];	if (verify_sequence (i))			return 9; }
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f7ff fc28 	bl	8008734 <verify_sequence>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <check_map_abstract+0x17e>
 8008eea:	2309      	movs	r3, #9
 8008eec:	e00d      	b.n	8008f0a <check_map_abstract+0x19a>

	// test the bounds on the NAME slot (even if the name isn't present)
	_v -> name_override_index = i [0];		if (i [0] >= (OVERRIDE_SIZE / 32))	return 10;
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
 8008ef6:	682b      	ldr	r3, [r5, #0]
 8008ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8008efa:	d901      	bls.n	8008f00 <check_map_abstract+0x190>
 8008efc:	230a      	movs	r3, #10
 8008efe:	e004      	b.n	8008f0a <check_map_abstract+0x19a>

	// assign the header index
	_v -> header_override_index = j;
 8008f00:	fa5f f38a 	uxtb.w	r3, sl
 8008f04:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	return 0;
 8008f08:	2300      	movs	r3, #0

}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f10:	200034cc 	.word	0x200034cc
 8008f14:	1a53454e 	.word	0x1a53454e

08008f18 <setup_override>:
	"mapper abstract out of bounds   ",
//	"bad MAP name entry              "

};
*/
void setup_override () {
 8008f18:	b598      	push	{r3, r4, r7, lr}
 8008f1a:	af00      	add	r7, sp, #0

	// set up the mapper header index
//	register int				i = v.header_override_index;
	register t_h_override *		j = & OVERRIDE_BIN -> header [v.header_override_index];
 8008f1c:	4b8f      	ldr	r3, [pc, #572]	; (800915c <setup_override+0x244>)
 8008f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f22:	015b      	lsls	r3, r3, #5
 8008f24:	f103 6400 	add.w	r4, r3, #134217728	; 0x8000000
 8008f28:	f504 4470 	add.w	r4, r4, #61440	; 0xf000

	// set up iNES header
	memcpy (& info, j, 32);
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	4621      	mov	r1, r4
 8008f30:	488b      	ldr	r0, [pc, #556]	; (8009160 <setup_override+0x248>)
 8008f32:	f004 f99b 	bl	800d26c <memcpy>

	// calculate the PRG-ROM size
	v.PRG_ROM_size			= (info.b [4] << 14) | (info.b [9] & 15) << 22;	//	PRG 16KB bank count
 8008f36:	4b8a      	ldr	r3, [pc, #552]	; (8009160 <setup_override+0x248>)
 8008f38:	791b      	ldrb	r3, [r3, #4]
 8008f3a:	039a      	lsls	r2, r3, #14
 8008f3c:	4b88      	ldr	r3, [pc, #544]	; (8009160 <setup_override+0x248>)
 8008f3e:	7a5b      	ldrb	r3, [r3, #9]
 8008f40:	059b      	lsls	r3, r3, #22
 8008f42:	f003 7370 	and.w	r3, r3, #62914560	; 0x3c00000
 8008f46:	4313      	orrs	r3, r2
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4b84      	ldr	r3, [pc, #528]	; (800915c <setup_override+0x244>)
 8008f4c:	601a      	str	r2, [r3, #0]

	// set up the PRG params
//	info.r.PRG_bank_ofs		= j -> PRG_bank_ofs;
//	info.r.PRG_bank_bits	= j -> PRG_bank_bits;
	v.PRG_mask				= (1 << j -> PRG_bank_bits) - 1;
 8008f4e:	7e23      	ldrb	r3, [r4, #24]
 8008f50:	461a      	mov	r2, r3
 8008f52:	2301      	movs	r3, #1
 8008f54:	4093      	lsls	r3, r2
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	4b7f      	ldr	r3, [pc, #508]	; (800915c <setup_override+0x244>)
 8008f5e:	811a      	strh	r2, [r3, #8]
	v.PRG_bank_mask			= v.PRG_ROM_size - v.PRG_mask - 1;
 8008f60:	4b7e      	ldr	r3, [pc, #504]	; (800915c <setup_override+0x244>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a7d      	ldr	r2, [pc, #500]	; (800915c <setup_override+0x244>)
 8008f66:	8912      	ldrh	r2, [r2, #8]
 8008f68:	1a9b      	subs	r3, r3, r2
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	4a7b      	ldr	r2, [pc, #492]	; (800915c <setup_override+0x244>)
 8008f6e:	6053      	str	r3, [r2, #4]
	if (v.PRG_bank_mask) {
 8008f70:	4b7a      	ldr	r3, [pc, #488]	; (800915c <setup_override+0x244>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d008      	beq.n	8008f8a <setup_override+0x72>

		// check the PRG banking sequence
		map.PRG_B					 = (bank_sw) PRG_override;
 8008f78:	4b7a      	ldr	r3, [pc, #488]	; (8009164 <setup_override+0x24c>)
 8008f7a:	4a7b      	ldr	r2, [pc, #492]	; (8009168 <setup_override+0x250>)
 8008f7c:	625a      	str	r2, [r3, #36]	; 0x24
		v.PRG_bank_mask				|= b31;
 8008f7e:	4b77      	ldr	r3, [pc, #476]	; (800915c <setup_override+0x244>)
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f86:	4a75      	ldr	r2, [pc, #468]	; (800915c <setup_override+0x244>)
 8008f88:	6053      	str	r3, [r2, #4]

	}
	// compute the CHR-ROM size
	v.CHR_ROM_size = (info.b [5] << 13) | (info.b [9] & 240) << 17;	//	CHR  8KB bank count
 8008f8a:	4b75      	ldr	r3, [pc, #468]	; (8009160 <setup_override+0x248>)
 8008f8c:	795b      	ldrb	r3, [r3, #5]
 8008f8e:	035a      	lsls	r2, r3, #13
 8008f90:	4b73      	ldr	r3, [pc, #460]	; (8009160 <setup_override+0x248>)
 8008f92:	7a5b      	ldrb	r3, [r3, #9]
 8008f94:	045b      	lsls	r3, r3, #17
 8008f96:	f003 73f0 	and.w	r3, r3, #31457280	; 0x1e00000
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4b6f      	ldr	r3, [pc, #444]	; (800915c <setup_override+0x244>)
 8008fa0:	60da      	str	r2, [r3, #12]
	if (v.CHR_ROM_size) {
 8008fa2:	4b6e      	ldr	r3, [pc, #440]	; (800915c <setup_override+0x244>)
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d01d      	beq.n	8008fe6 <setup_override+0xce>

		// set up the CHR params
//		info.r.CHR_bank_ofs		= j -> CHR_bank_ofs;
//		info.r.CHR_bank_bits	= j -> CHR_bank_bits;
		v.CHR_mask				= (1 << j -> CHR_bank_bits) - 1;
 8008faa:	7e63      	ldrb	r3, [r4, #25]
 8008fac:	461a      	mov	r2, r3
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4093      	lsls	r3, r2
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	4b68      	ldr	r3, [pc, #416]	; (800915c <setup_override+0x244>)
 8008fba:	829a      	strh	r2, [r3, #20]
		v.CHR_bank_mask			= v.CHR_ROM_size - v.CHR_mask - 1;
 8008fbc:	4b67      	ldr	r3, [pc, #412]	; (800915c <setup_override+0x244>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	4a66      	ldr	r2, [pc, #408]	; (800915c <setup_override+0x244>)
 8008fc2:	8a92      	ldrh	r2, [r2, #20]
 8008fc4:	1a9b      	subs	r3, r3, r2
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	4a64      	ldr	r2, [pc, #400]	; (800915c <setup_override+0x244>)
 8008fca:	6113      	str	r3, [r2, #16]
		if (v.CHR_bank_mask) {
 8008fcc:	4b63      	ldr	r3, [pc, #396]	; (800915c <setup_override+0x244>)
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d008      	beq.n	8008fe6 <setup_override+0xce>

			// check the CHR banking sequence
			map.CHR_B					 = (bank_sw) CHR_override;
 8008fd4:	4b63      	ldr	r3, [pc, #396]	; (8009164 <setup_override+0x24c>)
 8008fd6:	4a65      	ldr	r2, [pc, #404]	; (800916c <setup_override+0x254>)
 8008fd8:	629a      	str	r2, [r3, #40]	; 0x28
			v.CHR_bank_mask				|= b31;
 8008fda:	4b60      	ldr	r3, [pc, #384]	; (800915c <setup_override+0x244>)
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fe2:	4a5e      	ldr	r2, [pc, #376]	; (800915c <setup_override+0x244>)
 8008fe4:	6113      	str	r3, [r2, #16]

		}
	}
	// set up the PRG SAV
	v.SAV_ofs				= 0;	//	not used for manual mode
 8008fe6:	4b5d      	ldr	r3, [pc, #372]	; (800915c <setup_override+0x244>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	849a      	strh	r2, [r3, #36]	; 0x24
	if ((info.b [10] & 240) && j -> PRG_bank_bits_SRAM) {
 8008fec:	4b5c      	ldr	r3, [pc, #368]	; (8009160 <setup_override+0x248>)
 8008fee:	7a9b      	ldrb	r3, [r3, #10]
 8008ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d018      	beq.n	800902a <setup_override+0x112>
 8008ff8:	7ea3      	ldrb	r3, [r4, #26]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d015      	beq.n	800902a <setup_override+0x112>

		// set up the PRG save file parameters
		v.SAV_B_ofs				= j -> PRG_bank_bits_SRAM;
 8008ffe:	7ea2      	ldrb	r2, [r4, #26]
 8009000:	4b56      	ldr	r3, [pc, #344]	; (800915c <setup_override+0x244>)
 8009002:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		map.SAV_base			= j -> PRG_bank_ofs_SRAM;
 8009006:	8aa2      	ldrh	r2, [r4, #20]
 8009008:	4b56      	ldr	r3, [pc, #344]	; (8009164 <setup_override+0x24c>)
 800900a:	805a      	strh	r2, [r3, #2]
//		v.SRAM_size				= 64 << (info.b [10] >> 4);
		SAV_size				= (info.b [10] >> 4) + 6;
 800900c:	4b54      	ldr	r3, [pc, #336]	; (8009160 <setup_override+0x248>)
 800900e:	7a9b      	ldrb	r3, [r3, #10]
 8009010:	091b      	lsrs	r3, r3, #4
 8009012:	b2db      	uxtb	r3, r3
 8009014:	3306      	adds	r3, #6
 8009016:	b2da      	uxtb	r2, r3
 8009018:	4b55      	ldr	r3, [pc, #340]	; (8009170 <setup_override+0x258>)
 800901a:	701a      	strb	r2, [r3, #0]
		sram_src_R				= CPU_R;
 800901c:	4b55      	ldr	r3, [pc, #340]	; (8009174 <setup_override+0x25c>)
 800901e:	4a56      	ldr	r2, [pc, #344]	; (8009178 <setup_override+0x260>)
 8009020:	601a      	str	r2, [r3, #0]
		sram_src_W				= (void *) CPU_W;
 8009022:	4b56      	ldr	r3, [pc, #344]	; (800917c <setup_override+0x264>)
 8009024:	4a56      	ldr	r2, [pc, #344]	; (8009180 <setup_override+0x268>)
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	e01d      	b.n	8009066 <setup_override+0x14e>

	} else if ((info.b [11] & 240) && j -> CHR_bank_bits_SRAM) {
 800902a:	4b4d      	ldr	r3, [pc, #308]	; (8009160 <setup_override+0x248>)
 800902c:	7adb      	ldrb	r3, [r3, #11]
 800902e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d017      	beq.n	8009066 <setup_override+0x14e>
 8009036:	7ee3      	ldrb	r3, [r4, #27]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d014      	beq.n	8009066 <setup_override+0x14e>

		// set up the CHR save file parameters
		v.SAV_B_ofs				= j -> CHR_bank_bits_SRAM;
 800903c:	7ee2      	ldrb	r2, [r4, #27]
 800903e:	4b47      	ldr	r3, [pc, #284]	; (800915c <setup_override+0x244>)
 8009040:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		map.SAV_base			= j -> CHR_bank_ofs_SRAM;
 8009044:	8ae2      	ldrh	r2, [r4, #22]
 8009046:	4b47      	ldr	r3, [pc, #284]	; (8009164 <setup_override+0x24c>)
 8009048:	805a      	strh	r2, [r3, #2]
//		v.SRAM_size				= 64 << (info.b [11] >> 4);
		SAV_size				= (info.b [11] >> 4) + 6;
 800904a:	4b45      	ldr	r3, [pc, #276]	; (8009160 <setup_override+0x248>)
 800904c:	7adb      	ldrb	r3, [r3, #11]
 800904e:	091b      	lsrs	r3, r3, #4
 8009050:	b2db      	uxtb	r3, r3
 8009052:	3306      	adds	r3, #6
 8009054:	b2da      	uxtb	r2, r3
 8009056:	4b46      	ldr	r3, [pc, #280]	; (8009170 <setup_override+0x258>)
 8009058:	701a      	strb	r2, [r3, #0]
		sram_src_R				= PPU_R;
 800905a:	4b46      	ldr	r3, [pc, #280]	; (8009174 <setup_override+0x25c>)
 800905c:	4a49      	ldr	r2, [pc, #292]	; (8009184 <setup_override+0x26c>)
 800905e:	601a      	str	r2, [r3, #0]
		sram_src_W				= PPU_W;
 8009060:	4b46      	ldr	r3, [pc, #280]	; (800917c <setup_override+0x264>)
 8009062:	4a49      	ldr	r2, [pc, #292]	; (8009188 <setup_override+0x270>)
 8009064:	601a      	str	r2, [r3, #0]

	}
	v.SRAM_size				= 1 << SAV_size;
 8009066:	4b42      	ldr	r3, [pc, #264]	; (8009170 <setup_override+0x258>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	461a      	mov	r2, r3
 800906c:	2301      	movs	r3, #1
 800906e:	4093      	lsls	r3, r2
 8009070:	461a      	mov	r2, r3
 8009072:	4b3a      	ldr	r3, [pc, #232]	; (800915c <setup_override+0x244>)
 8009074:	619a      	str	r2, [r3, #24]
	v.SAV_mask				= (1 << v.SAV_B_ofs) - 1;
 8009076:	4b39      	ldr	r3, [pc, #228]	; (800915c <setup_override+0x244>)
 8009078:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800907c:	461a      	mov	r2, r3
 800907e:	2301      	movs	r3, #1
 8009080:	4093      	lsls	r3, r2
 8009082:	b29b      	uxth	r3, r3
 8009084:	3b01      	subs	r3, #1
 8009086:	b29a      	uxth	r2, r3
 8009088:	4b34      	ldr	r3, [pc, #208]	; (800915c <setup_override+0x244>)
 800908a:	841a      	strh	r2, [r3, #32]
	v.SAV_bank_mask			= v.SRAM_size - v.SAV_mask - 1;
 800908c:	4b33      	ldr	r3, [pc, #204]	; (800915c <setup_override+0x244>)
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	4a32      	ldr	r2, [pc, #200]	; (800915c <setup_override+0x244>)
 8009092:	8c12      	ldrh	r2, [r2, #32]
 8009094:	1a9b      	subs	r3, r3, r2
 8009096:	3b01      	subs	r3, #1
 8009098:	4a30      	ldr	r2, [pc, #192]	; (800915c <setup_override+0x244>)
 800909a:	61d3      	str	r3, [r2, #28]
	if (v.SAV_bank_mask) {
 800909c:	4b2f      	ldr	r3, [pc, #188]	; (800915c <setup_override+0x244>)
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d008      	beq.n	80090b6 <setup_override+0x19e>

		// check the SAV banking sequence
		map.SAV_B					 = (bank_sw) SAV_override;
 80090a4:	4b2f      	ldr	r3, [pc, #188]	; (8009164 <setup_override+0x24c>)
 80090a6:	4a39      	ldr	r2, [pc, #228]	; (800918c <setup_override+0x274>)
 80090a8:	621a      	str	r2, [r3, #32]
		v.SAV_bank_mask				|= b31;
 80090aa:	4b2c      	ldr	r3, [pc, #176]	; (800915c <setup_override+0x244>)
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090b2:	4a2a      	ldr	r2, [pc, #168]	; (800915c <setup_override+0x244>)
 80090b4:	61d3      	str	r3, [r2, #28]

	}
	// get the mode bits
	v.mode = j -> mode;
 80090b6:	7f62      	ldrb	r2, [r4, #29]
 80090b8:	4b28      	ldr	r3, [pc, #160]	; (800915c <setup_override+0x244>)
 80090ba:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	// test for bs helper flag
	if (v.mode & 32) bs_helper = b31;
 80090be:	4b27      	ldr	r3, [pc, #156]	; (800915c <setup_override+0x244>)
 80090c0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <setup_override+0x1bc>
 80090cc:	4b30      	ldr	r3, [pc, #192]	; (8009190 <setup_override+0x278>)
 80090ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090d2:	601a      	str	r2, [r3, #0]

	// test for read CHR-ROM from PRG-ROM
	if (v.mode & 64) chr_src = CPU_R;
 80090d4:	4b21      	ldr	r3, [pc, #132]	; (800915c <setup_override+0x244>)
 80090d6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80090da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <setup_override+0x1d0>
 80090e2:	4b2c      	ldr	r3, [pc, #176]	; (8009194 <setup_override+0x27c>)
 80090e4:	4a24      	ldr	r2, [pc, #144]	; (8009178 <setup_override+0x260>)
 80090e6:	601a      	str	r2, [r3, #0]

	// check for INIT sequence, MMC1 or NES-RED-PILL modes
	v.init_mode = (j -> SEQ_present & 1) | (j -> mode & 0x84);
 80090e8:	7f23      	ldrb	r3, [r4, #28]
 80090ea:	b25b      	sxtb	r3, r3
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	b25a      	sxtb	r2, r3
 80090f2:	7f63      	ldrb	r3, [r4, #29]
 80090f4:	b25b      	sxtb	r3, r3
 80090f6:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	4313      	orrs	r3, r2
 80090fe:	b25b      	sxtb	r3, r3
 8009100:	b2da      	uxtb	r2, r3
 8009102:	4b16      	ldr	r3, [pc, #88]	; (800915c <setup_override+0x244>)
 8009104:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (v.init_mode)				map.INIT_ = (save_en) INIT_override;
 8009108:	4b14      	ldr	r3, [pc, #80]	; (800915c <setup_override+0x244>)
 800910a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <setup_override+0x200>
 8009112:	4b14      	ldr	r3, [pc, #80]	; (8009164 <setup_override+0x24c>)
 8009114:	4a20      	ldr	r2, [pc, #128]	; (8009198 <setup_override+0x280>)
 8009116:	615a      	str	r2, [r3, #20]

	// check the powerdown sequence
	if (j -> SEQ_present & 2)		map.DOWN_ = (save_en) DOWN_override;
 8009118:	7f23      	ldrb	r3, [r4, #28]
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <setup_override+0x210>
 8009122:	4b10      	ldr	r3, [pc, #64]	; (8009164 <setup_override+0x24c>)
 8009124:	4a1d      	ldr	r2, [pc, #116]	; (800919c <setup_override+0x284>)
 8009126:	619a      	str	r2, [r3, #24]

	// check if the mapper footer present
	if (OVERRIDE_BIN -> name [v.name_override_index].signature == 0x0A0D2140)
 8009128:	4a1d      	ldr	r2, [pc, #116]	; (80091a0 <setup_override+0x288>)
 800912a:	4b0c      	ldr	r3, [pc, #48]	; (800915c <setup_override+0x244>)
 800912c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009130:	015b      	lsls	r3, r3, #5
 8009132:	4413      	add	r3, r2
 8009134:	331c      	adds	r3, #28
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a1a      	ldr	r2, [pc, #104]	; (80091a4 <setup_override+0x28c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d136      	bne.n	80091ac <setup_override+0x294>
			memcpy (map.text, & OVERRIDE_BIN -> name [v.name_override_index], 16);
 800913e:	4b07      	ldr	r3, [pc, #28]	; (800915c <setup_override+0x244>)
 8009140:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009144:	015b      	lsls	r3, r3, #5
 8009146:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800914a:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 800914e:	2210      	movs	r2, #16
 8009150:	4619      	mov	r1, r3
 8009152:	4815      	ldr	r0, [pc, #84]	; (80091a8 <setup_override+0x290>)
 8009154:	f004 f88a 	bl	800d26c <memcpy>
 8009158:	e035      	b.n	80091c6 <setup_override+0x2ae>
 800915a:	bf00      	nop
 800915c:	200034cc 	.word	0x200034cc
 8009160:	2000288c 	.word	0x2000288c
 8009164:	20002aac 	.word	0x20002aac
 8009168:	08008c9d 	.word	0x08008c9d
 800916c:	08008cc5 	.word	0x08008cc5
 8009170:	200034c8 	.word	0x200034c8
 8009174:	20003510 	.word	0x20003510
 8009178:	08008569 	.word	0x08008569
 800917c:	20003664 	.word	0x20003664
 8009180:	080085d1 	.word	0x080085d1
 8009184:	08008665 	.word	0x08008665
 8009188:	080086c5 	.word	0x080086c5
 800918c:	08008ced 	.word	0x08008ced
 8009190:	20002b74 	.word	0x20002b74
 8009194:	2000352c 	.word	0x2000352c
 8009198:	08008c0d 	.word	0x08008c0d
 800919c:	08008c81 	.word	0x08008c81
 80091a0:	0800f000 	.word	0x0800f000
 80091a4:	0a0d2140 	.word	0x0a0d2140
 80091a8:	20002adc 	.word	0x20002adc
	else {
			memcpy (map.text, "NO NAME MAPPER ", 15);	map.text [15] = ' ' + ch.items.override_mode_index; }
 80091ac:	220f      	movs	r2, #15
 80091ae:	4916      	ldr	r1, [pc, #88]	; (8009208 <setup_override+0x2f0>)
 80091b0:	4816      	ldr	r0, [pc, #88]	; (800920c <setup_override+0x2f4>)
 80091b2:	f004 f85b 	bl	800d26c <memcpy>
 80091b6:	4b16      	ldr	r3, [pc, #88]	; (8009210 <setup_override+0x2f8>)
 80091b8:	8adb      	ldrh	r3, [r3, #22]
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	3320      	adds	r3, #32
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	4b14      	ldr	r3, [pc, #80]	; (8009214 <setup_override+0x2fc>)
 80091c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	// configure the GPIO
	CPU_W_enable	= 0x33333333 + (0x11111111 * (ch.items.bus_disable & bus_contention));
 80091c6:	4b12      	ldr	r3, [pc, #72]	; (8009210 <setup_override+0x2f8>)
 80091c8:	895b      	ldrh	r3, [r3, #10]
 80091ca:	461a      	mov	r2, r3
 80091cc:	4b12      	ldr	r3, [pc, #72]	; (8009218 <setup_override+0x300>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	4013      	ands	r3, r2
 80091d2:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80091d6:	fb02 f303 	mul.w	r3, r2, r3
 80091da:	f103 3333 	add.w	r3, r3, #858993459	; 0x33333333
 80091de:	461a      	mov	r2, r3
 80091e0:	4b0e      	ldr	r3, [pc, #56]	; (800921c <setup_override+0x304>)
 80091e2:	601a      	str	r2, [r3, #0]
	CPU_W_disable	= 0x44444444;
 80091e4:	4b0e      	ldr	r3, [pc, #56]	; (8009220 <setup_override+0x308>)
 80091e6:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 80091ea:	601a      	str	r2, [r3, #0]
	old_PRG_bank	= 0xFFFFFFFF;
 80091ec:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <setup_override+0x30c>)
 80091ee:	f04f 32ff 	mov.w	r2, #4294967295
 80091f2:	601a      	str	r2, [r3, #0]
	old_CHR_bank	= 0xFFFFFFFF;
 80091f4:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <setup_override+0x310>)
 80091f6:	f04f 32ff 	mov.w	r2, #4294967295
 80091fa:	601a      	str	r2, [r3, #0]
	old_SAV_bank	= 0xFFFFFFFF;
 80091fc:	4b0b      	ldr	r3, [pc, #44]	; (800922c <setup_override+0x314>)
 80091fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009202:	601a      	str	r2, [r3, #0]

}
 8009204:	bf00      	nop
 8009206:	bd98      	pop	{r3, r4, r7, pc}
 8009208:	0800dcec 	.word	0x0800dcec
 800920c:	20002adc 	.word	0x20002adc
 8009210:	20003638 	.word	0x20003638
 8009214:	20002aac 	.word	0x20002aac
 8009218:	200030ac 	.word	0x200030ac
 800921c:	20002c98 	.word	0x20002c98
 8009220:	20002ca0 	.word	0x20002ca0
 8009224:	20002aec 	.word	0x20002aec
 8009228:	2000350c 	.word	0x2000350c
 800922c:	200030b0 	.word	0x200030b0

08009230 <PRG_xxx>:
// These methods provide a byte-granular address bankswitching interface to the mapper hardware.

//---------------------------------------------------------------------------------------
// simple_types

static void PRG_xxx (register uint32_t ROM_addr) { goto_bank (PRG_bank_tbl [ROM_addr >> info.r.PRG_bank_bits & v.PRG_B_mask]); }
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
 8009234:	4602      	mov	r2, r0
 8009236:	4b07      	ldr	r3, [pc, #28]	; (8009254 <PRG_xxx+0x24>)
 8009238:	7e1b      	ldrb	r3, [r3, #24]
 800923a:	fa22 f303 	lsr.w	r3, r2, r3
 800923e:	4a06      	ldr	r2, [pc, #24]	; (8009258 <PRG_xxx+0x28>)
 8009240:	7a92      	ldrb	r2, [r2, #10]
 8009242:	4013      	ands	r3, r2
 8009244:	4a05      	ldr	r2, [pc, #20]	; (800925c <PRG_xxx+0x2c>)
 8009246:	5cd3      	ldrb	r3, [r2, r3]
 8009248:	4618      	mov	r0, r3
 800924a:	f002 fb91 	bl	800b970 <goto_bank>
 800924e:	bf00      	nop
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	2000288c 	.word	0x2000288c
 8009258:	200034cc 	.word	0x200034cc
 800925c:	20002b78 	.word	0x20002b78

08009260 <CHR_xxx>:
static void CHR_xxx (register uint32_t ROM_addr) { goto_bank (CHR_bank_tbl [ROM_addr >> info.r.CHR_bank_bits & v.CHR_B_mask]); }
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
 8009264:	4602      	mov	r2, r0
 8009266:	4b07      	ldr	r3, [pc, #28]	; (8009284 <CHR_xxx+0x24>)
 8009268:	7e5b      	ldrb	r3, [r3, #25]
 800926a:	fa22 f303 	lsr.w	r3, r2, r3
 800926e:	4a06      	ldr	r2, [pc, #24]	; (8009288 <CHR_xxx+0x28>)
 8009270:	7d92      	ldrb	r2, [r2, #22]
 8009272:	4013      	ands	r3, r2
 8009274:	4a05      	ldr	r2, [pc, #20]	; (800928c <CHR_xxx+0x2c>)
 8009276:	5cd3      	ldrb	r3, [r2, r3]
 8009278:	4618      	mov	r0, r3
 800927a:	f002 fb79 	bl	800b970 <goto_bank>
 800927e:	bf00      	nop
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	2000288c 	.word	0x2000288c
 8009288:	200034cc 	.word	0x200034cc
 800928c:	20003530 	.word	0x20003530

08009290 <INIT_001>:

//---------------------------------------------------------------------------------------
// MMC1

static void INIT_001  (void						 ) { CPU_W (0x8000, 0x80); MMC1 (0xE000, 0x00); MMC1 (0x8000, 0x1E); }
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
 8009294:	2180      	movs	r1, #128	; 0x80
 8009296:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800929a:	f7ff f999 	bl	80085d0 <CPU_W>
 800929e:	2100      	movs	r1, #0
 80092a0:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80092a4:	f7ff fab8 	bl	8008818 <MMC1>
 80092a8:	211e      	movs	r1, #30
 80092aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80092ae:	f7ff fab3 	bl	8008818 <MMC1>
 80092b2:	bf00      	nop
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <DOWN_001>:
static void DOWN_001  (void						 ) { MMC1  (0xE000, 0x10); }
 80092b6:	b580      	push	{r7, lr}
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	2110      	movs	r1, #16
 80092bc:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80092c0:	f7ff faaa 	bl	8008818 <MMC1>
 80092c4:	bf00      	nop
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <MIR_001>:
static void MIR_001   (register uint32_t d		 ) { MMC1  (0x8000, (d & 1) | 0x1E); }
 80092c8:	b580      	push	{r7, lr}
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	4603      	mov	r3, r0
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	f043 031e 	orr.w	r3, r3, #30
 80092d6:	4619      	mov	r1, r3
 80092d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80092dc:	f7ff fa9c 	bl	8008818 <MMC1>
 80092e0:	bf00      	nop
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <SAV_001>:
static void SAV_001	  (register uint32_t ROM_addr) { int i = ROM_addr >> map.init; MMC1 (0xA000, i); MMC1 (0xC000, i); }
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4602      	mov	r2, r0
 80092ec:	4b09      	ldr	r3, [pc, #36]	; (8009314 <SAV_001+0x30>)
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
 80092f4:	607b      	str	r3, [r7, #4]
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 80092fc:	f7ff fa8c 	bl	8008818 <MMC1>
 8009300:	6879      	ldr	r1, [r7, #4]
 8009302:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8009306:	f7ff fa87 	bl	8008818 <MMC1>
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20002aac 	.word	0x20002aac

08009318 <PRG_001>:
static void PRG_001	  (register uint32_t ROM_addr) { ROM_addr >>= 14; MMC1  (0xE000, ROM_addr & 15); MMC1 (0xA000, ROM_addr); MMC1 (0xC000, ROM_addr); }
 8009318:	b598      	push	{r3, r4, r7, lr}
 800931a:	af00      	add	r7, sp, #0
 800931c:	4604      	mov	r4, r0
 800931e:	0ba4      	lsrs	r4, r4, #14
 8009320:	4623      	mov	r3, r4
 8009322:	f003 030f 	and.w	r3, r3, #15
 8009326:	4619      	mov	r1, r3
 8009328:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800932c:	f7ff fa74 	bl	8008818 <MMC1>
 8009330:	4623      	mov	r3, r4
 8009332:	4619      	mov	r1, r3
 8009334:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8009338:	f7ff fa6e 	bl	8008818 <MMC1>
 800933c:	4623      	mov	r3, r4
 800933e:	4619      	mov	r1, r3
 8009340:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8009344:	f7ff fa68 	bl	8008818 <MMC1>
 8009348:	bf00      	nop
 800934a:	bd98      	pop	{r3, r4, r7, pc}

0800934c <CHR_001>:
static void CHR_001	  (register uint32_t ROM_addr) { MMC1  (0xA000, ROM_addr >> 12 & 31); }
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
 8009350:	4603      	mov	r3, r0
 8009352:	0b1b      	lsrs	r3, r3, #12
 8009354:	f003 031f 	and.w	r3, r3, #31
 8009358:	4619      	mov	r1, r3
 800935a:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 800935e:	f7ff fa5b 	bl	8008818 <MMC1>
 8009362:	bf00      	nop
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <TEST_001>:
static void TEST_001  (void						 ) { if (SAV_size == 14) map.init = 10; if (info.b [4] <= 2) { v.PRG_mask = 0x7FFF; info.r.PRG_bank_ofs = 0x8000; v.PRG_bank_mask = b31; }}
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
 800936c:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <TEST_001+0x3c>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b0e      	cmp	r3, #14
 8009372:	d102      	bne.n	800937a <TEST_001+0x12>
 8009374:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <TEST_001+0x40>)
 8009376:	220a      	movs	r2, #10
 8009378:	705a      	strb	r2, [r3, #1]
 800937a:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <TEST_001+0x44>)
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	2b02      	cmp	r3, #2
 8009380:	d80b      	bhi.n	800939a <TEST_001+0x32>
 8009382:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <TEST_001+0x48>)
 8009384:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009388:	811a      	strh	r2, [r3, #8]
 800938a:	4b08      	ldr	r3, [pc, #32]	; (80093ac <TEST_001+0x44>)
 800938c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009390:	821a      	strh	r2, [r3, #16]
 8009392:	4b07      	ldr	r3, [pc, #28]	; (80093b0 <TEST_001+0x48>)
 8009394:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	bf00      	nop
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	200034c8 	.word	0x200034c8
 80093a8:	20002aac 	.word	0x20002aac
 80093ac:	2000288c 	.word	0x2000288c
 80093b0:	200034cc 	.word	0x200034cc

080093b4 <MIR_010>:

//---------------------------------------------------------------------------------------
// MMC2 and MMC4

static void MIR_010 (register uint32_t d	   ) { CPU_W (0xF000, d &  1		   ); CPU_W (0xE000,			  0); }
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	4603      	mov	r3, r0
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	4619      	mov	r1, r3
 80093c0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80093c4:	f7ff f904 	bl	80085d0 <CPU_W>
 80093c8:	2100      	movs	r1, #0
 80093ca:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80093ce:	f7ff f8ff 	bl	80085d0 <CPU_W>
 80093d2:	bf00      	nop
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <PRG_010>:
static void PRG_010 (register uint32_t ROM_addr) { CPU_W (0xA000, ROM_addr >> map.init); }
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0
 80093dc:	4602      	mov	r2, r0
 80093de:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <PRG_010+0x1c>)
 80093e0:	785b      	ldrb	r3, [r3, #1]
 80093e2:	fa22 f303 	lsr.w	r3, r2, r3
 80093e6:	4619      	mov	r1, r3
 80093e8:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 80093ec:	f7ff f8f0 	bl	80085d0 <CPU_W>
 80093f0:	bf00      	nop
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20002aac 	.word	0x20002aac

080093f8 <CHR_010>:
static void CHR_010	(register uint32_t ROM_addr) { CPU_W (0xB000, ROM_addr >> 12); CPU_W (0xC000, ROM_addr >> 12); }
 80093f8:	b598      	push	{r3, r4, r7, lr}
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	4604      	mov	r4, r0
 80093fe:	0b23      	lsrs	r3, r4, #12
 8009400:	4619      	mov	r1, r3
 8009402:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8009406:	f7ff f8e3 	bl	80085d0 <CPU_W>
 800940a:	0b23      	lsrs	r3, r4, #12
 800940c:	4619      	mov	r1, r3
 800940e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8009412:	f7ff f8dd 	bl	80085d0 <CPU_W>
 8009416:	bf00      	nop
 8009418:	bd98      	pop	{r3, r4, r7, pc}
	...

0800941c <TEST_010>:

static void TEST_010 (void) {
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0

	if (info.b [4] < 3) {
 8009420:	4b13      	ldr	r3, [pc, #76]	; (8009470 <TEST_010+0x54>)
 8009422:	791b      	ldrb	r3, [r3, #4]
 8009424:	2b02      	cmp	r3, #2
 8009426:	d80f      	bhi.n	8009448 <TEST_010+0x2c>
		map.PRG_ofs		= 4;
 8009428:	4b12      	ldr	r3, [pc, #72]	; (8009474 <TEST_010+0x58>)
 800942a:	2204      	movs	r2, #4
 800942c:	71da      	strb	r2, [r3, #7]
		map.init		= 13;
 800942e:	4b11      	ldr	r3, [pc, #68]	; (8009474 <TEST_010+0x58>)
 8009430:	220d      	movs	r2, #13
 8009432:	705a      	strb	r2, [r3, #1]
		map.text [12]	= '2';
 8009434:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <TEST_010+0x58>)
 8009436:	2232      	movs	r2, #50	; 0x32
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		info.b [6]		= 0x90;
 800943c:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <TEST_010+0x54>)
 800943e:	2290      	movs	r2, #144	; 0x90
 8009440:	719a      	strb	r2, [r3, #6]
		scan_PRG ();
 8009442:	f002 f8a5 	bl	800b590 <scan_PRG>
	else {
		info.r.PRG_bank_ofs	 = 0x8000;
		v.PRG_mask			^= 0x2000;
		v.PRG_bank_mask		^= 0x2000;
	}
}
 8009446:	e010      	b.n	800946a <TEST_010+0x4e>
		info.r.PRG_bank_ofs	 = 0x8000;
 8009448:	4b09      	ldr	r3, [pc, #36]	; (8009470 <TEST_010+0x54>)
 800944a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800944e:	821a      	strh	r2, [r3, #16]
		v.PRG_mask			^= 0x2000;
 8009450:	4b09      	ldr	r3, [pc, #36]	; (8009478 <TEST_010+0x5c>)
 8009452:	891b      	ldrh	r3, [r3, #8]
 8009454:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009458:	b29a      	uxth	r2, r3
 800945a:	4b07      	ldr	r3, [pc, #28]	; (8009478 <TEST_010+0x5c>)
 800945c:	811a      	strh	r2, [r3, #8]
		v.PRG_bank_mask		^= 0x2000;
 800945e:	4b06      	ldr	r3, [pc, #24]	; (8009478 <TEST_010+0x5c>)
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009466:	4a04      	ldr	r2, [pc, #16]	; (8009478 <TEST_010+0x5c>)
 8009468:	6053      	str	r3, [r2, #4]
}
 800946a:	bf00      	nop
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	2000288c 	.word	0x2000288c
 8009474:	20002aac 	.word	0x20002aac
 8009478:	200034cc 	.word	0x200034cc

0800947c <INIT_004>:

//---------------------------------------------------------------------------------------
// MMC3

//static void INIT_M25  (void)					   { CPU_W (0x5000,	0x00); CPU_W (0x5100, 0x00); CPU_W (0x8000, 0x20); CPU_W (0xA001, 0xB0); }
static void INIT_004  (void						 ) { CPU_W (0x8000,  0x20); CPU_W (0xA001, map.init); }
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
 8009480:	2120      	movs	r1, #32
 8009482:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009486:	f7ff f8a3 	bl	80085d0 <CPU_W>
 800948a:	4b04      	ldr	r3, [pc, #16]	; (800949c <INIT_004+0x20>)
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	4619      	mov	r1, r3
 8009490:	f24a 0001 	movw	r0, #40961	; 0xa001
 8009494:	f7ff f89c 	bl	80085d0 <CPU_W>
 8009498:	bf00      	nop
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20002aac 	.word	0x20002aac

080094a0 <DOWN_004>:
static void DOWN_004  (void						 ) { CPU_W (0xA001,  0x00); }
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	2100      	movs	r1, #0
 80094a6:	f24a 0001 	movw	r0, #40961	; 0xa001
 80094aa:	f7ff f891 	bl	80085d0 <CPU_W>
 80094ae:	bf00      	nop
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <MIR_004>:
static void MIR_004   (register uint32_t d		 ) { CPU_W (0xA000, d & 1); CPU_W (0x8000, 0); }
 80094b2:	b580      	push	{r7, lr}
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	4619      	mov	r1, r3
 80094be:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 80094c2:	f7ff f885 	bl	80085d0 <CPU_W>
 80094c6:	2100      	movs	r1, #0
 80094c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80094cc:	f7ff f880 	bl	80085d0 <CPU_W>
 80094d0:	bf00      	nop
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <PRG_004>:
//static void PRG_M25   (register uint32_t ROM_addr) { CPU_W (0x8000,	0x26); CPU_W (0x8001, ROM_addr >> 13 ^ info.b [5]); }
static void PRG_004   (register uint32_t ROM_addr) { CPU_W (0x8000,  0x26); CPU_W (0x8001, ROM_addr >> 13); }
 80094d4:	b598      	push	{r3, r4, r7, lr}
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	4604      	mov	r4, r0
 80094da:	2126      	movs	r1, #38	; 0x26
 80094dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80094e0:	f7ff f876 	bl	80085d0 <CPU_W>
 80094e4:	0b63      	lsrs	r3, r4, #13
 80094e6:	4619      	mov	r1, r3
 80094e8:	f248 0001 	movw	r0, #32769	; 0x8001
 80094ec:	f7ff f870 	bl	80085d0 <CPU_W>
 80094f0:	bf00      	nop
 80094f2:	bd98      	pop	{r3, r4, r7, pc}

080094f4 <CHR_004>:
static void CHR_004   (register uint32_t ROM_addr) { CPU_W (0x8000,  0x22); CPU_W (0x8001, ROM_addr >> 10); }
 80094f4:	b598      	push	{r3, r4, r7, lr}
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	4604      	mov	r4, r0
 80094fa:	2122      	movs	r1, #34	; 0x22
 80094fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009500:	f7ff f866 	bl	80085d0 <CPU_W>
 8009504:	0aa3      	lsrs	r3, r4, #10
 8009506:	4619      	mov	r1, r3
 8009508:	f248 0001 	movw	r0, #32769	; 0x8001
 800950c:	f7ff f860 	bl	80085d0 <CPU_W>
 8009510:	bf00      	nop
 8009512:	bd98      	pop	{r3, r4, r7, pc}

08009514 <TEST_004>:

static void TEST_004  (void				) {
 8009514:	b590      	push	{r4, r7, lr}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0

	// set save port base back to standatd location
	map.SAV_base			 = 0x6000;
 800951a:	4b74      	ldr	r3, [pc, #464]	; (80096ec <TEST_004+0x1d8>)
 800951c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8009520:	805a      	strh	r2, [r3, #2]
	info.r.PRG_bank_ofs_SRAM = 0x6000;
 8009522:	4b73      	ldr	r3, [pc, #460]	; (80096f0 <TEST_004+0x1dc>)
 8009524:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8009528:	829a      	strh	r2, [r3, #20]

	// test for RAMBO-1
	CPU_W (0xC000, 1);
 800952a:	2101      	movs	r1, #1
 800952c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8009530:	f7ff f84e 	bl	80085d0 <CPU_W>
	CPU_W (0xC001, 1);
 8009534:	2101      	movs	r1, #1
 8009536:	f24c 0001 	movw	r0, #49153	; 0xc001
 800953a:	f7ff f849 	bl	80085d0 <CPU_W>
	CPU_W (0xE000, 0);
 800953e:	2100      	movs	r1, #0
 8009540:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8009544:	f7ff f844 	bl	80085d0 <CPU_W>
	CPU_W (0xE001, 0);
 8009548:	2100      	movs	r1, #0
 800954a:	f24e 0001 	movw	r0, #57345	; 0xe001
 800954e:	f7ff f83f 	bl	80085d0 <CPU_W>
	for (int i = 0; i < 8; i ++)	CPU_R (0x8000);					//	prime the IRQ counter
 8009552:	2300      	movs	r3, #0
 8009554:	607b      	str	r3, [r7, #4]
 8009556:	e006      	b.n	8009566 <TEST_004+0x52>
 8009558:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800955c:	f7ff f804 	bl	8008568 <CPU_R>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3301      	adds	r3, #1
 8009564:	607b      	str	r3, [r7, #4]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b07      	cmp	r3, #7
 800956a:	ddf5      	ble.n	8009558 <TEST_004+0x44>
	if (!(GPIOA -> IDR & 0x0400)) {
 800956c:	4b61      	ldr	r3, [pc, #388]	; (80096f4 <TEST_004+0x1e0>)
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009574:	2b00      	cmp	r3, #0
 8009576:	d139      	bne.n	80095ec <TEST_004+0xd8>

		memcpy (map.text, "TENGEN RAMBO-   ", 16);
 8009578:	4b5c      	ldr	r3, [pc, #368]	; (80096ec <TEST_004+0x1d8>)
 800957a:	4a5f      	ldr	r2, [pc, #380]	; (80096f8 <TEST_004+0x1e4>)
 800957c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8009580:	4613      	mov	r3, r2
 8009582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		map.text [13] = map.reserved_2;
 8009588:	4b58      	ldr	r3, [pc, #352]	; (80096ec <TEST_004+0x1d8>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	b2da      	uxtb	r2, r3
 800958e:	4b57      	ldr	r3, [pc, #348]	; (80096ec <TEST_004+0x1d8>)
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		map.text [14] = map.reserved_3;
 8009594:	4b55      	ldr	r3, [pc, #340]	; (80096ec <TEST_004+0x1d8>)
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	b2da      	uxtb	r2, r3
 800959a:	4b54      	ldr	r3, [pc, #336]	; (80096ec <TEST_004+0x1d8>)
 800959c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		info.b [6] = (info.b [6] & 0x0F) | (map.reserved_1 <<	4);		//	set low nibble of alt. mapper number
 80095a0:	4b53      	ldr	r3, [pc, #332]	; (80096f0 <TEST_004+0x1dc>)
 80095a2:	799b      	ldrb	r3, [r3, #6]
 80095a4:	b25b      	sxtb	r3, r3
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	b25a      	sxtb	r2, r3
 80095ac:	4b4f      	ldr	r3, [pc, #316]	; (80096ec <TEST_004+0x1d8>)
 80095ae:	7adb      	ldrb	r3, [r3, #11]
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	b25b      	sxtb	r3, r3
 80095b4:	4313      	orrs	r3, r2
 80095b6:	b25b      	sxtb	r3, r3
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	4b4d      	ldr	r3, [pc, #308]	; (80096f0 <TEST_004+0x1dc>)
 80095bc:	719a      	strb	r2, [r3, #6]
		info.b [7] = (info.b [7] & 0x0F) | (map.reserved_1 & 0xF0); 	//	set high nibble of alt. mapper number
 80095be:	4b4c      	ldr	r3, [pc, #304]	; (80096f0 <TEST_004+0x1dc>)
 80095c0:	79db      	ldrb	r3, [r3, #7]
 80095c2:	b25b      	sxtb	r3, r3
 80095c4:	f003 030f 	and.w	r3, r3, #15
 80095c8:	b25a      	sxtb	r2, r3
 80095ca:	4b48      	ldr	r3, [pc, #288]	; (80096ec <TEST_004+0x1d8>)
 80095cc:	7adb      	ldrb	r3, [r3, #11]
 80095ce:	b25b      	sxtb	r3, r3
 80095d0:	f023 030f 	bic.w	r3, r3, #15
 80095d4:	b25b      	sxtb	r3, r3
 80095d6:	4313      	orrs	r3, r2
 80095d8:	b25b      	sxtb	r3, r3
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	4b44      	ldr	r3, [pc, #272]	; (80096f0 <TEST_004+0x1dc>)
 80095de:	71da      	strb	r2, [r3, #7]
		CPU_W (0xE000, 0);												//	clear IRQ line
 80095e0:	2100      	movs	r1, #0
 80095e2:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80095e6:	f7fe fff3 	bl	80085d0 <CPU_W>
		return;
 80095ea:	e07b      	b.n	80096e4 <TEST_004+0x1d0>

	}
	// test for MMC6
	switch (SAV_size) {
 80095ec:	4b43      	ldr	r3, [pc, #268]	; (80096fc <TEST_004+0x1e8>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b0a      	cmp	r3, #10
 80095f2:	d118      	bne.n	8009626 <TEST_004+0x112>

case 10:
		info.r.PRG_bank_bits_SRAM = 10;
 80095f4:	4b3e      	ldr	r3, [pc, #248]	; (80096f0 <TEST_004+0x1dc>)
 80095f6:	220a      	movs	r2, #10
 80095f8:	769a      	strb	r2, [r3, #26]
		map.init = 0xF0;
 80095fa:	4b3c      	ldr	r3, [pc, #240]	; (80096ec <TEST_004+0x1d8>)
 80095fc:	22f0      	movs	r2, #240	; 0xf0
 80095fe:	705a      	strb	r2, [r3, #1]
		CPU_W (0xA001, map.init);
 8009600:	4b3a      	ldr	r3, [pc, #232]	; (80096ec <TEST_004+0x1d8>)
 8009602:	785b      	ldrb	r3, [r3, #1]
 8009604:	4619      	mov	r1, r3
 8009606:	f24a 0001 	movw	r0, #40961	; 0xa001
 800960a:	f7fe ffe1 	bl	80085d0 <CPU_W>
		map.text [12] = '6';
 800960e:	4b37      	ldr	r3, [pc, #220]	; (80096ec <TEST_004+0x1d8>)
 8009610:	2236      	movs	r2, #54	; 0x36
 8009612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		info.b [8] = 0x10;			//	.NES 2.0 submapper number for MMC6
 8009616:	4b36      	ldr	r3, [pc, #216]	; (80096f0 <TEST_004+0x1dc>)
 8009618:	2210      	movs	r2, #16
 800961a:	721a      	strb	r2, [r3, #8]
		v.SAV_ofs = 0x0C00;			//	fix for handling 8KB file writes to MMC6
 800961c:	4b38      	ldr	r3, [pc, #224]	; (8009700 <TEST_004+0x1ec>)
 800961e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8009622:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8009624:	e05e      	b.n	80096e4 <TEST_004+0x1d0>
	}
	// test for "NES 240" (aka MOTHER 25th anniversary)
	register int i;

	// test for TQROM
	CPU_W (0x8000, 0x22);
 8009626:	2122      	movs	r1, #34	; 0x22
 8009628:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800962c:	f7fe ffd0 	bl	80085d0 <CPU_W>
	CPU_W (0x8001, 0x00); i =  PPU_R (0x1000);		 PPU_W (0x1000, ~i); if (PPU_R (0x1000) != i)	return;	//	test the ROM bank
 8009630:	2100      	movs	r1, #0
 8009632:	f248 0001 	movw	r0, #32769	; 0x8001
 8009636:	f7fe ffcb 	bl	80085d0 <CPU_W>
 800963a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800963e:	f7ff f811 	bl	8008664 <PPU_R>
 8009642:	4603      	mov	r3, r0
 8009644:	461c      	mov	r4, r3
 8009646:	43e3      	mvns	r3, r4
 8009648:	4619      	mov	r1, r3
 800964a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800964e:	f7ff f839 	bl	80086c4 <PPU_W>
 8009652:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009656:	f7ff f805 	bl	8008664 <PPU_R>
 800965a:	4602      	mov	r2, r0
 800965c:	4623      	mov	r3, r4
 800965e:	429a      	cmp	r2, r3
 8009660:	d13d      	bne.n	80096de <TEST_004+0x1ca>
	CPU_W (0x8001, 0x40); i = ~PPU_R (0x1000) & 255; PPU_W (0x1000,  i); if (PPU_R (0x1000) != i)	return;	//	test the RAM bank
 8009662:	2140      	movs	r1, #64	; 0x40
 8009664:	f248 0001 	movw	r0, #32769	; 0x8001
 8009668:	f7fe ffb2 	bl	80085d0 <CPU_W>
 800966c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009670:	f7fe fff8 	bl	8008664 <PPU_R>
 8009674:	4603      	mov	r3, r0
 8009676:	43db      	mvns	r3, r3
 8009678:	b2dc      	uxtb	r4, r3
 800967a:	4623      	mov	r3, r4
 800967c:	4619      	mov	r1, r3
 800967e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009682:	f7ff f81f 	bl	80086c4 <PPU_W>
 8009686:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800968a:	f7fe ffeb 	bl	8008664 <PPU_R>
 800968e:	4602      	mov	r2, r0
 8009690:	4623      	mov	r3, r4
 8009692:	429a      	cmp	r2, r3
 8009694:	d125      	bne.n	80096e2 <TEST_004+0x1ce>

	// setup header for TQROM
	memcpy (& map.text [9], "TQROM", 5);
 8009696:	2205      	movs	r2, #5
 8009698:	491a      	ldr	r1, [pc, #104]	; (8009704 <TEST_004+0x1f0>)
 800969a:	481b      	ldr	r0, [pc, #108]	; (8009708 <TEST_004+0x1f4>)
 800969c:	f003 fde6 	bl	800d26c <memcpy>
	info.b [5] >>= 1;
 80096a0:	4b13      	ldr	r3, [pc, #76]	; (80096f0 <TEST_004+0x1dc>)
 80096a2:	795b      	ldrb	r3, [r3, #5]
 80096a4:	085b      	lsrs	r3, r3, #1
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	4b11      	ldr	r3, [pc, #68]	; (80096f0 <TEST_004+0x1dc>)
 80096aa:	715a      	strb	r2, [r3, #5]
	info.b [6] = (info.b [6] & 0x0F) | 0x70;	//	set low nibble of alt. mapper number
 80096ac:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <TEST_004+0x1dc>)
 80096ae:	799b      	ldrb	r3, [r3, #6]
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	f003 030f 	and.w	r3, r3, #15
 80096b6:	b25b      	sxtb	r3, r3
 80096b8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80096bc:	b25b      	sxtb	r3, r3
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <TEST_004+0x1dc>)
 80096c2:	719a      	strb	r2, [r3, #6]
	info.b [7] = (info.b [7] & 0x0F) | 0x70; 	//	set high nibble of alt. mapper number
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <TEST_004+0x1dc>)
 80096c6:	79db      	ldrb	r3, [r3, #7]
 80096c8:	b25b      	sxtb	r3, r3
 80096ca:	f003 030f 	and.w	r3, r3, #15
 80096ce:	b25b      	sxtb	r3, r3
 80096d0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80096d4:	b25b      	sxtb	r3, r3
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <TEST_004+0x1dc>)
 80096da:	71da      	strb	r2, [r3, #7]
 80096dc:	e002      	b.n	80096e4 <TEST_004+0x1d0>
	CPU_W (0x8001, 0x00); i =  PPU_R (0x1000);		 PPU_W (0x1000, ~i); if (PPU_R (0x1000) != i)	return;	//	test the ROM bank
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <TEST_004+0x1d0>
	CPU_W (0x8001, 0x40); i = ~PPU_R (0x1000) & 255; PPU_W (0x1000,  i); if (PPU_R (0x1000) != i)	return;	//	test the RAM bank
 80096e2:	bf00      	nop

}
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd90      	pop	{r4, r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20002aac 	.word	0x20002aac
 80096f0:	2000288c 	.word	0x2000288c
 80096f4:	40010800 	.word	0x40010800
 80096f8:	0800dcfc 	.word	0x0800dcfc
 80096fc:	200034c8 	.word	0x200034c8
 8009700:	200034cc 	.word	0x200034cc
 8009704:	0800dd10 	.word	0x0800dd10
 8009708:	20002ae5 	.word	0x20002ae5

0800970c <MIR_118>:

static void MIR_118   (register uint32_t d) {
 800970c:	b598      	push	{r3, r4, r7, lr}
 800970e:	af00      	add	r7, sp, #0
 8009710:	4604      	mov	r4, r0

	 CPU_W (0x8000, 0x82); CPU_W (0x8001, 0);
 8009712:	2182      	movs	r1, #130	; 0x82
 8009714:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009718:	f7fe ff5a 	bl	80085d0 <CPU_W>
 800971c:	2100      	movs	r1, #0
 800971e:	f248 0001 	movw	r0, #32769	; 0x8001
 8009722:	f7fe ff55 	bl	80085d0 <CPU_W>
	 CPU_W (0x8000, 0x83); CPU_W (0x8001, d << 7 ^ 0x80);
 8009726:	2183      	movs	r1, #131	; 0x83
 8009728:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800972c:	f7fe ff50 	bl	80085d0 <CPU_W>
 8009730:	01e3      	lsls	r3, r4, #7
 8009732:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8009736:	4619      	mov	r1, r3
 8009738:	f248 0001 	movw	r0, #32769	; 0x8001
 800973c:	f7fe ff48 	bl	80085d0 <CPU_W>
	 CPU_W (0x8000, 0x84); CPU_W (0x8001, d << 7);
 8009740:	2184      	movs	r1, #132	; 0x84
 8009742:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009746:	f7fe ff43 	bl	80085d0 <CPU_W>
 800974a:	01e3      	lsls	r3, r4, #7
 800974c:	4619      	mov	r1, r3
 800974e:	f248 0001 	movw	r0, #32769	; 0x8001
 8009752:	f7fe ff3d 	bl	80085d0 <CPU_W>
	 CPU_W (0x8000, 0x85); CPU_W (0x8001, 1);
 8009756:	2185      	movs	r1, #133	; 0x85
 8009758:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800975c:	f7fe ff38 	bl	80085d0 <CPU_W>
 8009760:	2101      	movs	r1, #1
 8009762:	f248 0001 	movw	r0, #32769	; 0x8001
 8009766:	f7fe ff33 	bl	80085d0 <CPU_W>

}
 800976a:	bf00      	nop
 800976c:	bd98      	pop	{r3, r4, r7, pc}

0800976e <INIT_005>:

//---------------------------------------------------------------------------------------
// MMC5

static void INIT_005 (void) {
 800976e:	b580      	push	{r7, lr}
 8009770:	af00      	add	r7, sp, #0

	CPU_W (0x2000, 0);		//	set MMC5's sprite size bit to 0
 8009772:	2100      	movs	r1, #0
 8009774:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009778:	f7fe ff2a 	bl	80085d0 <CPU_W>
	CPU_W (0x2001, 0);		//	clear MMC5's rendering bits
 800977c:	2100      	movs	r1, #0
 800977e:	f242 0001 	movw	r0, #8193	; 0x2001
 8009782:	f7fe ff25 	bl	80085d0 <CPU_W>
	CPU_W (0x5100, 3);		//	PRG bank mode = 8K
 8009786:	2103      	movs	r1, #3
 8009788:	f44f 40a2 	mov.w	r0, #20736	; 0x5100
 800978c:	f7fe ff20 	bl	80085d0 <CPU_W>
	CPU_W (0x5101, 0);		//	CHR bank mode = 8K
 8009790:	2100      	movs	r1, #0
 8009792:	f245 1001 	movw	r0, #20737	; 0x5101
 8009796:	f7fe ff1b 	bl	80085d0 <CPU_W>
	CPU_W (0x5104, 2);		//	ExRAM mode = ordinary RAM
 800979a:	2102      	movs	r1, #2
 800979c:	f245 1004 	movw	r0, #20740	; 0x5104
 80097a0:	f7fe ff16 	bl	80085d0 <CPU_W>
	CPU_W (0x5105, 0x44);	//	mirroring mode = vertical
 80097a4:	2144      	movs	r1, #68	; 0x44
 80097a6:	f245 1005 	movw	r0, #20741	; 0x5105
 80097aa:	f7fe ff11 	bl	80085d0 <CPU_W>
	CPU_W (0x5113, 0);		//	SRAM bank setup
 80097ae:	2100      	movs	r1, #0
 80097b0:	f245 1013 	movw	r0, #20755	; 0x5113
 80097b4:	f7fe ff0c 	bl	80085d0 <CPU_W>
	CPU_W (0x5102, 2);		//	SRAM lock 1
 80097b8:	2102      	movs	r1, #2
 80097ba:	f245 1002 	movw	r0, #20738	; 0x5102
 80097be:	f7fe ff07 	bl	80085d0 <CPU_W>
	CPU_W (0x5103, 1);		//	SRAM lock 2
 80097c2:	2101      	movs	r1, #1
 80097c4:	f245 1003 	movw	r0, #20739	; 0x5103
 80097c8:	f7fe ff02 	bl	80085d0 <CPU_W>

}
 80097cc:	bf00      	nop
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <DOWN_005>:

static void DOWN_005  (void						 ) { CPU_W (0x5102, 0); CPU_W (0x5103, 0);	}	//	SRAM lock 2
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	2100      	movs	r1, #0
 80097d6:	f245 1002 	movw	r0, #20738	; 0x5102
 80097da:	f7fe fef9 	bl	80085d0 <CPU_W>
 80097de:	2100      	movs	r1, #0
 80097e0:	f245 1003 	movw	r0, #20739	; 0x5103
 80097e4:	f7fe fef4 	bl	80085d0 <CPU_W>
 80097e8:	bf00      	nop
 80097ea:	bd80      	pop	{r7, pc}

080097ec <MIR_005>:
static void MIR_005   (register uint32_t d		 ) { CPU_W (0x5105, (d & 1) * 12 + 0x44 ); PPU_R (0x2000); }
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	4603      	mov	r3, r0
 80097f2:	f003 0201 	and.w	r2, r3, #1
 80097f6:	4613      	mov	r3, r2
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	3344      	adds	r3, #68	; 0x44
 8009800:	4619      	mov	r1, r3
 8009802:	f245 1005 	movw	r0, #20741	; 0x5105
 8009806:	f7fe fee3 	bl	80085d0 <CPU_W>
 800980a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800980e:	f7fe ff29 	bl	8008664 <PPU_R>
 8009812:	bf00      	nop
 8009814:	bd80      	pop	{r7, pc}

08009816 <SAV_005>:
static void SAV_005   (register uint32_t ROM_addr) { CPU_W (0x5113, ROM_addr >> 13);		}	// map.init); }
 8009816:	b580      	push	{r7, lr}
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	0b5b      	lsrs	r3, r3, #13
 800981e:	4619      	mov	r1, r3
 8009820:	f245 1013 	movw	r0, #20755	; 0x5113
 8009824:	f7fe fed4 	bl	80085d0 <CPU_W>
 8009828:	bf00      	nop
 800982a:	bd80      	pop	{r7, pc}

0800982c <PRG_005>:
static void PRG_005   (register uint32_t ROM_addr) { CPU_W (0x5114, ROM_addr >> 13 | 128);	}
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
 8009830:	4603      	mov	r3, r0
 8009832:	0b5b      	lsrs	r3, r3, #13
 8009834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009838:	4619      	mov	r1, r3
 800983a:	f245 1014 	movw	r0, #20756	; 0x5114
 800983e:	f7fe fec7 	bl	80085d0 <CPU_W>
 8009842:	bf00      	nop
 8009844:	bd80      	pop	{r7, pc}

08009846 <CHR_005>:
static void CHR_005   (register uint32_t ROM_addr) { CPU_W (0x5127, ROM_addr >> 13		);	}	//	{ CPU_W (0x5130, ROM_addr >> 18	   ); CPU_W (0x5120, ROM_addr >> 10);}
 8009846:	b580      	push	{r7, lr}
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	0b5b      	lsrs	r3, r3, #13
 800984e:	4619      	mov	r1, r3
 8009850:	f245 1027 	movw	r0, #20775	; 0x5127
 8009854:	f7fe febc 	bl	80085d0 <CPU_W>
 8009858:	bf00      	nop
 800985a:	bd80      	pop	{r7, pc}

0800985c <MIR_007>:
//static void TEST_005  (void						 ) { if (SAV_size == 14) map.init = 11	; }

//---------------------------------------------------------------------------------------
// ANROM

static void MIR_007	  (register uint32_t d		 ) { CPU_W (0x8000, d << 4 & 16	  ); }
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0
 8009860:	4603      	mov	r3, r0
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	4619      	mov	r1, r3
 800986a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800986e:	f7fe feaf 	bl	80085d0 <CPU_W>
 8009872:	bf00      	nop
 8009874:	bd80      	pop	{r7, pc}

08009876 <PRG_007>:
static void PRG_007   (register uint32_t ROM_addr) { CPU_W (0x8000, ROM_addr >> 15); }
 8009876:	b580      	push	{r7, lr}
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	0bdb      	lsrs	r3, r3, #15
 800987e:	4619      	mov	r1, r3
 8009880:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009884:	f7fe fea4 	bl	80085d0 <CPU_W>
 8009888:	bf00      	nop
 800988a:	bd80      	pop	{r7, pc}

0800988c <INIT_018>:

//---------------------------------------------------------------------------------------
// JALECO SS88006

static void INIT_018  (void						 ) { CPU_W (0x9002, 3); }
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
 8009890:	2103      	movs	r1, #3
 8009892:	f249 0002 	movw	r0, #36866	; 0x9002
 8009896:	f7fe fe9b 	bl	80085d0 <CPU_W>
 800989a:	bf00      	nop
 800989c:	bd80      	pop	{r7, pc}

0800989e <DOWN_018>:
static void DOWN_018  (void						 ) { CPU_W (0x9002, 0); }
 800989e:	b580      	push	{r7, lr}
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	2100      	movs	r1, #0
 80098a4:	f249 0002 	movw	r0, #36866	; 0x9002
 80098a8:	f7fe fe92 	bl	80085d0 <CPU_W>
 80098ac:	bf00      	nop
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <MIR_018>:
static void MIR_018   (register uint32_t d		 ) { CPU_W (0xF002, (d & 1) ^ 1	 ); CPU_W (0x8000,				0); }
 80098b0:	b580      	push	{r7, lr}
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	4603      	mov	r3, r0
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	bf0c      	ite	eq
 80098be:	2301      	moveq	r3, #1
 80098c0:	2300      	movne	r3, #0
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	4619      	mov	r1, r3
 80098c6:	f24f 0002 	movw	r0, #61442	; 0xf002
 80098ca:	f7fe fe81 	bl	80085d0 <CPU_W>
 80098ce:	2100      	movs	r1, #0
 80098d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80098d4:	f7fe fe7c 	bl	80085d0 <CPU_W>
 80098d8:	bf00      	nop
 80098da:	bd80      	pop	{r7, pc}

080098dc <PRG_018>:
static void PRG_018   (register uint32_t ROM_addr) { CPU_W (0x8000, ROM_addr >> 13); CPU_W (0x8001, ROM_addr >> 17); }
 80098dc:	b598      	push	{r3, r4, r7, lr}
 80098de:	af00      	add	r7, sp, #0
 80098e0:	4604      	mov	r4, r0
 80098e2:	0b63      	lsrs	r3, r4, #13
 80098e4:	4619      	mov	r1, r3
 80098e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80098ea:	f7fe fe71 	bl	80085d0 <CPU_W>
 80098ee:	0c63      	lsrs	r3, r4, #17
 80098f0:	4619      	mov	r1, r3
 80098f2:	f248 0001 	movw	r0, #32769	; 0x8001
 80098f6:	f7fe fe6b 	bl	80085d0 <CPU_W>
 80098fa:	bf00      	nop
 80098fc:	bd98      	pop	{r3, r4, r7, pc}

080098fe <CHR_018>:
static void CHR_018   (register uint32_t ROM_addr) { CPU_W (0xA000, ROM_addr >> 10); CPU_W (0xA001, ROM_addr >> 14); }
 80098fe:	b598      	push	{r3, r4, r7, lr}
 8009900:	af00      	add	r7, sp, #0
 8009902:	4604      	mov	r4, r0
 8009904:	0aa3      	lsrs	r3, r4, #10
 8009906:	4619      	mov	r1, r3
 8009908:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 800990c:	f7fe fe60 	bl	80085d0 <CPU_W>
 8009910:	0ba3      	lsrs	r3, r4, #14
 8009912:	4619      	mov	r1, r3
 8009914:	f24a 0001 	movw	r0, #40961	; 0xa001
 8009918:	f7fe fe5a 	bl	80085d0 <CPU_W>
 800991c:	bf00      	nop
 800991e:	bd98      	pop	{r3, r4, r7, pc}

08009920 <INIT_019>:

//---------------------------------------------------------------------------------------
// NAMCO 163

static void INIT_019 (void						 ) { CPU_W (0xE800, 0xC0); CPU_W (0xF800, 0x40); }
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
 8009924:	21c0      	movs	r1, #192	; 0xc0
 8009926:	f44f 4068 	mov.w	r0, #59392	; 0xe800
 800992a:	f7fe fe51 	bl	80085d0 <CPU_W>
 800992e:	2140      	movs	r1, #64	; 0x40
 8009930:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8009934:	f7fe fe4c 	bl	80085d0 <CPU_W>
 8009938:	bf00      	nop
 800993a:	bd80      	pop	{r7, pc}

0800993c <DOWN_019>:
static void DOWN_019 (void						 ) { CPU_W (0xF800, 0x00); }
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
 8009940:	2100      	movs	r1, #0
 8009942:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8009946:	f7fe fe43 	bl	80085d0 <CPU_W>
 800994a:	bf00      	nop
 800994c:	bd80      	pop	{r7, pc}

0800994e <MIR_019>:
static void MIR_019  (register uint32_t d		 ) { CPU_W (0xC000, 0xFE); CPU_W (0xC800, (d ^ 1) | 0xFE); CPU_W (0xD000, d | 0xFE); CPU_W (0xD800, 0xFF); }
 800994e:	b598      	push	{r3, r4, r7, lr}
 8009950:	af00      	add	r7, sp, #0
 8009952:	4604      	mov	r4, r0
 8009954:	21fe      	movs	r1, #254	; 0xfe
 8009956:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800995a:	f7fe fe39 	bl	80085d0 <CPU_W>
 800995e:	f084 0301 	eor.w	r3, r4, #1
 8009962:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
 8009966:	4619      	mov	r1, r3
 8009968:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 800996c:	f7fe fe30 	bl	80085d0 <CPU_W>
 8009970:	f044 03fe 	orr.w	r3, r4, #254	; 0xfe
 8009974:	4619      	mov	r1, r3
 8009976:	f44f 4050 	mov.w	r0, #53248	; 0xd000
 800997a:	f7fe fe29 	bl	80085d0 <CPU_W>
 800997e:	21ff      	movs	r1, #255	; 0xff
 8009980:	f44f 4058 	mov.w	r0, #55296	; 0xd800
 8009984:	f7fe fe24 	bl	80085d0 <CPU_W>
 8009988:	bf00      	nop
 800998a:	bd98      	pop	{r3, r4, r7, pc}

0800998c <PRG_019>:
static void PRG_019  (register uint32_t ROM_addr ) { CPU_W (0xE800, ROM_addr >> 13 | 0xC0); }
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
 8009990:	4603      	mov	r3, r0
 8009992:	0b5b      	lsrs	r3, r3, #13
 8009994:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009998:	4619      	mov	r1, r3
 800999a:	f44f 4068 	mov.w	r0, #59392	; 0xe800
 800999e:	f7fe fe17 	bl	80085d0 <CPU_W>
 80099a2:	bf00      	nop
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <CHR_019>:
static void CHR_019  (register uint32_t ROM_addr ) { CPU_W (0x8000, ROM_addr >> 10		); }
 80099a6:	b580      	push	{r7, lr}
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	0a9b      	lsrs	r3, r3, #10
 80099ae:	4619      	mov	r1, r3
 80099b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80099b4:	f7fe fe0c 	bl	80085d0 <CPU_W>
 80099b8:	bf00      	nop
 80099ba:	bd80      	pop	{r7, pc}

080099bc <INIT_024>:

//---------------------------------------------------------------------------------------
// VRC6a

static void INIT_024  (void						 ) { CPU_W (0xB003, 0xA0); }
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
 80099c0:	21a0      	movs	r1, #160	; 0xa0
 80099c2:	f24b 0003 	movw	r0, #45059	; 0xb003
 80099c6:	f7fe fe03 	bl	80085d0 <CPU_W>
 80099ca:	bf00      	nop
 80099cc:	bd80      	pop	{r7, pc}

080099ce <DOWN_024>:
static void DOWN_024  (void						 ) { CPU_W (0xB003, 0x20); }
 80099ce:	b580      	push	{r7, lr}
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	2120      	movs	r1, #32
 80099d4:	f24b 0003 	movw	r0, #45059	; 0xb003
 80099d8:	f7fe fdfa 	bl	80085d0 <CPU_W>
 80099dc:	bf00      	nop
 80099de:	bd80      	pop	{r7, pc}

080099e0 <MIR_024>:
static void MIR_024   (register uint32_t d		 ) { CPU_W (0xB003, ((d << 2) & 4) | 0xA0); CPU_W (0x8000, 0); }
 80099e0:	b580      	push	{r7, lr}
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	4603      	mov	r3, r0
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80099f0:	4619      	mov	r1, r3
 80099f2:	f24b 0003 	movw	r0, #45059	; 0xb003
 80099f6:	f7fe fdeb 	bl	80085d0 <CPU_W>
 80099fa:	2100      	movs	r1, #0
 80099fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009a00:	f7fe fde6 	bl	80085d0 <CPU_W>
 8009a04:	bf00      	nop
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <PRG_024>:
static void PRG_024   (register uint32_t ROM_addr) { CPU_W (0xC000, ROM_addr >> 13); }
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	0b5b      	lsrs	r3, r3, #13
 8009a10:	4619      	mov	r1, r3
 8009a12:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8009a16:	f7fe fddb 	bl	80085d0 <CPU_W>
 8009a1a:	bf00      	nop
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <CHR_024>:
static void CHR_024   (register uint32_t ROM_addr) { CPU_W (0xD000, ROM_addr >> 10); }
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	0a9b      	lsrs	r3, r3, #10
 8009a26:	4619      	mov	r1, r3
 8009a28:	f44f 4050 	mov.w	r0, #53248	; 0xd000
 8009a2c:	f7fe fdd0 	bl	80085d0 <CPU_W>
 8009a30:	bf00      	nop
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <INIT_025>:

//---------------------------------------------------------------------------------------
// VRC4b

static void INIT_025  (void						 ) { CPU_W (0x9003, 0); }
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	2100      	movs	r1, #0
 8009a3a:	f249 0003 	movw	r0, #36867	; 0x9003
 8009a3e:	f7fe fdc7 	bl	80085d0 <CPU_W>
 8009a42:	bf00      	nop
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <MIR_025>:
static void MIR_025   (register uint32_t d		 ) { CPU_W (0x9000, d &  1		 ); CPU_W (0x9003, 0			 ); }
 8009a46:	b580      	push	{r7, lr}
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	4619      	mov	r1, r3
 8009a52:	f44f 4010 	mov.w	r0, #36864	; 0x9000
 8009a56:	f7fe fdbb 	bl	80085d0 <CPU_W>
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	f249 0003 	movw	r0, #36867	; 0x9003
 8009a60:	f7fe fdb6 	bl	80085d0 <CPU_W>
 8009a64:	bf00      	nop
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <PRG_025>:
static void PRG_025   (register uint32_t ROM_addr) { CPU_W (0x8000, ROM_addr >> 13); }
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	0b5b      	lsrs	r3, r3, #13
 8009a70:	4619      	mov	r1, r3
 8009a72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009a76:	f7fe fdab 	bl	80085d0 <CPU_W>
 8009a7a:	bf00      	nop
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <CHR_025>:
static void CHR_025   (register uint32_t ROM_addr) { CPU_W (0xB000, ROM_addr >> 10); CPU_W (0xB002, ROM_addr >> 14); }
 8009a7e:	b598      	push	{r3, r4, r7, lr}
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	0aa3      	lsrs	r3, r4, #10
 8009a86:	4619      	mov	r1, r3
 8009a88:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8009a8c:	f7fe fda0 	bl	80085d0 <CPU_W>
 8009a90:	0ba3      	lsrs	r3, r4, #14
 8009a92:	4619      	mov	r1, r3
 8009a94:	f24b 0002 	movw	r0, #45058	; 0xb002
 8009a98:	f7fe fd9a 	bl	80085d0 <CPU_W>
 8009a9c:	bf00      	nop
 8009a9e:	bd98      	pop	{r3, r4, r7, pc}

08009aa0 <MIR_033>:

//---------------------------------------------------------------------------------------
// TAITO TC0190

static void MIR_033   (register uint32_t d		 ) { CPU_W (0x8000, d << 6 & 0x40); CPU_W (0x8001, 0); }
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	019b      	lsls	r3, r3, #6
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	4619      	mov	r1, r3
 8009aae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009ab2:	f7fe fd8d 	bl	80085d0 <CPU_W>
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	f248 0001 	movw	r0, #32769	; 0x8001
 8009abc:	f7fe fd88 	bl	80085d0 <CPU_W>
 8009ac0:	bf00      	nop
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <CHR_033>:
static void CHR_033   (register uint32_t ROM_addr) { CPU_W (0x8002, ROM_addr >> 11); }
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	4603      	mov	r3, r0
 8009aca:	0adb      	lsrs	r3, r3, #11
 8009acc:	4619      	mov	r1, r3
 8009ace:	f248 0002 	movw	r0, #32770	; 0x8002
 8009ad2:	f7fe fd7d 	bl	80085d0 <CPU_W>
 8009ad6:	bf00      	nop
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <INIT_069>:
//static void PRG_033   (register uint32_t ROM_addr) { CPU_W (0x8000, ROM_addr >> 13); }

//---------------------------------------------------------------------------------------
// FME-7

static void INIT_069  (void						 ) { CPU_W (0x8000,  8); CPU_W (0xA000, 0xC0); }
 8009ada:	b580      	push	{r7, lr}
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	2108      	movs	r1, #8
 8009ae0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009ae4:	f7fe fd74 	bl	80085d0 <CPU_W>
 8009ae8:	21c0      	movs	r1, #192	; 0xc0
 8009aea:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8009aee:	f7fe fd6f 	bl	80085d0 <CPU_W>
 8009af2:	bf00      	nop
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <DOWN_069>:
static void DOWN_069  (void						 ) { CPU_W (0x8000,  8); CPU_W (0xA000, 0x00); }
 8009af6:	b580      	push	{r7, lr}
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	2108      	movs	r1, #8
 8009afc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b00:	f7fe fd66 	bl	80085d0 <CPU_W>
 8009b04:	2100      	movs	r1, #0
 8009b06:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8009b0a:	f7fe fd61 	bl	80085d0 <CPU_W>
 8009b0e:	bf00      	nop
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <MIR_069>:
static void MIR_069   (register uint32_t d		 ) { CPU_W (0x8000, 12); CPU_W (0xA000, d &  1); CPU_W (0x8000, 12); }
 8009b12:	b598      	push	{r3, r4, r7, lr}
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4604      	mov	r4, r0
 8009b18:	210c      	movs	r1, #12
 8009b1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b1e:	f7fe fd57 	bl	80085d0 <CPU_W>
 8009b22:	f004 0301 	and.w	r3, r4, #1
 8009b26:	4619      	mov	r1, r3
 8009b28:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8009b2c:	f7fe fd50 	bl	80085d0 <CPU_W>
 8009b30:	210c      	movs	r1, #12
 8009b32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b36:	f7fe fd4b 	bl	80085d0 <CPU_W>
 8009b3a:	bf00      	nop
 8009b3c:	bd98      	pop	{r3, r4, r7, pc}

08009b3e <SAV_069>:
static void SAV_069   (register uint32_t ROM_addr) { CPU_W (0x8000,  8); CPU_W (0xA000, ROM_addr >> 13 | 0xC0); }
 8009b3e:	b598      	push	{r3, r4, r7, lr}
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4604      	mov	r4, r0
 8009b44:	2108      	movs	r1, #8
 8009b46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b4a:	f7fe fd41 	bl	80085d0 <CPU_W>
 8009b4e:	0b63      	lsrs	r3, r4, #13
 8009b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b54:	4619      	mov	r1, r3
 8009b56:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8009b5a:	f7fe fd39 	bl	80085d0 <CPU_W>
 8009b5e:	bf00      	nop
 8009b60:	bd98      	pop	{r3, r4, r7, pc}

08009b62 <PRG_069>:
static void PRG_069   (register uint32_t ROM_addr) { CPU_W (0x8000,  9); CPU_W (0xA000, ROM_addr >> 13); }
 8009b62:	b598      	push	{r3, r4, r7, lr}
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	2109      	movs	r1, #9
 8009b6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b6e:	f7fe fd2f 	bl	80085d0 <CPU_W>
 8009b72:	0b63      	lsrs	r3, r4, #13
 8009b74:	4619      	mov	r1, r3
 8009b76:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8009b7a:	f7fe fd29 	bl	80085d0 <CPU_W>
 8009b7e:	bf00      	nop
 8009b80:	bd98      	pop	{r3, r4, r7, pc}

08009b82 <CHR_069>:
static void CHR_069   (register uint32_t ROM_addr) { CPU_W (0x8000,  0); CPU_W (0xA000, ROM_addr >> 10); }
 8009b82:	b598      	push	{r3, r4, r7, lr}
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4604      	mov	r4, r0
 8009b88:	2100      	movs	r1, #0
 8009b8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b8e:	f7fe fd1f 	bl	80085d0 <CPU_W>
 8009b92:	0aa3      	lsrs	r3, r4, #10
 8009b94:	4619      	mov	r1, r3
 8009b96:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8009b9a:	f7fe fd19 	bl	80085d0 <CPU_W>
 8009b9e:	bf00      	nop
 8009ba0:	bd98      	pop	{r3, r4, r7, pc}

08009ba2 <INIT_085>:

//---------------------------------------------------------------------------------------
// VRC7a

//static void TEST_085  (void				) { if (info [5] < 2) info [5] = 0; }
static void INIT_085  (void						 ) { CPU_W (0xE000, 0x80		   ); }
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	2180      	movs	r1, #128	; 0x80
 8009ba8:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8009bac:	f7fe fd10 	bl	80085d0 <CPU_W>
 8009bb0:	bf00      	nop
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <DOWN_085>:
static void DOWN_085  (void						 ) { CPU_W (0xE000, 0x00		   ); }
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	2100      	movs	r1, #0
 8009bba:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8009bbe:	f7fe fd07 	bl	80085d0 <CPU_W>
 8009bc2:	bf00      	nop
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <MIR_085>:
static void MIR_085   (register uint32_t d		 ) { CPU_W (0xE000, d & 1	   ); CPU_W (0xE018, 0); }
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8009bd6:	f7fe fcfb 	bl	80085d0 <CPU_W>
 8009bda:	2100      	movs	r1, #0
 8009bdc:	f24e 0018 	movw	r0, #57368	; 0xe018
 8009be0:	f7fe fcf6 	bl	80085d0 <CPU_W>
 8009be4:	bf00      	nop
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <CHR_085>:
static void CHR_085   (register uint32_t ROM_addr) { CPU_W (0xA000, ROM_addr >> 10); }
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	4603      	mov	r3, r0
 8009bee:	0a9b      	lsrs	r3, r3, #10
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8009bf6:	f7fe fceb 	bl	80085d0 <CPU_W>
 8009bfa:	bf00      	nop
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <INIT_068>:
//static void PRG_085   (register uint32_t ROM_addr) { CPU_W (0x8000, ROM_addr >> 13); }

//---------------------------------------------------------------------------------------
// SUNSOFT-4

static void INIT_068  (void						 ) { CPU_W (0xF000, 0x10 ); }
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	2110      	movs	r1, #16
 8009c04:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8009c08:	f7fe fce2 	bl	80085d0 <CPU_W>
 8009c0c:	bf00      	nop
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <DOWN_068>:
static void DOWN_068  (void						 ) { CPU_W (0xF000, 0x00	); }
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	2100      	movs	r1, #0
 8009c16:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8009c1a:	f7fe fcd9 	bl	80085d0 <CPU_W>
 8009c1e:	bf00      	nop
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <MIR_068>:
static void MIR_068   (register uint32_t d		 ) { CPU_W (0xE000, d & 1); CPU_W (0xD000, 0); }
 8009c22:	b580      	push	{r7, lr}
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8009c32:	f7fe fccd 	bl	80085d0 <CPU_W>
 8009c36:	2100      	movs	r1, #0
 8009c38:	f44f 4050 	mov.w	r0, #53248	; 0xd000
 8009c3c:	f7fe fcc8 	bl	80085d0 <CPU_W>
 8009c40:	bf00      	nop
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <PRG_068>:
static void PRG_068   (register uint32_t ROM_addr) { CPU_W (0xF000, (ROM_addr >> 14 & 15) | 0x10); }
 8009c44:	b580      	push	{r7, lr}
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	4603      	mov	r3, r0
 8009c4a:	0b9b      	lsrs	r3, r3, #14
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	f043 0310 	orr.w	r3, r3, #16
 8009c54:	4619      	mov	r1, r3
 8009c56:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8009c5a:	f7fe fcb9 	bl	80085d0 <CPU_W>
 8009c5e:	bf00      	nop
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <MIR_225>:
//static void CHR_068   (register uint32_t ROM_addr) { CPU_W (0x8000,  ROM_addr >> 11); }

//---------------------------------------------------------------------------------------
// 115-in-1

static void MIR_225   (register uint32_t d		 ) { CPU_W (0x8000 | ((d << 13) & 0x2000), 0); }
 8009c62:	b580      	push	{r7, lr}
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	035b      	lsls	r3, r3, #13
 8009c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c72:	2100      	movs	r1, #0
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fcab 	bl	80085d0 <CPU_W>
 8009c7a:	bf00      	nop
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <PRG_225>:
static void PRG_225   (register uint32_t ROM_addr) { CPU_W (0x8000 | ((ROM_addr >>  8) & 0x0FC0) | ((ROM_addr >> 6) & 0x4000) | 0x1000, 0); }
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	0a1a      	lsrs	r2, r3, #8
 8009c86:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
 8009c8a:	099b      	lsrs	r3, r3, #6
 8009c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 8009c96:	2100      	movs	r1, #0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe fc99 	bl	80085d0 <CPU_W>
 8009c9e:	bf00      	nop
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <CHR_225>:
static void CHR_225   (register uint32_t ROM_addr) { CPU_W (0x8000 | ((ROM_addr >> 13) & 0x003F) | ((ROM_addr >> 5) & 0x4000)		  , 0); }
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	0b5a      	lsrs	r2, r3, #13
 8009caa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009cae:	095b      	lsrs	r3, r3, #5
 8009cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cba:	2100      	movs	r1, #0
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fe fc87 	bl	80085d0 <CPU_W>
 8009cc2:	bf00      	nop
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <PRG_079>:

//---------------------------------------------------------------------------------------
// AVE NINA-03/06

static void PRG_079   (register uint32_t ROM_addr) { CPU_W (0x5FFF, ROM_addr >> 12 & 8); }
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	0b1b      	lsrs	r3, r3, #12
 8009cce:	f003 0308 	and.w	r3, r3, #8
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	f645 70ff 	movw	r0, #24575	; 0x5fff
 8009cd8:	f7fe fc7a 	bl	80085d0 <CPU_W>
 8009cdc:	bf00      	nop
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <CHR_079>:
static void CHR_079   (register uint32_t ROM_addr) { CPU_W (0x5FFF, ROM_addr >> 13 & 7); }
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	0b5b      	lsrs	r3, r3, #13
 8009ce8:	f003 0307 	and.w	r3, r3, #7
 8009cec:	4619      	mov	r1, r3
 8009cee:	f645 70ff 	movw	r0, #24575	; 0x5fff
 8009cf2:	f7fe fc6d 	bl	80085d0 <CPU_W>
 8009cf6:	bf00      	nop
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <PRG_206>:

//---------------------------------------------------------------------------------------
// Tengen MIMIC-1

static void PRG_206   (register uint32_t ROM_addr) { CPU_W (0x8000,  0x06); CPU_W (0x8001, ROM_addr >> 13); }
 8009cfa:	b598      	push	{r3, r4, r7, lr}
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	2106      	movs	r1, #6
 8009d02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009d06:	f7fe fc63 	bl	80085d0 <CPU_W>
 8009d0a:	0b63      	lsrs	r3, r4, #13
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f248 0001 	movw	r0, #32769	; 0x8001
 8009d12:	f7fe fc5d 	bl	80085d0 <CPU_W>
 8009d16:	bf00      	nop
 8009d18:	bd98      	pop	{r3, r4, r7, pc}

08009d1a <PRG_111>:
#define CHR_206 CHR_004
//static void CHR_206   (register uint32_t ROM_addr) { CPU_W (0x8000,  0x02); CPU_W (0x8001, ROM_addr >> 10); }

//---------------------------------------------------------------------------------------
static void PRG_111   (register uint32_t ROM_addr) { CPU_W (0x5000, ROM_addr >> 15 & 15); }
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	0bdb      	lsrs	r3, r3, #15
 8009d22:	f003 030f 	and.w	r3, r3, #15
 8009d26:	4619      	mov	r1, r3
 8009d28:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8009d2c:	f7fe fc50 	bl	80085d0 <CPU_W>
 8009d30:	bf00      	nop
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <PRG_030>:

//---------------------------------------------------------------------------------------
static void PRG_030   (register uint32_t ROM_addr) { CPU_W (0xC000, ROM_addr >> 15 &   31); }
 8009d34:	b580      	push	{r7, lr}
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	4603      	mov	r3, r0
 8009d3a:	0bdb      	lsrs	r3, r3, #15
 8009d3c:	f003 031f 	and.w	r3, r3, #31
 8009d40:	4619      	mov	r1, r3
 8009d42:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8009d46:	f7fe fc43 	bl	80085d0 <CPU_W>
 8009d4a:	bf00      	nop
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <MIR_030>:
static void MIR_030	  (register uint32_t d		 ) { CPU_W (0xC000, d << 7 & 128); }
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	4603      	mov	r3, r0
 8009d54:	01db      	lsls	r3, r3, #7
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	4619      	mov	r1, r3
 8009d5a:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8009d5e:	f7fe fc37 	bl	80085d0 <CPU_W>
 8009d62:	bf00      	nop
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <MIR_210>:

//---------------------------------------------------------------------------------------
// NAMCOT-340

static void MIR_210   (register uint32_t d		 ) { CPU_W (0xE000, d << 7);		 }
 8009d66:	b580      	push	{r7, lr}
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	01db      	lsls	r3, r3, #7
 8009d6e:	4619      	mov	r1, r3
 8009d70:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8009d74:	f7fe fc2c 	bl	80085d0 <CPU_W>
 8009d78:	bf00      	nop
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <TEST_210>:
static void TEST_210  (void						 ) { info.b [8] = 0x20;				 }	// submapper 2
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <TEST_210+0x14>)
 8009d82:	2220      	movs	r2, #32
 8009d84:	721a      	strb	r2, [r3, #8]
 8009d86:	bf00      	nop
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	2000288c 	.word	0x2000288c

08009d94 <PRG_210>:
static void PRG_210   (register uint32_t ROM_addr) { CPU_W (0xE000, ROM_addr >> 13); }
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	4603      	mov	r3, r0
 8009d9a:	0b5b      	lsrs	r3, r3, #13
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8009da2:	f7fe fc15 	bl	80085d0 <CPU_W>
 8009da6:	bf00      	nop
 8009da8:	bd80      	pop	{r7, pc}

08009daa <CHR_210>:
static void CHR_210   (register uint32_t ROM_addr) { CPU_W (0x8000, ROM_addr >> 10); }
 8009daa:	b580      	push	{r7, lr}
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	0a9b      	lsrs	r3, r3, #10
 8009db2:	4619      	mov	r1, r3
 8009db4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009db8:	f7fe fc0a 	bl	80085d0 <CPU_W>
 8009dbc:	bf00      	nop
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <MIR_075>:
//#define CHR_210 CHR_019		// test this and save some memory

//---------------------------------------------------------------------------------------
// KONAMI VRC1
static void MIR_075   (register uint32_t d		 ) { CPU_W (0x9000, d & 1		  ); }
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	4619      	mov	r1, r3
 8009dcc:	f44f 4010 	mov.w	r0, #36864	; 0x9000
 8009dd0:	f7fe fbfe 	bl	80085d0 <CPU_W>
 8009dd4:	bf00      	nop
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <CHR_075>:
static void CHR_075   (register uint32_t ROM_addr) { CPU_W (0x9000, ROM_addr >> 15); CPU_W (0xE000, ROM_addr >> 12); }
 8009dd8:	b598      	push	{r3, r4, r7, lr}
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	4604      	mov	r4, r0
 8009dde:	0be3      	lsrs	r3, r4, #15
 8009de0:	4619      	mov	r1, r3
 8009de2:	f44f 4010 	mov.w	r0, #36864	; 0x9000
 8009de6:	f7fe fbf3 	bl	80085d0 <CPU_W>
 8009dea:	0b23      	lsrs	r3, r4, #12
 8009dec:	4619      	mov	r1, r3
 8009dee:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8009df2:	f7fe fbed 	bl	80085d0 <CPU_W>
 8009df6:	bf00      	nop
 8009df8:	bd98      	pop	{r3, r4, r7, pc}

08009dfa <INIT_RED>:
//static void PRG_075   (register uint32_t ROM_addr) { CPU_W (0x8000, ROM_addr >> 13); }

//---------------------------------------------------------------------------------------
// Big Time Technology Development Group RED-PILL

static void INIT_RED  (void) {
 8009dfa:	b598      	push	{r3, r4, r7, lr}
 8009dfc:	af00      	add	r7, sp, #0

	CPU_R (0x4800);						//	LO 1 screen mirroring mode
 8009dfe:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8009e02:	f7fe fbb1 	bl	8008568 <CPU_R>
	CPU_R (0x5088);						//	enable CHR-FLASH access mode, enable CHR-RAM, set RAM bank 0
 8009e06:	f245 0088 	movw	r0, #20616	; 0x5088
 8009e0a:	f7fe fbad 	bl	8008568 <CPU_R>
	for (register int i = 0; i < 128; i ++)
 8009e0e:	2400      	movs	r4, #0
 8009e10:	e007      	b.n	8009e22 <INIT_RED+0x28>
		PPU_W (i, i | 128);				//	write data to corresponding address in CHR-RAM
 8009e12:	4622      	mov	r2, r4
 8009e14:	f044 0380 	orr.w	r3, r4, #128	; 0x80
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	f7fe fc52 	bl	80086c4 <PPU_W>
	for (register int i = 0; i < 128; i ++)
 8009e20:	3401      	adds	r4, #1
 8009e22:	2c7f      	cmp	r4, #127	; 0x7f
 8009e24:	ddf5      	ble.n	8009e12 <INIT_RED+0x18>

}
 8009e26:	bf00      	nop
 8009e28:	bd98      	pop	{r3, r4, r7, pc}
	...

08009e2c <TEST_RED>:

static void TEST_RED (void) {
 8009e2c:	b5b0      	push	{r4, r5, r7, lr}
 8009e2e:	af00      	add	r7, sp, #0

	// read the PRG flash chip parameters
	CPU_W (0xD555, 0xAA);
 8009e30:	21aa      	movs	r1, #170	; 0xaa
 8009e32:	f24d 5055 	movw	r0, #54613	; 0xd555
 8009e36:	f7fe fbcb 	bl	80085d0 <CPU_W>
	CPU_W (0xAAAA, 0x55);
 8009e3a:	2155      	movs	r1, #85	; 0x55
 8009e3c:	f64a 20aa 	movw	r0, #43690	; 0xaaaa
 8009e40:	f7fe fbc6 	bl	80085d0 <CPU_W>
	CPU_W (0xD555, 0x90);	chill (40);						//	3 byte software ID entry sequence
 8009e44:	2190      	movs	r1, #144	; 0x90
 8009e46:	f24d 5055 	movw	r0, #54613	; 0xd555
 8009e4a:	f7fe fbc1 	bl	80085d0 <CPU_W>
 8009e4e:	2028      	movs	r0, #40	; 0x28
 8009e50:	f7fe fa8a 	bl	8008368 <chill>
	register int tmp0 = CPU_R (0x8000);						//	read software ID
 8009e54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009e58:	f7fe fb86 	bl	8008568 <CPU_R>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	461d      	mov	r5, r3
	register int tmp1 = CPU_R (0x8001);						//	get device ID
 8009e60:	f248 0001 	movw	r0, #32769	; 0x8001
 8009e64:	f7fe fb80 	bl	8008568 <CPU_R>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	461c      	mov	r4, r3
	CPU_W (0x8000, 0xF0);	chill (40);						//	exit the software ID mode
 8009e6c:	21f0      	movs	r1, #240	; 0xf0
 8009e6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009e72:	f7fe fbad 	bl	80085d0 <CPU_W>
 8009e76:	2028      	movs	r0, #40	; 0x28
 8009e78:	f7fe fa76 	bl	8008368 <chill>
	if (tmp0 == 0xBF && tmp1 >= 0xb5 && tmp1 <= 0xb7) {
 8009e7c:	2dbf      	cmp	r5, #191	; 0xbf
 8009e7e:	d124      	bne.n	8009eca <TEST_RED+0x9e>
 8009e80:	2cb4      	cmp	r4, #180	; 0xb4
 8009e82:	dd22      	ble.n	8009eca <TEST_RED+0x9e>
 8009e84:	2cb7      	cmp	r4, #183	; 0xb7
 8009e86:	dc20      	bgt.n	8009eca <TEST_RED+0x9e>

		v.PRG_ROM_size	=  1 << (tmp1 + 17 - 0xb5);
 8009e88:	f1a4 03a4 	sub.w	r3, r4, #164	; 0xa4
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	4b3a      	ldr	r3, [pc, #232]	; (8009f80 <TEST_RED+0x154>)
 8009e96:	601a      	str	r2, [r3, #0]
		info.b [4]		=  v.PRG_ROM_size >> 14;				//	16KB PRG units
 8009e98:	4b39      	ldr	r3, [pc, #228]	; (8009f80 <TEST_RED+0x154>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	0b9b      	lsrs	r3, r3, #14
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	4b38      	ldr	r3, [pc, #224]	; (8009f84 <TEST_RED+0x158>)
 8009ea2:	711a      	strb	r2, [r3, #4]
		v.PRG_bank_mask	= (v.PRG_ROM_size - v.PRG_mask - 1) | b31;
 8009ea4:	4b36      	ldr	r3, [pc, #216]	; (8009f80 <TEST_RED+0x154>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a35      	ldr	r2, [pc, #212]	; (8009f80 <TEST_RED+0x154>)
 8009eaa:	8912      	ldrh	r2, [r2, #8]
 8009eac:	1a9b      	subs	r3, r3, r2
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009eb4:	4a32      	ldr	r2, [pc, #200]	; (8009f80 <TEST_RED+0x154>)
 8009eb6:	6053      	str	r3, [r2, #4]
		v.mode |= 1;
 8009eb8:	4b31      	ldr	r3, [pc, #196]	; (8009f80 <TEST_RED+0x154>)
 8009eba:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009ebe:	f043 0301 	orr.w	r3, r3, #1
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	4b2e      	ldr	r3, [pc, #184]	; (8009f80 <TEST_RED+0x154>)
 8009ec6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	}
	// read the CHR flash chip parameters
	PPU_R (0x2005);	PPU_W (0x1555, 0xAA);
 8009eca:	f242 0005 	movw	r0, #8197	; 0x2005
 8009ece:	f7fe fbc9 	bl	8008664 <PPU_R>
 8009ed2:	21aa      	movs	r1, #170	; 0xaa
 8009ed4:	f241 5055 	movw	r0, #5461	; 0x1555
 8009ed8:	f7fe fbf4 	bl	80086c4 <PPU_W>
	PPU_R (0x2002);	PPU_W (0x1AAA, 0x55);
 8009edc:	f242 0002 	movw	r0, #8194	; 0x2002
 8009ee0:	f7fe fbc0 	bl	8008664 <PPU_R>
 8009ee4:	2155      	movs	r1, #85	; 0x55
 8009ee6:	f641 20aa 	movw	r0, #6826	; 0x1aaa
 8009eea:	f7fe fbeb 	bl	80086c4 <PPU_W>
	PPU_R (0x2005);	PPU_W (0x1555, 0x90);	chill (40);		//	3 byte software ID entry sequence
 8009eee:	f242 0005 	movw	r0, #8197	; 0x2005
 8009ef2:	f7fe fbb7 	bl	8008664 <PPU_R>
 8009ef6:	2190      	movs	r1, #144	; 0x90
 8009ef8:	f241 5055 	movw	r0, #5461	; 0x1555
 8009efc:	f7fe fbe2 	bl	80086c4 <PPU_W>
 8009f00:	2028      	movs	r0, #40	; 0x28
 8009f02:	f7fe fa31 	bl	8008368 <chill>
	tmp0 = PPU_R (0x1000);									//	read software ID
 8009f06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009f0a:	f7fe fbab 	bl	8008664 <PPU_R>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	461d      	mov	r5, r3
	tmp1 = PPU_R (0x1001);									//	get device ID
 8009f12:	f241 0001 	movw	r0, #4097	; 0x1001
 8009f16:	f7fe fba5 	bl	8008664 <PPU_R>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	461c      	mov	r4, r3
	PPU_W (0x1000, 0xF0);	chill (40);						//	exit the software ID mode
 8009f1e:	21f0      	movs	r1, #240	; 0xf0
 8009f20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009f24:	f7fe fbce 	bl	80086c4 <PPU_W>
 8009f28:	2028      	movs	r0, #40	; 0x28
 8009f2a:	f7fe fa1d 	bl	8008368 <chill>
	if (tmp0 == 0xBF && tmp1 >= 0xb5 && tmp1 <= 0xb7) {
 8009f2e:	2dbf      	cmp	r5, #191	; 0xbf
 8009f30:	d124      	bne.n	8009f7c <TEST_RED+0x150>
 8009f32:	2cb4      	cmp	r4, #180	; 0xb4
 8009f34:	dd22      	ble.n	8009f7c <TEST_RED+0x150>
 8009f36:	2cb7      	cmp	r4, #183	; 0xb7
 8009f38:	dc20      	bgt.n	8009f7c <TEST_RED+0x150>

		v.CHR_ROM_size	=  1 << (tmp1 + 17 - 0xb5);
 8009f3a:	f1a4 03a4 	sub.w	r3, r4, #164	; 0xa4
 8009f3e:	2201      	movs	r2, #1
 8009f40:	fa02 f303 	lsl.w	r3, r2, r3
 8009f44:	461a      	mov	r2, r3
 8009f46:	4b0e      	ldr	r3, [pc, #56]	; (8009f80 <TEST_RED+0x154>)
 8009f48:	60da      	str	r2, [r3, #12]
		info.b [5]		=  v.CHR_ROM_size >> 13;				//	8KB PRG units
 8009f4a:	4b0d      	ldr	r3, [pc, #52]	; (8009f80 <TEST_RED+0x154>)
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	0b5b      	lsrs	r3, r3, #13
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	4b0c      	ldr	r3, [pc, #48]	; (8009f84 <TEST_RED+0x158>)
 8009f54:	715a      	strb	r2, [r3, #5]
		v.CHR_bank_mask	= (v.CHR_ROM_size - v.CHR_mask - 1) | b31;
 8009f56:	4b0a      	ldr	r3, [pc, #40]	; (8009f80 <TEST_RED+0x154>)
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	4a09      	ldr	r2, [pc, #36]	; (8009f80 <TEST_RED+0x154>)
 8009f5c:	8a92      	ldrh	r2, [r2, #20]
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	3b01      	subs	r3, #1
 8009f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f66:	4a06      	ldr	r2, [pc, #24]	; (8009f80 <TEST_RED+0x154>)
 8009f68:	6113      	str	r3, [r2, #16]
		v.mode |= 2;
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <TEST_RED+0x154>)
 8009f6c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009f70:	f043 0302 	orr.w	r3, r3, #2
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	4b02      	ldr	r3, [pc, #8]	; (8009f80 <TEST_RED+0x154>)
 8009f78:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	}
}
 8009f7c:	bf00      	nop
 8009f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8009f80:	200034cc 	.word	0x200034cc
 8009f84:	2000288c 	.word	0x2000288c

08009f88 <MIR_RED>:

//	enable CHR-RAM, set NT-HI bank to 0
static void MIR_RED   (register uint32_t d		 ) {	CPU_R ((d		 <<  7 & 0x80) | 0x4800); }
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	01db      	lsls	r3, r3, #7
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe fae6 	bl	8008568 <CPU_R>
 8009f9c:	bf00      	nop
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <PRG_RED>:
static void PRG_RED   (register uint32_t ROM_addr) {	CPU_R ((ROM_addr >> 15 & 0x0F) | 0x4800); }
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	0bdb      	lsrs	r3, r3, #15
 8009fa8:	f003 030f 	and.w	r3, r3, #15
 8009fac:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fe fad9 	bl	8008568 <CPU_R>
 8009fb6:	bf00      	nop
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <CHR_RED>:
static void CHR_RED   (register uint32_t ROM_addr) {	PPU_R ((ROM_addr >> 12 & 0x7F) | 0x2000); }
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	0b1b      	lsrs	r3, r3, #12
 8009fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fb4a 	bl	8008664 <PPU_R>
 8009fd0:	bf00      	nop
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <INIT_268>:

//---------------------------------------------------------------------------------------
// mapper 268

static void INIT_268 (void) {
 8009fd4:	b598      	push	{r3, r4, r7, lr}
 8009fd6:	af00      	add	r7, sp, #0

	bs_helper = b31;
 8009fd8:	4b20      	ldr	r3, [pc, #128]	; (800a05c <INIT_268+0x88>)
 8009fda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fde:	601a      	str	r2, [r3, #0]
	for (register int i = 0; i < 65536; i ++)	CPU_W (0x5001, 0x80);	//	make the mapper wait to trick its copy protection
 8009fe0:	2400      	movs	r4, #0
 8009fe2:	e005      	b.n	8009ff0 <INIT_268+0x1c>
 8009fe4:	2180      	movs	r1, #128	; 0x80
 8009fe6:	f245 0001 	movw	r0, #20481	; 0x5001
 8009fea:	f7fe faf1 	bl	80085d0 <CPU_W>
 8009fee:	3401      	adds	r4, #1
 8009ff0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8009ff4:	dbf6      	blt.n	8009fe4 <INIT_268+0x10>
	if (v.base == 0x6004)						map.SAV_base = 0;		//	disable any SRAM tests
 8009ff6:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <INIT_268+0x8c>)
 8009ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ffa:	f246 0204 	movw	r2, #24580	; 0x6004
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d103      	bne.n	800a00a <INIT_268+0x36>
 800a002:	4b18      	ldr	r3, [pc, #96]	; (800a064 <INIT_268+0x90>)
 800a004:	2200      	movs	r2, #0
 800a006:	805a      	strh	r2, [r3, #2]
 800a008:	e004      	b.n	800a014 <INIT_268+0x40>
	else										CPU_W (0xA001, 0x80);	//	enable any SRAM on cart
 800a00a:	2180      	movs	r1, #128	; 0x80
 800a00c:	f24a 0001 	movw	r0, #40961	; 0xa001
 800a010:	f7fe fade 	bl	80085d0 <CPU_W>
	register int a = v.base;
 800a014:	4b12      	ldr	r3, [pc, #72]	; (800a060 <INIT_268+0x8c>)
 800a016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a018:	461c      	mov	r4, r3
	CPU_W (a	 , 0x40);
 800a01a:	4623      	mov	r3, r4
 800a01c:	2140      	movs	r1, #64	; 0x40
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe fad6 	bl	80085d0 <CPU_W>
	CPU_W (a + 1 , 0x80);
 800a024:	1c63      	adds	r3, r4, #1
 800a026:	2180      	movs	r1, #128	; 0x80
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe fad1 	bl	80085d0 <CPU_W>
	CPU_W (a + 2 , 0x70);
 800a02e:	1ca3      	adds	r3, r4, #2
 800a030:	2170      	movs	r1, #112	; 0x70
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe facc 	bl	80085d0 <CPU_W>
	CPU_W (a + 3 , 0x00);
 800a038:	1ce3      	adds	r3, r4, #3
 800a03a:	2100      	movs	r1, #0
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fe fac7 	bl	80085d0 <CPU_W>
	CPU_W (0x8000, 0x26);
 800a042:	2126      	movs	r1, #38	; 0x26
 800a044:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a048:	f7fe fac2 	bl	80085d0 <CPU_W>
	CPU_W (0x8001,  255);		//	set the last bank
 800a04c:	21ff      	movs	r1, #255	; 0xff
 800a04e:	f248 0001 	movw	r0, #32769	; 0x8001
 800a052:	f7fe fabd 	bl	80085d0 <CPU_W>

}
 800a056:	bf00      	nop
 800a058:	bd98      	pop	{r3, r4, r7, pc}
 800a05a:	bf00      	nop
 800a05c:	20002b74 	.word	0x20002b74
 800a060:	200034cc 	.word	0x200034cc
 800a064:	20002aac 	.word	0x20002aac

0800a068 <INIT_268a>:

static void INIT_268a (void) {
 800a068:	b598      	push	{r3, r4, r7, lr}
 800a06a:	af00      	add	r7, sp, #0

	for (register int i = 0; i < 65536; i ++)	CPU_W (0x5001, 0x80);
 800a06c:	2400      	movs	r4, #0
 800a06e:	e005      	b.n	800a07c <INIT_268a+0x14>
 800a070:	2180      	movs	r1, #128	; 0x80
 800a072:	f245 0001 	movw	r0, #20481	; 0x5001
 800a076:	f7fe faab 	bl	80085d0 <CPU_W>
 800a07a:	3401      	adds	r4, #1
 800a07c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800a080:	dbf6      	blt.n	800a070 <INIT_268a+0x8>
	register int a = v.base;
 800a082:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <INIT_268a+0x58>)
 800a084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a086:	461c      	mov	r4, r3
	CPU_W (a	 , 0x00);
 800a088:	4623      	mov	r3, r4
 800a08a:	2100      	movs	r1, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe fa9f 	bl	80085d0 <CPU_W>
	CPU_W (a + 1 , 0x60);
 800a092:	1c63      	adds	r3, r4, #1
 800a094:	2160      	movs	r1, #96	; 0x60
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fa9a 	bl	80085d0 <CPU_W>
	CPU_W (a + 2 , 0x70);
 800a09c:	1ca3      	adds	r3, r4, #2
 800a09e:	2170      	movs	r1, #112	; 0x70
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fe fa95 	bl	80085d0 <CPU_W>
	CPU_W (a + 3 , 0x00);
 800a0a6:	1ce3      	adds	r3, r4, #3
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fa90 	bl	80085d0 <CPU_W>
//	CPU_W (0x8000, 0x26);
//	CPU_W (0x8001,  255);
	CPU_W (0xA001, 0x80);
 800a0b0:	2180      	movs	r1, #128	; 0x80
 800a0b2:	f24a 0001 	movw	r0, #40961	; 0xa001
 800a0b6:	f7fe fa8b 	bl	80085d0 <CPU_W>

}
 800a0ba:	bf00      	nop
 800a0bc:	bd98      	pop	{r3, r4, r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	200034cc 	.word	0x200034cc

0800a0c4 <PRG_268>:

// in order to not falsely detect MMC3 carts as SMD133s
static void PRG_268 (register uint32_t b) {
 800a0c4:	b5b0      	push	{r4, r5, r7, lr}
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	4604      	mov	r4, r0

	// bankswitch A17 - A24 as if it were A13 - A20
	register uint32_t a = v.base;
 800a0ca:	4b0e      	ldr	r3, [pc, #56]	; (800a104 <PRG_268+0x40>)
 800a0cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0ce:	461d      	mov	r5, r3
	CPU_W (a	, 0x40 + (b >> 15 & 0x30) + (b >> 13 & 0x07));	// 01ji 0edc
 800a0d0:	0be3      	lsrs	r3, r4, #15
 800a0d2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800a0d6:	0b63      	lsrs	r3, r4, #13
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	3340      	adds	r3, #64	; 0x40
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7fe fa74 	bl	80085d0 <CPU_W>
	CPU_W (a + 1, 0x80 + (b >> 15 & 0x0C) + (b >> 12 & 0x10));	// 100f hg00
 800a0e8:	1c68      	adds	r0, r5, #1
 800a0ea:	0be3      	lsrs	r3, r4, #15
 800a0ec:	f003 020c 	and.w	r2, r3, #12
 800a0f0:	0b23      	lsrs	r3, r4, #12
 800a0f2:	f003 0310 	and.w	r3, r3, #16
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	3380      	adds	r3, #128	; 0x80
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	f7fe fa68 	bl	80085d0 <CPU_W>

}
 800a100:	bf00      	nop
 800a102:	bdb0      	pop	{r4, r5, r7, pc}
 800a104:	200034cc 	.word	0x200034cc

0800a108 <PRG_268a>:

// this abstract is needed because some games don't wana rip properly thru the SMD133 bs regs
static void PRG_268a (register uint32_t b) {
 800a108:	b5b0      	push	{r4, r5, r7, lr}
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	4604      	mov	r4, r0

	// bankswitch A13 - A20
	CPU_W (0x8000, 0x26);
 800a10e:	2126      	movs	r1, #38	; 0x26
 800a110:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a114:	f7fe fa5c 	bl	80085d0 <CPU_W>
	CPU_W (0x8001, b >> 13);	//	bankswitch A13 - A20
 800a118:	0b63      	lsrs	r3, r4, #13
 800a11a:	4619      	mov	r1, r3
 800a11c:	f248 0001 	movw	r0, #32769	; 0x8001
 800a120:	f7fe fa56 	bl	80085d0 <CPU_W>

	// bankswitch A21 - A24
	register uint32_t a = v.base;
 800a124:	4b0a      	ldr	r3, [pc, #40]	; (800a150 <PRG_268a+0x48>)
 800a126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a128:	461d      	mov	r5, r3
	CPU_W (a	, 0x00 + (b >> 19 & 0x30));	// 00ji 0000
 800a12a:	0ce3      	lsrs	r3, r4, #19
 800a12c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a130:	4619      	mov	r1, r3
 800a132:	4628      	mov	r0, r5
 800a134:	f7fe fa4c 	bl	80085d0 <CPU_W>
	CPU_W (a + 1, 0x60 + (b >> 19 & 0x0C));	// 0110 hg00
 800a138:	1c6a      	adds	r2, r5, #1
 800a13a:	0ce3      	lsrs	r3, r4, #19
 800a13c:	f003 030c 	and.w	r3, r3, #12
 800a140:	3360      	adds	r3, #96	; 0x60
 800a142:	4619      	mov	r1, r3
 800a144:	4610      	mov	r0, r2
 800a146:	f7fe fa43 	bl	80085d0 <CPU_W>

}
 800a14a:	bf00      	nop
 800a14c:	bdb0      	pop	{r4, r5, r7, pc}
 800a14e:	bf00      	nop
 800a150:	200034cc 	.word	0x200034cc

0800a154 <CHR_268>:

static void CHR_268 (register uint32_t b) {
 800a154:	b598      	push	{r3, r4, r7, lr}
 800a156:	af00      	add	r7, sp, #0
 800a158:	4604      	mov	r4, r0

	CPU_W (0x8000, 0x20);
 800a15a:	2120      	movs	r1, #32
 800a15c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a160:	f7fe fa36 	bl	80085d0 <CPU_W>
	CPU_W (0x8001, b >> 10);
 800a164:	0aa3      	lsrs	r3, r4, #10
 800a166:	4619      	mov	r1, r3
 800a168:	f248 0001 	movw	r0, #32769	; 0x8001
 800a16c:	f7fe fa30 	bl	80085d0 <CPU_W>

}
 800a170:	bf00      	nop
 800a172:	bd98      	pop	{r3, r4, r7, pc}

0800a174 <TEST_SMD133>:

// test for mapper 268
static int TEST_SMD133 (register int a) {
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	af00      	add	r7, sp, #0
 800a178:	4603      	mov	r3, r0

	v.base = a;
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	4b1a      	ldr	r3, [pc, #104]	; (800a1e8 <TEST_SMD133+0x74>)
 800a17e:	84da      	strh	r2, [r3, #38]	; 0x26
	INIT_268 ();
 800a180:	f7ff ff28 	bl	8009fd4 <INIT_268>
	for (register int i = 0; i < 0x200000; i += 0x2000) {
 800a184:	2500      	movs	r5, #0
 800a186:	e028      	b.n	800a1da <TEST_SMD133+0x66>

		PRG_268 (i);
 800a188:	462b      	mov	r3, r5
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff ff9a 	bl	800a0c4 <PRG_268>
		for (register int j = 0; j < PRG_KEYS; j ++)
 800a190:	2400      	movs	r4, #0
 800a192:	e01e      	b.n	800a1d2 <TEST_SMD133+0x5e>

			if (i) {
 800a194:	2d00      	cmp	r5, #0
 800a196:	d00f      	beq.n	800a1b8 <TEST_SMD133+0x44>

				if (report_txt [j] != CPU_R (0x8000 + PRG_keys [0][j]))		return 1;
 800a198:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <TEST_SMD133+0x78>)
 800a19a:	5d1b      	ldrb	r3, [r3, r4]
 800a19c:	461e      	mov	r6, r3
 800a19e:	4b14      	ldr	r3, [pc, #80]	; (800a1f0 <TEST_SMD133+0x7c>)
 800a1a0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800a1a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fe f9dd 	bl	8008568 <CPU_R>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	429e      	cmp	r6, r3
 800a1b2:	d00d      	beq.n	800a1d0 <TEST_SMD133+0x5c>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e014      	b.n	800a1e2 <TEST_SMD133+0x6e>

			} else	report_txt [j]  = CPU_R (0x8000 + PRG_keys [0][j]);
 800a1b8:	4b0d      	ldr	r3, [pc, #52]	; (800a1f0 <TEST_SMD133+0x7c>)
 800a1ba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800a1be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fe f9d0 	bl	8008568 <CPU_R>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <TEST_SMD133+0x78>)
 800a1ce:	551a      	strb	r2, [r3, r4]
		for (register int j = 0; j < PRG_KEYS; j ++)
 800a1d0:	3401      	adds	r4, #1
 800a1d2:	2c07      	cmp	r4, #7
 800a1d4:	ddde      	ble.n	800a194 <TEST_SMD133+0x20>
	for (register int i = 0; i < 0x200000; i += 0x2000) {
 800a1d6:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800a1da:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800a1de:	dbd3      	blt.n	800a188 <TEST_SMD133+0x14>

	}
	return 0;
 800a1e0:	2300      	movs	r3, #0

}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	200034cc 	.word	0x200034cc
 800a1ec:	200032c8 	.word	0x200032c8
 800a1f0:	0800dff8 	.word	0x0800dff8

0800a1f4 <MIR_268>:

static int MIR_268 (register uint32_t d) {
 800a1f4:	b5b0      	push	{r4, r5, r7, lr}
 800a1f6:	af00      	add	r7, sp, #0

	if (TEST_SMD133 (0x5004)) {
 800a1f8:	f245 0004 	movw	r0, #20484	; 0x5004
 800a1fc:	f7ff ffba 	bl	800a174 <TEST_SMD133>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d02f      	beq.n	800a266 <MIR_268+0x72>

		// these registers will swap out the CHR-RAM loader for the actual game
		for (register int i = 0; i < 16; i ++)		report_txt [i] =  CPU_R (0xfff0 + i);
 800a206:	2400      	movs	r4, #0
 800a208:	e00a      	b.n	800a220 <MIR_268+0x2c>
 800a20a:	f504 437f 	add.w	r3, r4, #65280	; 0xff00
 800a20e:	33f0      	adds	r3, #240	; 0xf0
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe f9a9 	bl	8008568 <CPU_R>
 800a216:	4603      	mov	r3, r0
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	4b19      	ldr	r3, [pc, #100]	; (800a280 <MIR_268+0x8c>)
 800a21c:	551a      	strb	r2, [r3, r4]
 800a21e:	3401      	adds	r4, #1
 800a220:	2c0f      	cmp	r4, #15
 800a222:	ddf2      	ble.n	800a20a <MIR_268+0x16>
		CPU_W (0x5000, 0);	CPU_W (0x5100, 0);
 800a224:	2100      	movs	r1, #0
 800a226:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800a22a:	f7fe f9d1 	bl	80085d0 <CPU_W>
 800a22e:	2100      	movs	r1, #0
 800a230:	f44f 40a2 	mov.w	r0, #20736	; 0x5100
 800a234:	f7fe f9cc 	bl	80085d0 <CPU_W>
		for (register int i = 0; i < 16; i ++)	if (report_txt [i] != CPU_R (0xfff0 + i)) {
 800a238:	2400      	movs	r4, #0
 800a23a:	e010      	b.n	800a25e <MIR_268+0x6a>
 800a23c:	4b10      	ldr	r3, [pc, #64]	; (800a280 <MIR_268+0x8c>)
 800a23e:	5d1b      	ldrb	r3, [r3, r4]
 800a240:	461d      	mov	r5, r3
 800a242:	f504 437f 	add.w	r3, r4, #65280	; 0xff00
 800a246:	33f0      	adds	r3, #240	; 0xf0
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe f98d 	bl	8008568 <CPU_R>
 800a24e:	4603      	mov	r3, r0
 800a250:	429d      	cmp	r5, r3
 800a252:	d003      	beq.n	800a25c <MIR_268+0x68>

			// a really big hack to advance q in main to next slot
			asm ("	ldr		r0, [r7, #20]	\n\t");
 800a254:	6978      	ldr	r0, [r7, #20]
			asm ("	adds	r0, #1			\n\t");
 800a256:	3001      	adds	r0, #1
			asm ("	str		r0, [r7, #20]	\n\t");
 800a258:	6178      	str	r0, [r7, #20]
			break;
 800a25a:	e002      	b.n	800a262 <MIR_268+0x6e>
		for (register int i = 0; i < 16; i ++)	if (report_txt [i] != CPU_R (0xfff0 + i)) {
 800a25c:	3401      	adds	r4, #1
 800a25e:	2c0f      	cmp	r4, #15
 800a260:	ddec      	ble.n	800a23c <MIR_268+0x48>

		}
		return 1;
 800a262:	2301      	movs	r3, #1
 800a264:	e009      	b.n	800a27a <MIR_268+0x86>

	}
	if (TEST_SMD133 (0x6004))	return 1;
 800a266:	f246 0004 	movw	r0, #24580	; 0x6004
 800a26a:	f7ff ff83 	bl	800a174 <TEST_SMD133>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <MIR_268+0x84>
 800a274:	2301      	movs	r3, #1
 800a276:	e000      	b.n	800a27a <MIR_268+0x86>
	return 0;
 800a278:	2300      	movs	r3, #0

}
 800a27a:	4618      	mov	r0, r3
 800a27c:	bdb0      	pop	{r4, r5, r7, pc}
 800a27e:	bf00      	nop
 800a280:	200032c8 	.word	0x200032c8

0800a284 <TEST_268>:

static void TEST_268 () {
 800a284:	b5b0      	push	{r4, r5, r7, lr}
 800a286:	af00      	add	r7, sp, #0

	register t_h_override * r	=	& info.r;
 800a288:	4c13      	ldr	r4, [pc, #76]	; (800a2d8 <TEST_268+0x54>)
	register MAPinfo *		m	=	& map;
 800a28a:	4d14      	ldr	r5, [pc, #80]	; (800a2dc <TEST_268+0x58>)

	// fix the PRG size
	r -> PRG_CHR_ROM_size_MSB	  = r -> PRG_ROM_size >> 4;
 800a28c:	7923      	ldrb	r3, [r4, #4]
 800a28e:	091b      	lsrs	r3, r3, #4
 800a290:	b2db      	uxtb	r3, r3
 800a292:	7263      	strb	r3, [r4, #9]
	r -> PRG_ROM_size			<<= 4;
 800a294:	7923      	ldrb	r3, [r4, #4]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	7123      	strb	r3, [r4, #4]

	// setup the new init and bs abstracts
	m -> INIT_ = INIT_268a;
 800a29c:	4b10      	ldr	r3, [pc, #64]	; (800a2e0 <TEST_268+0x5c>)
 800a29e:	616b      	str	r3, [r5, #20]
	m -> PRG_B = PRG_268a;
 800a2a0:	4b10      	ldr	r3, [pc, #64]	; (800a2e4 <TEST_268+0x60>)
 800a2a2:	626b      	str	r3, [r5, #36]	; 0x24

	// set the NES 2.0 flag
	r -> flags_7 |= 8;
 800a2a4:	79e3      	ldrb	r3, [r4, #7]
 800a2a6:	f043 0308 	orr.w	r3, r3, #8
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	71e3      	strb	r3, [r4, #7]
	if (v.base == 0x5004) {
 800a2ae:	4b0e      	ldr	r3, [pc, #56]	; (800a2e8 <TEST_268+0x64>)
 800a2b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2b2:	f245 0204 	movw	r2, #20484	; 0x5004
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d102      	bne.n	800a2c0 <TEST_268+0x3c>

		r -> submapper = 0x11;
 800a2ba:	2311      	movs	r3, #17
 800a2bc:	7223      	strb	r3, [r4, #8]

		memcpy (& m -> text [7], "COOLBOY ", 8);
		r -> submapper = 0x01;

	}
}
 800a2be:	e008      	b.n	800a2d2 <TEST_268+0x4e>
		memcpy (& m -> text [7], "COOLBOY ", 8);
 800a2c0:	f105 0337 	add.w	r3, r5, #55	; 0x37
 800a2c4:	2208      	movs	r2, #8
 800a2c6:	4909      	ldr	r1, [pc, #36]	; (800a2ec <TEST_268+0x68>)
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f002 ffcf 	bl	800d26c <memcpy>
		r -> submapper = 0x01;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	7223      	strb	r3, [r4, #8]
}
 800a2d2:	bf00      	nop
 800a2d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	2000288c 	.word	0x2000288c
 800a2dc:	20002aac 	.word	0x20002aac
 800a2e0:	0800a069 	.word	0x0800a069
 800a2e4:	0800a109 	.word	0x0800a109
 800a2e8:	200034cc 	.word	0x200034cc
 800a2ec:	0800dd18 	.word	0x0800dd18

0800a2f0 <INIT_M25>:

//---------------------------------------------------------------------------------------
// NES 240 (hybrid MMC3)

static void INIT_M25	() { chr_src = CPU_R; CPU_W (0x5000, 0); CPU_W (0x5100, 0); CPU_W (0xa001, 0xb0); }
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	4b09      	ldr	r3, [pc, #36]	; (800a31c <INIT_M25+0x2c>)
 800a2f6:	4a0a      	ldr	r2, [pc, #40]	; (800a320 <INIT_M25+0x30>)
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800a300:	f7fe f966 	bl	80085d0 <CPU_W>
 800a304:	2100      	movs	r1, #0
 800a306:	f44f 40a2 	mov.w	r0, #20736	; 0x5100
 800a30a:	f7fe f961 	bl	80085d0 <CPU_W>
 800a30e:	21b0      	movs	r1, #176	; 0xb0
 800a310:	f24a 0001 	movw	r0, #40961	; 0xa001
 800a314:	f7fe f95c 	bl	80085d0 <CPU_W>
 800a318:	bf00      	nop
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	2000352c 	.word	0x2000352c
 800a320:	08008569 	.word	0x08008569

0800a324 <PRG_M25>:
static void PRG_M25		(register uint32_t ROM_addr) { CPU_W (0x8000,	0x26); CPU_W (0x8001, ROM_addr >> 13 ^ 32); }
 800a324:	b598      	push	{r3, r4, r7, lr}
 800a326:	af00      	add	r7, sp, #0
 800a328:	4604      	mov	r4, r0
 800a32a:	2126      	movs	r1, #38	; 0x26
 800a32c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a330:	f7fe f94e 	bl	80085d0 <CPU_W>
 800a334:	0b63      	lsrs	r3, r4, #13
 800a336:	f083 0320 	eor.w	r3, r3, #32
 800a33a:	4619      	mov	r1, r3
 800a33c:	f248 0001 	movw	r0, #32769	; 0x8001
 800a340:	f7fe f946 	bl	80085d0 <CPU_W>
 800a344:	bf00      	nop
 800a346:	bd98      	pop	{r3, r4, r7, pc}

0800a348 <MIR_M25>:
static int MIR_M25		(register uint32_t d) { return 0; }
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	2300      	movs	r3, #0
 800a34e:	4618      	mov	r0, r3
 800a350:	46bd      	mov	sp, r7
 800a352:	bc80      	pop	{r7}
 800a354:	4770      	bx	lr
	...

0800a358 <CHR_234>:
//---------------------------------------------------------------------------------------
// mapper 234
const unsigned char maxi_bs_tbl [16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
										0x08, 0x0c, 0x0a, 0x0b, 0x09, 0x0e, 0x0d, 0x0d};

static void CHR_234 (register uint32_t r) {
 800a358:	b598      	push	{r3, r4, r7, lr}
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	4604      	mov	r4, r0

	// get to the root bank and pulse the reset line
	CPU_R (0x0000);		chill (1200000);	//	1/60th of a second to be sure A0 cap is drained
 800a35e:	2000      	movs	r0, #0
 800a360:	f7fe f902 	bl	8008568 <CPU_R>
 800a364:	4815      	ldr	r0, [pc, #84]	; (800a3bc <CHR_234+0x64>)
 800a366:	f7fd ffff 	bl	8008368 <chill>
	CPU_R (0xffff);		chill (	120000);	//	shorter values here may work
 800a36a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a36e:	f7fe f8fb 	bl	8008568 <CPU_R>
 800a372:	4813      	ldr	r0, [pc, #76]	; (800a3c0 <CHR_234+0x68>)
 800a374:	f7fd fff8 	bl	8008368 <chill>

	// calculate the inner bankswitch value
	register int b = (CPU_R (0xFF80 + maxi_bs_tbl [r >> 15]) & 0x40)? (r >> 12 & 14) + (r >> 15 & 1) : r >> 13 & 3;
 800a378:	0be3      	lsrs	r3, r4, #15
 800a37a:	4a12      	ldr	r2, [pc, #72]	; (800a3c4 <CHR_234+0x6c>)
 800a37c:	5cd3      	ldrb	r3, [r2, r3]
 800a37e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800a382:	3380      	adds	r3, #128	; 0x80
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe f8ef 	bl	8008568 <CPU_R>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a390:	2b00      	cmp	r3, #0
 800a392:	d007      	beq.n	800a3a4 <CHR_234+0x4c>
 800a394:	0b23      	lsrs	r3, r4, #12
 800a396:	f003 020e 	and.w	r2, r3, #14
 800a39a:	0be3      	lsrs	r3, r4, #15
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	e002      	b.n	800a3aa <CHR_234+0x52>
 800a3a4:	0b63      	lsrs	r3, r4, #13
 800a3a6:	f003 0303 	and.w	r3, r3, #3
 800a3aa:	461c      	mov	r4, r3

	// set the inner bankswitch register
	CPU_R (0xFFE8 + b);
 800a3ac:	f504 437f 	add.w	r3, r4, #65280	; 0xff00
 800a3b0:	33e8      	adds	r3, #232	; 0xe8
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe f8d8 	bl	8008568 <CPU_R>

}
 800a3b8:	bf00      	nop
 800a3ba:	bd98      	pop	{r3, r4, r7, pc}
 800a3bc:	00124f80 	.word	0x00124f80
 800a3c0:	0001d4c0 	.word	0x0001d4c0
 800a3c4:	0800e088 	.word	0x0800e088

0800a3c8 <PRG_234>:

static void PRG_234 (register uint32_t ROM_addr) {
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	4603      	mov	r3, r0

	// test for bankswitch address range
	if (ROM_addr == 0x7f80) {
 800a3ce:	f5b3 4fff 	cmp.w	r3, #32640	; 0x7f80
 800a3d2:	d106      	bne.n	800a3e2 <PRG_234+0x1a>

		// PRG bank 0 registers
		CPU_R (0x0000);
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	f7fe f8c7 	bl	8008568 <CPU_R>
		chill (1200000);	//	1/60th of a second to be sure A0 cap is drained
 800a3da:	4809      	ldr	r0, [pc, #36]	; (800a400 <PRG_234+0x38>)
 800a3dc:	f7fd ffc4 	bl	8008368 <chill>
		return;
 800a3e0:	e00c      	b.n	800a3fc <PRG_234+0x34>

	}
	if (ROM_addr < 0x08000) {
 800a3e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3e6:	d203      	bcs.n	800a3f0 <PRG_234+0x28>

		v.PRG_bank_mask	= 0x7ffff | b31;
 800a3e8:	4b06      	ldr	r3, [pc, #24]	; (800a404 <PRG_234+0x3c>)
 800a3ea:	4a07      	ldr	r2, [pc, #28]	; (800a408 <PRG_234+0x40>)
 800a3ec:	605a      	str	r2, [r3, #4]
		return;
 800a3ee:	e005      	b.n	800a3fc <PRG_234+0x34>

	}
	v.PRG_bank_mask		= 0x78000 | b31;
 800a3f0:	4a04      	ldr	r2, [pc, #16]	; (800a404 <PRG_234+0x3c>)
 800a3f2:	4906      	ldr	r1, [pc, #24]	; (800a40c <PRG_234+0x44>)
 800a3f4:	6051      	str	r1, [r2, #4]
	CHR_234 (ROM_addr);
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff ffae 	bl	800a358 <CHR_234>

}
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	00124f80 	.word	0x00124f80
 800a404:	200034cc 	.word	0x200034cc
 800a408:	8007ffff 	.word	0x8007ffff
 800a40c:	80078000 	.word	0x80078000

0800a410 <scoretbl_R>:
//---------------------------------------------------------------------------------------------------------
//***************************************************************************************
//*************** file io access methods ************************************************
//***************************************************************************************

void scoretbl_R (register ptr_all_types buf, register uint32_t file_ofs) { if (!file_ofs) memcpy (buf.byte		, &score		, sizeof (score			)); }
 800a410:	b490      	push	{r4, r7}
 800a412:	af00      	add	r7, sp, #0
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d109      	bne.n	800a430 <scoretbl_R+0x20>
 800a41c:	4613      	mov	r3, r2
 800a41e:	4a06      	ldr	r2, [pc, #24]	; (800a438 <scoretbl_R+0x28>)
 800a420:	6814      	ldr	r4, [r2, #0]
 800a422:	6850      	ldr	r0, [r2, #4]
 800a424:	6891      	ldr	r1, [r2, #8]
 800a426:	68d2      	ldr	r2, [r2, #12]
 800a428:	601c      	str	r4, [r3, #0]
 800a42a:	6058      	str	r0, [r3, #4]
 800a42c:	6099      	str	r1, [r3, #8]
 800a42e:	60da      	str	r2, [r3, #12]
 800a430:	bf00      	nop
 800a432:	46bd      	mov	sp, r7
 800a434:	bc90      	pop	{r4, r7}
 800a436:	4770      	bx	lr
 800a438:	200030b8 	.word	0x200030b8

0800a43c <root_tbl_R>:
void root_tbl_R (register ptr_all_types buf, register uint32_t file_ofs) { if (!file_ofs) memcpy (buf.byte		, &root_table	, sizeof (root_table	)); }
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	2b00      	cmp	r3, #0
 800a446:	d106      	bne.n	800a456 <root_tbl_R+0x1a>
 800a448:	4613      	mov	r3, r2
 800a44a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a44e:	4903      	ldr	r1, [pc, #12]	; (800a45c <root_tbl_R+0x20>)
 800a450:	4618      	mov	r0, r3
 800a452:	f002 ff0b 	bl	800d26c <memcpy>
 800a456:	bf00      	nop
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	200028ac 	.word	0x200028ac

0800a460 <data_tbl_R>:
void data_tbl_R (register ptr_all_types buf, register uint32_t file_ofs) { if (!file_ofs) memcpy (buf.byte		, &data_table	, sizeof (data_table	)); }
 800a460:	b580      	push	{r7, lr}
 800a462:	af00      	add	r7, sp, #0
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d106      	bne.n	800a47a <data_tbl_R+0x1a>
 800a46c:	4613      	mov	r3, r2
 800a46e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a472:	4903      	ldr	r1, [pc, #12]	; (800a480 <data_tbl_R+0x20>)
 800a474:	4618      	mov	r0, r3
 800a476:	f002 fef9 	bl	800d26c <memcpy>
 800a47a:	bf00      	nop
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	200030c8 	.word	0x200030c8

0800a484 <settings_R>:
void outparam_W (register ptr_all_types buf, register uint32_t file_ofs) { if (!file_ofs) memcpy (&v			, buf.byte		, sizeof (v				)); }

void mediaset_R (register ptr_all_types buf, register uint32_t file_ofs) { ptr_krnl -> media_change_handler (); if (! file_ofs)	memcpy (buf.byte, & mediaset_txt, sizeof (mediaset_txt)); }
void mediaset_W (register ptr_all_types buf, register uint32_t file_ofs) { ptr_krnl -> media_change_handler (); }
*/
void settings_R (register ptr_all_types buf, register uint32_t file_ofs) { if (file_ofs < 2) memcpy (buf.byte, & SETTINGS_BIN -> byte [file_ofs << 9], 512); }
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d80a      	bhi.n	800a4a6 <settings_R+0x22>
 800a490:	4610      	mov	r0, r2
 800a492:	025b      	lsls	r3, r3, #9
 800a494:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800a498:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 800a49c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	f002 fee3 	bl	800d26c <memcpy>
 800a4a6:	bf00      	nop
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <settings_W>:
void settings_W (register ptr_all_types buf, register uint32_t file_ofs) {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	460b      	mov	r3, r1

	if (file_ofs < 2)				memcpy (& debug.buf [file_ofs << 9], buf.byte, 512);
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d808      	bhi.n	800a4c8 <settings_W+0x1c>
 800a4b6:	025b      	lsls	r3, r3, #9
 800a4b8:	4a08      	ldr	r2, [pc, #32]	; (800a4dc <settings_W+0x30>)
 800a4ba:	4413      	add	r3, r2
 800a4bc:	4601      	mov	r1, r0
 800a4be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f002 fed2 	bl	800d26c <memcpy>
	files_dirty						= DIRTY_TIMEOUT;
 800a4c8:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <settings_W+0x34>)
 800a4ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4ce:	601a      	str	r2, [r3, #0]
	settings_dirty					= 1;
 800a4d0:	4b04      	ldr	r3, [pc, #16]	; (800a4e4 <settings_W+0x38>)
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	701a      	strb	r2, [r3, #0]

}
 800a4d6:	bf00      	nop
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20002ca8 	.word	0x20002ca8
 800a4e0:	20003504 	.word	0x20003504
 800a4e4:	20003509 	.word	0x20003509

0800a4e8 <OVERRIDE_erase>:

} t_wb;

t_wb			_wb;

void OVERRIDE_erase () {
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0

	// unlock FPEC
	BOOT_BLOCK -> unlock_fpec ();
 800a4ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4f0:	f8d3 39ac 	ldr.w	r3, [r3, #2476]	; 0x9ac
 800a4f4:	4798      	blx	r3

	// erase 4KB (8 sectors)
	BOOT_BLOCK -> page_erase_handler (0x40022000, (t_settings *) & OVERRIDE_BIN -> byte [0x0000]);
 800a4f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4fa:	f8d3 39b4 	ldr.w	r3, [r3, #2484]	; 0x9b4
 800a4fe:	490d      	ldr	r1, [pc, #52]	; (800a534 <OVERRIDE_erase+0x4c>)
 800a500:	480d      	ldr	r0, [pc, #52]	; (800a538 <OVERRIDE_erase+0x50>)
 800a502:	4798      	blx	r3
	BOOT_BLOCK -> page_erase_handler (0x40022000, (t_settings *) & OVERRIDE_BIN -> byte [0x0400]);
 800a504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a508:	f8d3 39b4 	ldr.w	r3, [r3, #2484]	; 0x9b4
 800a50c:	490b      	ldr	r1, [pc, #44]	; (800a53c <OVERRIDE_erase+0x54>)
 800a50e:	480a      	ldr	r0, [pc, #40]	; (800a538 <OVERRIDE_erase+0x50>)
 800a510:	4798      	blx	r3
	BOOT_BLOCK -> page_erase_handler (0x40022000, (t_settings *) & OVERRIDE_BIN -> byte [0x0800]);
 800a512:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a516:	f8d3 39b4 	ldr.w	r3, [r3, #2484]	; 0x9b4
 800a51a:	4909      	ldr	r1, [pc, #36]	; (800a540 <OVERRIDE_erase+0x58>)
 800a51c:	4806      	ldr	r0, [pc, #24]	; (800a538 <OVERRIDE_erase+0x50>)
 800a51e:	4798      	blx	r3
	BOOT_BLOCK -> page_erase_handler (0x40022000, (t_settings *) & OVERRIDE_BIN -> byte [0x0C00]);
 800a520:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a524:	f8d3 39b4 	ldr.w	r3, [r3, #2484]	; 0x9b4
 800a528:	4906      	ldr	r1, [pc, #24]	; (800a544 <OVERRIDE_erase+0x5c>)
 800a52a:	4803      	ldr	r0, [pc, #12]	; (800a538 <OVERRIDE_erase+0x50>)
 800a52c:	4798      	blx	r3

}
 800a52e:	bf00      	nop
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	0800f000 	.word	0x0800f000
 800a538:	40022000 	.word	0x40022000
 800a53c:	0800f400 	.word	0x0800f400
 800a540:	0800f800 	.word	0x0800f800
 800a544:	0800fc00 	.word	0x0800fc00

0800a548 <override_R>:

void override_R (register ptr_all_types buf, register uint32_t file_ofs) { if (file_ofs < 8) memcpy (buf.byte, & OVERRIDE_BIN -> half [file_ofs << 8], 512); }
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	2b07      	cmp	r3, #7
 800a552:	d80a      	bhi.n	800a56a <override_R+0x22>
 800a554:	4610      	mov	r0, r2
 800a556:	025b      	lsls	r3, r3, #9
 800a558:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800a55c:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 800a560:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a564:	4619      	mov	r1, r3
 800a566:	f002 fe81 	bl	800d26c <memcpy>
 800a56a:	bf00      	nop
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <override_W>:
void override_W (register ptr_all_types buf, register uint32_t file_ofs) {
 800a570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a574:	af00      	add	r7, sp, #0
 800a576:	4680      	mov	r8, r0
 800a578:	460c      	mov	r4, r1

	if (file_ofs < 8) {
 800a57a:	2c07      	cmp	r4, #7
 800a57c:	d833      	bhi.n	800a5e6 <override_W+0x76>

		// check if the sector has not been erased yet
		files_dirty = DIRTY_TIMEOUT;
 800a57e:	4b1b      	ldr	r3, [pc, #108]	; (800a5ec <override_W+0x7c>)
 800a580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a584:	601a      	str	r2, [r3, #0]
		if (! (override_erase >> file_ofs & 1)) {
 800a586:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <override_W+0x80>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	4123      	asrs	r3, r4
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d104      	bne.n	800a59e <override_W+0x2e>

			override_erase = 255;
 800a594:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <override_W+0x80>)
 800a596:	22ff      	movs	r2, #255	; 0xff
 800a598:	701a      	strb	r2, [r3, #0]
			OVERRIDE_erase ();
 800a59a:	f7ff ffa5 	bl	800a4e8 <OVERRIDE_erase>

		}
		// clear the erase flag
		override_erase &= ~ (1 << file_ofs);
 800a59e:	2301      	movs	r3, #1
 800a5a0:	40a3      	lsls	r3, r4
 800a5a2:	b25b      	sxtb	r3, r3
 800a5a4:	43db      	mvns	r3, r3
 800a5a6:	b25a      	sxtb	r2, r3
 800a5a8:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <override_W+0x80>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	b25b      	sxtb	r3, r3
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	b25b      	sxtb	r3, r3
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	4b0e      	ldr	r3, [pc, #56]	; (800a5f0 <override_W+0x80>)
 800a5b6:	701a      	strb	r2, [r3, #0]
		register uint32_t k = file_ofs << 8;
 800a5b8:	0225      	lsls	r5, r4, #8
		for (register uint32_t j = 0; j < 256; j ++, k ++)
 800a5ba:	2400      	movs	r4, #0
 800a5bc:	e011      	b.n	800a5e2 <override_W+0x72>

			// copy new data into flash
			BOOT_BLOCK -> flash_halfword_handler (0x40022000, (t_settings *) & OVERRIDE_BIN -> half [k], buf.half [j]);
 800a5be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5c2:	f8d3 69b8 	ldr.w	r6, [r3, #2488]	; 0x9b8
 800a5c6:	006b      	lsls	r3, r5, #1
 800a5c8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800a5cc:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 800a5d0:	4641      	mov	r1, r8
 800a5d2:	0062      	lsls	r2, r4, #1
 800a5d4:	440a      	add	r2, r1
 800a5d6:	8812      	ldrh	r2, [r2, #0]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4806      	ldr	r0, [pc, #24]	; (800a5f4 <override_W+0x84>)
 800a5dc:	47b0      	blx	r6
		for (register uint32_t j = 0; j < 256; j ++, k ++)
 800a5de:	3401      	adds	r4, #1
 800a5e0:	3501      	adds	r5, #1
 800a5e2:	2cff      	cmp	r4, #255	; 0xff
 800a5e4:	d9eb      	bls.n	800a5be <override_W+0x4e>

	}
}
 800a5e6:	bf00      	nop
 800a5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ec:	20003504 	.word	0x20003504
 800a5f0:	20002c94 	.word	0x20002c94
 800a5f4:	40022000 	.word	0x40022000

0800a5f8 <bcmtable_R>:

void bcmtable_R (register ptr_all_types buf, register uint32_t file_ofs) { if (file_ofs < 2) memcpy (buf.byte, & BCMTABLE_BIN [file_ofs << 4], 512); }
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	2b01      	cmp	r3, #1
 800a602:	d80a      	bhi.n	800a61a <bcmtable_R+0x22>
 800a604:	4610      	mov	r0, r2
 800a606:	025b      	lsls	r3, r3, #9
 800a608:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800a60c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800a610:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a614:	4619      	mov	r1, r3
 800a616:	f002 fe29 	bl	800d26c <memcpy>
 800a61a:	bf00      	nop
 800a61c:	bd80      	pop	{r7, pc}
	...

0800a620 <bcmtable_W>:
void bcmtable_W (register ptr_all_types buf, register uint32_t file_ofs) {
 800a620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a624:	af00      	add	r7, sp, #0
 800a626:	4680      	mov	r8, r0
 800a628:	460c      	mov	r4, r1

	if (file_ofs < 2) {
 800a62a:	2c01      	cmp	r4, #1
 800a62c:	d83f      	bhi.n	800a6ae <bcmtable_W+0x8e>

		// check if the sector has not been erased yet
		files_dirty = DIRTY_TIMEOUT;
 800a62e:	4b21      	ldr	r3, [pc, #132]	; (800a6b4 <bcmtable_W+0x94>)
 800a630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a634:	601a      	str	r2, [r3, #0]
		if (! (bcmtable_erase >> file_ofs & 1)) {
 800a636:	4b20      	ldr	r3, [pc, #128]	; (800a6b8 <bcmtable_W+0x98>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	4123      	asrs	r3, r4
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10e      	bne.n	800a662 <bcmtable_W+0x42>

			// unlock FPEC
			BOOT_BLOCK -> unlock_fpec ();
 800a644:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a648:	f8d3 39ac 	ldr.w	r3, [r3, #2476]	; 0x9ac
 800a64c:	4798      	blx	r3

			// erase 1KB (2 sectors)
			BOOT_BLOCK -> page_erase_handler (0x40022000, (t_settings *) & BCMTABLE_BIN [0]);
 800a64e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a652:	f8d3 39b4 	ldr.w	r3, [r3, #2484]	; 0x9b4
 800a656:	4919      	ldr	r1, [pc, #100]	; (800a6bc <bcmtable_W+0x9c>)
 800a658:	4819      	ldr	r0, [pc, #100]	; (800a6c0 <bcmtable_W+0xa0>)
 800a65a:	4798      	blx	r3
			bcmtable_erase = 3;
 800a65c:	4b16      	ldr	r3, [pc, #88]	; (800a6b8 <bcmtable_W+0x98>)
 800a65e:	2203      	movs	r2, #3
 800a660:	701a      	strb	r2, [r3, #0]

		}
		// clear the erase flag
		bcmtable_erase &= ~ (1 << file_ofs);
 800a662:	2301      	movs	r3, #1
 800a664:	40a3      	lsls	r3, r4
 800a666:	b25b      	sxtb	r3, r3
 800a668:	43db      	mvns	r3, r3
 800a66a:	b25a      	sxtb	r2, r3
 800a66c:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <bcmtable_W+0x98>)
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	b25b      	sxtb	r3, r3
 800a672:	4013      	ands	r3, r2
 800a674:	b25b      	sxtb	r3, r3
 800a676:	b2da      	uxtb	r2, r3
 800a678:	4b0f      	ldr	r3, [pc, #60]	; (800a6b8 <bcmtable_W+0x98>)
 800a67a:	701a      	strb	r2, [r3, #0]
		register uint32_t k = file_ofs << 8 & 0x0100;
 800a67c:	0223      	lsls	r3, r4, #8
 800a67e:	f403 7580 	and.w	r5, r3, #256	; 0x100
		for (register uint32_t j = 0; j < 256; j ++, k ++)
 800a682:	2400      	movs	r4, #0
 800a684:	e011      	b.n	800a6aa <bcmtable_W+0x8a>

			// copy new data into flash
			BOOT_BLOCK -> flash_halfword_handler (0x40022000, (t_settings *) & BCMTABLE_BIN [0].half [k], buf.half [j]);
 800a686:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a68a:	f8d3 69b8 	ldr.w	r6, [r3, #2488]	; 0x9b8
 800a68e:	006b      	lsls	r3, r5, #1
 800a690:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800a694:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800a698:	4641      	mov	r1, r8
 800a69a:	0062      	lsls	r2, r4, #1
 800a69c:	440a      	add	r2, r1
 800a69e:	8812      	ldrh	r2, [r2, #0]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4807      	ldr	r0, [pc, #28]	; (800a6c0 <bcmtable_W+0xa0>)
 800a6a4:	47b0      	blx	r6
		for (register uint32_t j = 0; j < 256; j ++, k ++)
 800a6a6:	3401      	adds	r4, #1
 800a6a8:	3501      	adds	r5, #1
 800a6aa:	2cff      	cmp	r4, #255	; 0xff
 800a6ac:	d9eb      	bls.n	800a686 <bcmtable_W+0x66>

	}
}
 800a6ae:	bf00      	nop
 800a6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b4:	20003504 	.word	0x20003504
 800a6b8:	200030b5 	.word	0x200030b5
 800a6bc:	0800ec00 	.word	0x0800ec00
 800a6c0:	40022000 	.word	0x40022000

0800a6c4 <crlf_8>:

void crlf_8 () {
 800a6c4:	b480      	push	{r7}
 800a6c6:	af00      	add	r7, sp, #0

	dest_pos [0]	 = 13;
 800a6c8:	4b08      	ldr	r3, [pc, #32]	; (800a6ec <crlf_8+0x28>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	220d      	movs	r2, #13
 800a6ce:	701a      	strb	r2, [r3, #0]
	dest_pos [1]	 = 10;
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <crlf_8+0x28>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	220a      	movs	r2, #10
 800a6d8:	701a      	strb	r2, [r3, #0]
	dest_pos		+=  2;
 800a6da:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <crlf_8+0x28>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3302      	adds	r3, #2
 800a6e0:	4a02      	ldr	r2, [pc, #8]	; (800a6ec <crlf_8+0x28>)
 800a6e2:	6013      	str	r3, [r2, #0]

}
 800a6e4:	bf00      	nop
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bc80      	pop	{r7}
 800a6ea:	4770      	bx	lr
 800a6ec:	200030a8 	.word	0x200030a8

0800a6f0 <pad_8>:

void pad_8 (register int cnt) {
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	4603      	mov	r3, r0

	do {

		dest_pos [0]	 = ' ';
 800a6f6:	4a08      	ldr	r2, [pc, #32]	; (800a718 <pad_8+0x28>)
 800a6f8:	6812      	ldr	r2, [r2, #0]
 800a6fa:	2120      	movs	r1, #32
 800a6fc:	7011      	strb	r1, [r2, #0]
		dest_pos		++;
 800a6fe:	4a06      	ldr	r2, [pc, #24]	; (800a718 <pad_8+0x28>)
 800a700:	6812      	ldr	r2, [r2, #0]
 800a702:	3201      	adds	r2, #1
 800a704:	4904      	ldr	r1, [pc, #16]	; (800a718 <pad_8+0x28>)
 800a706:	600a      	str	r2, [r1, #0]

	} while (-- cnt);
 800a708:	3b01      	subs	r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1f3      	bne.n	800a6f6 <pad_8+0x6>
}
 800a70e:	bf00      	nop
 800a710:	46bd      	mov	sp, r7
 800a712:	bc80      	pop	{r7}
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	200030a8 	.word	0x200030a8

0800a71c <hex_8>:

void hex_8 (register int cnt, register int size) {
 800a71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a720:	af00      	add	r7, sp, #0
 800a722:	4606      	mov	r6, r0
 800a724:	4689      	mov	r9, r1

	do {

		pad_8 (2);
 800a726:	2002      	movs	r0, #2
 800a728:	f7ff ffe2 	bl	800a6f0 <pad_8>
		register int c = size;
 800a72c:	464d      	mov	r5, r9
		do {

			register int u	 =	src_pos [-- c];
 800a72e:	4b1d      	ldr	r3, [pc, #116]	; (800a7a4 <hex_8+0x88>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3d01      	subs	r5, #1
 800a734:	462a      	mov	r2, r5
 800a736:	4413      	add	r3, r2
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	461c      	mov	r4, r3
			register int t	 =	u >> 4;		u &= 15;
 800a73c:	ea4f 1824 	mov.w	r8, r4, asr #4
 800a740:	f004 040f 	and.w	r4, r4, #15
			dest_pos [0]	 =	(t > 9)?	t + '7'	:	t + '0';
 800a744:	4b18      	ldr	r3, [pc, #96]	; (800a7a8 <hex_8+0x8c>)
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	f1b8 0f09 	cmp.w	r8, #9
 800a74c:	dd04      	ble.n	800a758 <hex_8+0x3c>
 800a74e:	fa5f f388 	uxtb.w	r3, r8
 800a752:	3337      	adds	r3, #55	; 0x37
 800a754:	b2db      	uxtb	r3, r3
 800a756:	e003      	b.n	800a760 <hex_8+0x44>
 800a758:	fa5f f388 	uxtb.w	r3, r8
 800a75c:	3330      	adds	r3, #48	; 0x30
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	7013      	strb	r3, [r2, #0]
			dest_pos [1]	 =	(u > 9)?	u + '7'	:	u + '0';
 800a762:	4b11      	ldr	r3, [pc, #68]	; (800a7a8 <hex_8+0x8c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	2c09      	cmp	r4, #9
 800a76a:	dd03      	ble.n	800a774 <hex_8+0x58>
 800a76c:	b2e3      	uxtb	r3, r4
 800a76e:	3337      	adds	r3, #55	; 0x37
 800a770:	b2db      	uxtb	r3, r3
 800a772:	e002      	b.n	800a77a <hex_8+0x5e>
 800a774:	b2e3      	uxtb	r3, r4
 800a776:	3330      	adds	r3, #48	; 0x30
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	7013      	strb	r3, [r2, #0]
			dest_pos		+=	2;
 800a77c:	4b0a      	ldr	r3, [pc, #40]	; (800a7a8 <hex_8+0x8c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3302      	adds	r3, #2
 800a782:	4a09      	ldr	r2, [pc, #36]	; (800a7a8 <hex_8+0x8c>)
 800a784:	6013      	str	r3, [r2, #0]

		} while (c);
 800a786:	2d00      	cmp	r5, #0
 800a788:	d1d1      	bne.n	800a72e <hex_8+0x12>
		src_pos += size;
 800a78a:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <hex_8+0x88>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	464a      	mov	r2, r9
 800a790:	4413      	add	r3, r2
 800a792:	4a04      	ldr	r2, [pc, #16]	; (800a7a4 <hex_8+0x88>)
 800a794:	6013      	str	r3, [r2, #0]

	} while (-- cnt);
 800a796:	3e01      	subs	r6, #1
 800a798:	2e00      	cmp	r6, #0
 800a79a:	d1c4      	bne.n	800a726 <hex_8+0xa>
}
 800a79c:	bf00      	nop
 800a79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20003630 	.word	0x20003630
 800a7a8:	200030a8 	.word	0x200030a8

0800a7ac <override_txt_R>:

void override_txt_R (register ptr_all_types buf, register uint32_t file_ofs) {
 800a7ac:	b598      	push	{r3, r4, r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	460a      	mov	r2, r1

	// assign the destination pointer
	dest_pos = & buf.byte [0];
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4b3a      	ldr	r3, [pc, #232]	; (800a8a0 <override_txt_R+0xf4>)
 800a7b8:	6019      	str	r1, [r3, #0]

	// reset the source pointer if the first sector is requested
	if (! file_ofs) {
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	d105      	bne.n	800a7ca <override_txt_R+0x1e>

		seq_ctr = 0;
 800a7be:	4b39      	ldr	r3, [pc, #228]	; (800a8a4 <override_txt_R+0xf8>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	801a      	strh	r2, [r3, #0]
		src_pos = & OVERRIDE_BIN -> byte [0];
 800a7c4:	4b38      	ldr	r3, [pc, #224]	; (800a8a8 <override_txt_R+0xfc>)
 800a7c6:	4a39      	ldr	r2, [pc, #228]	; (800a8ac <override_txt_R+0x100>)
 800a7c8:	601a      	str	r2, [r3, #0]

	}
	for (register int i = 0; i < 16; i ++, seq_ctr --) {
 800a7ca:	2400      	movs	r4, #0
 800a7cc:	e063      	b.n	800a896 <override_txt_R+0xea>

		switch (seq_ctr) {
 800a7ce:	4b35      	ldr	r3, [pc, #212]	; (800a8a4 <override_txt_R+0xf8>)
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d038      	beq.n	800a848 <override_txt_R+0x9c>
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d031      	beq.n	800a83e <override_txt_R+0x92>
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d03f      	beq.n	800a85e <override_txt_R+0xb2>

		default:	//	check for the iNES signature
					switch (src_pos [3]) {
 800a7de:	4b32      	ldr	r3, [pc, #200]	; (800a8a8 <override_txt_R+0xfc>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3303      	adds	r3, #3
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	3b20      	subs	r3, #32
 800a7e8:	2b5e      	cmp	r3, #94	; 0x5e
 800a7ea:	d812      	bhi.n	800a812 <override_txt_R+0x66>

					// test for ASCII char
					case ' ' ... '~':	memcpy (dest_pos, src_pos, 32);
 800a7ec:	4b2c      	ldr	r3, [pc, #176]	; (800a8a0 <override_txt_R+0xf4>)
 800a7ee:	6818      	ldr	r0, [r3, #0]
 800a7f0:	4b2d      	ldr	r3, [pc, #180]	; (800a8a8 <override_txt_R+0xfc>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	f002 fd38 	bl	800d26c <memcpy>
										src_pos  += 32;
 800a7fc:	4b2a      	ldr	r3, [pc, #168]	; (800a8a8 <override_txt_R+0xfc>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3320      	adds	r3, #32
 800a802:	4a29      	ldr	r2, [pc, #164]	; (800a8a8 <override_txt_R+0xfc>)
 800a804:	6013      	str	r3, [r2, #0]
										dest_pos += 32;
 800a806:	4b26      	ldr	r3, [pc, #152]	; (800a8a0 <override_txt_R+0xf4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3320      	adds	r3, #32
 800a80c:	4a24      	ldr	r2, [pc, #144]	; (800a8a0 <override_txt_R+0xf4>)
 800a80e:	6013      	str	r3, [r2, #0]
										continue;
 800a810:	e03a      	b.n	800a888 <override_txt_R+0xdc>

					}
					//	CR+LF, 3 ASCII, 5 hex-8
					seq_ctr = 4;
 800a812:	4b24      	ldr	r3, [pc, #144]	; (800a8a4 <override_txt_R+0xf8>)
 800a814:	2204      	movs	r2, #4
 800a816:	801a      	strh	r2, [r3, #0]
					crlf_8	( );	//	 2
 800a818:	f7ff ff54 	bl	800a6c4 <crlf_8>
					hex_8	(1, 4);	//	10
 800a81c:	2104      	movs	r1, #4
 800a81e:	2001      	movs	r0, #1
 800a820:	f7ff ff7c 	bl	800a71c <hex_8>
					dest_pos [- 10] = '$';
 800a824:	4b1e      	ldr	r3, [pc, #120]	; (800a8a0 <override_txt_R+0xf4>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3b0a      	subs	r3, #10
 800a82a:	2224      	movs	r2, #36	; 0x24
 800a82c:	701a      	strb	r2, [r3, #0]
					hex_8	(4, 1);	//	16
 800a82e:	2101      	movs	r1, #1
 800a830:	2004      	movs	r0, #4
 800a832:	f7ff ff73 	bl	800a71c <hex_8>
					pad_8	(4);	//	 4
 800a836:	2004      	movs	r0, #4
 800a838:	f7ff ff5a 	bl	800a6f0 <pad_8>
					continue;
 800a83c:	e024      	b.n	800a888 <override_txt_R+0xdc>

		case 3:		//	8 hex-8
					hex_8	(8, 1);	//	32
 800a83e:	2101      	movs	r1, #1
 800a840:	2008      	movs	r0, #8
 800a842:	f7ff ff6b 	bl	800a71c <hex_8>
					continue;
 800a846:	e01f      	b.n	800a888 <override_txt_R+0xdc>

		case 2:		//	5 spaces, 4 hex-16, 3 spaces
					pad_8	(4);	//	 4
 800a848:	2004      	movs	r0, #4
 800a84a:	f7ff ff51 	bl	800a6f0 <pad_8>
					hex_8	(4, 2);	//	24
 800a84e:	2102      	movs	r1, #2
 800a850:	2004      	movs	r0, #4
 800a852:	f7ff ff63 	bl	800a71c <hex_8>
					pad_8	(4);	//	 4
 800a856:	2004      	movs	r0, #4
 800a858:	f7ff ff4a 	bl	800a6f0 <pad_8>
					continue;
 800a85c:	e014      	b.n	800a888 <override_txt_R+0xdc>

		case 1:		//	6 hex-8, CR+LF
					hex_8	(4, 1);	//	16
 800a85e:	2101      	movs	r1, #1
 800a860:	2004      	movs	r0, #4
 800a862:	f7ff ff5b 	bl	800a71c <hex_8>
					pad_8	(4);	//	 4
 800a866:	2004      	movs	r0, #4
 800a868:	f7ff ff42 	bl	800a6f0 <pad_8>
					hex_8	(2, 1);	//	 8
 800a86c:	2101      	movs	r1, #1
 800a86e:	2002      	movs	r0, #2
 800a870:	f7ff ff54 	bl	800a71c <hex_8>
					pad_8	(2);	//	 2
 800a874:	2002      	movs	r0, #2
 800a876:	f7ff ff3b 	bl	800a6f0 <pad_8>
					crlf_8	( );	//	 2
 800a87a:	f7ff ff23 	bl	800a6c4 <crlf_8>
					src_pos += 2;
 800a87e:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <override_txt_R+0xfc>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3302      	adds	r3, #2
 800a884:	4a08      	ldr	r2, [pc, #32]	; (800a8a8 <override_txt_R+0xfc>)
 800a886:	6013      	str	r3, [r2, #0]
	for (register int i = 0; i < 16; i ++, seq_ctr --) {
 800a888:	3401      	adds	r4, #1
 800a88a:	4b06      	ldr	r3, [pc, #24]	; (800a8a4 <override_txt_R+0xf8>)
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	3b01      	subs	r3, #1
 800a890:	b29a      	uxth	r2, r3
 800a892:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <override_txt_R+0xf8>)
 800a894:	801a      	strh	r2, [r3, #0]
 800a896:	2c0f      	cmp	r4, #15
 800a898:	dd99      	ble.n	800a7ce <override_txt_R+0x22>

		}
	}
}
 800a89a:	bf00      	nop
 800a89c:	bd98      	pop	{r3, r4, r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	200030a8 	.word	0x200030a8
 800a8a4:	200036e8 	.word	0x200036e8
 800a8a8:	20003630 	.word	0x20003630
 800a8ac:	0800f000 	.word	0x0800f000

0800a8b0 <override_txt_W>:

void override_txt_W (register ptr_all_types buf, register uint32_t file_ofs) {
 800a8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	4682      	mov	sl, r0

	// use a register pointer to be more efficient
	register t_wb *		wb	=	& _wb;
 800a8ba:	4ccd      	ldr	r4, [pc, #820]	; (800abf0 <override_txt_W+0x340>)
	register int		bc	=	wb -> byte_cnt;
 800a8bc:	7d63      	ldrb	r3, [r4, #21]
 800a8be:	461e      	mov	r6, r3

	// reset the destination pointer if the first sector is requested
	files_dirty = DIRTY_TIMEOUT;
 800a8c0:	4bcc      	ldr	r3, [pc, #816]	; (800abf4 <override_txt_W+0x344>)
 800a8c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a8c6:	601a      	str	r2, [r3, #0]
	if (! file_ofs) {
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	d103      	bne.n	800a8d4 <override_txt_W+0x24>

		wb -> mode	= 5;
 800a8cc:	2305      	movs	r3, #5
 800a8ce:	75e3      	strb	r3, [r4, #23]
		wb -> dest	= 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	7523      	strb	r3, [r4, #20]

	}
	for (register int cnt = 0; cnt < 512 && wb -> dest < (OVERRIDE_SIZE / 32); cnt ++) {
 800a8d4:	f04f 0900 	mov.w	r9, #0
 800a8d8:	e1ee      	b.n	800acb8 <override_txt_W+0x408>

		register int t = buf.byte [cnt];
 800a8da:	4652      	mov	r2, sl
 800a8dc:	464b      	mov	r3, r9
 800a8de:	4413      	add	r3, r2
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	461d      	mov	r5, r3
		switch (wb -> mode) {
 800a8e4:	7de3      	ldrb	r3, [r4, #23]
 800a8e6:	2b05      	cmp	r3, #5
 800a8e8:	f200 81e4 	bhi.w	800acb4 <override_txt_W+0x404>
 800a8ec:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <override_txt_W+0x44>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a925 	.word	0x0800a925
 800a8f8:	0800a935 	.word	0x0800a935
 800a8fc:	0800aa4d 	.word	0x0800aa4d
 800a900:	0800a967 	.word	0x0800a967
 800a904:	0800a90d 	.word	0x0800a90d
 800a908:	0800a919 	.word	0x0800a919

		// wait for end of line (CR or LF)
		case 4:		switch (t) {
 800a90c:	2d0a      	cmp	r5, #10
 800a90e:	d000      	beq.n	800a912 <override_txt_W+0x62>

//					case 13:
					case 10:	wb -> mode = 5;

					} continue;
 800a910:	e1d0      	b.n	800acb4 <override_txt_W+0x404>
					case 10:	wb -> mode = 5;
 800a912:	2305      	movs	r3, #5
 800a914:	75e3      	strb	r3, [r4, #23]
					} continue;
 800a916:	e1cd      	b.n	800acb4 <override_txt_W+0x404>

		// wait for new line
		case 5:		switch (t) {
 800a918:	2d0a      	cmp	r5, #10
 800a91a:	f000 81c6 	beq.w	800acaa <override_txt_W+0x3fa>
 800a91e:	2d0d      	cmp	r5, #13
 800a920:	f000 81c3 	beq.w	800acaa <override_txt_W+0x3fa>
					case 13:	continue;

					}

		// unknown mode
		case 0:		bc	= 0;
 800a924:	2600      	movs	r6, #0
					if (t == '$') {
 800a926:	2d24      	cmp	r5, #36	; 0x24
 800a928:	d102      	bne.n	800a930 <override_txt_W+0x80>

						wb -> mode		= 3;
 800a92a:	2303      	movs	r3, #3
 800a92c:	75e3      	strb	r3, [r4, #23]
						continue;
 800a92e:	e1c1      	b.n	800acb4 <override_txt_W+0x404>

					}
					wb -> mode = 1;
 800a930:	2301      	movs	r3, #1
 800a932:	75e3      	strb	r3, [r4, #23]

		// raw mode
		case 1:		switch (t) {
 800a934:	2d0a      	cmp	r5, #10
 800a936:	d003      	beq.n	800a940 <override_txt_W+0x90>
 800a938:	2d0d      	cmp	r5, #13
 800a93a:	f000 81b8 	beq.w	800acae <override_txt_W+0x3fe>
 800a93e:	e009      	b.n	800a954 <override_txt_W+0xa4>

					// blank-pad the rest of the line
					case 10:	do debug.buf [bc ++] = ' ';
 800a940:	4633      	mov	r3, r6
 800a942:	1c5e      	adds	r6, r3, #1
 800a944:	4aac      	ldr	r2, [pc, #688]	; (800abf8 <override_txt_W+0x348>)
 800a946:	2120      	movs	r1, #32
 800a948:	54d1      	strb	r1, [r2, r3]
								while (bc < 30);
 800a94a:	2e1d      	cmp	r6, #29
 800a94c:	ddf8      	ble.n	800a940 <override_txt_W+0x90>
								wb -> mode = 5;
 800a94e:	2305      	movs	r3, #5
 800a950:	75e3      	strb	r3, [r4, #23]
								goto CR_LF;
 800a952:	e167      	b.n	800ac24 <override_txt_W+0x374>

					// handle pure ascii data up to 30 chars
					default:	debug.buf [bc ++] = t;
 800a954:	4633      	mov	r3, r6
 800a956:	1c5e      	adds	r6, r3, #1
 800a958:	b2e9      	uxtb	r1, r5
 800a95a:	4aa7      	ldr	r2, [pc, #668]	; (800abf8 <override_txt_W+0x348>)
 800a95c:	54d1      	strb	r1, [r2, r3]
								if (bc >= 30)		goto CR_LF2;
 800a95e:	2e1d      	cmp	r6, #29
 800a960:	f340 81a5 	ble.w	800acae <override_txt_W+0x3fe>
 800a964:	e15c      	b.n	800ac20 <override_txt_W+0x370>
					case 13:;

					} continue;

		// hex whitespace mode
		case 3:		switch (t) {
 800a966:	f1a5 0309 	sub.w	r3, r5, #9
 800a96a:	2b32      	cmp	r3, #50	; 0x32
 800a96c:	d868      	bhi.n	800aa40 <override_txt_W+0x190>
 800a96e:	a201      	add	r2, pc, #4	; (adr r2, 800a974 <override_txt_W+0xc4>)
 800a970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a974:	0800acb3 	.word	0x0800acb3
 800a978:	0800acb3 	.word	0x0800acb3
 800a97c:	0800aa41 	.word	0x0800aa41
 800a980:	0800aa41 	.word	0x0800aa41
 800a984:	0800acb3 	.word	0x0800acb3
 800a988:	0800aa41 	.word	0x0800aa41
 800a98c:	0800aa41 	.word	0x0800aa41
 800a990:	0800aa41 	.word	0x0800aa41
 800a994:	0800aa41 	.word	0x0800aa41
 800a998:	0800aa41 	.word	0x0800aa41
 800a99c:	0800aa41 	.word	0x0800aa41
 800a9a0:	0800aa41 	.word	0x0800aa41
 800a9a4:	0800aa41 	.word	0x0800aa41
 800a9a8:	0800aa41 	.word	0x0800aa41
 800a9ac:	0800aa41 	.word	0x0800aa41
 800a9b0:	0800aa41 	.word	0x0800aa41
 800a9b4:	0800aa41 	.word	0x0800aa41
 800a9b8:	0800aa41 	.word	0x0800aa41
 800a9bc:	0800aa41 	.word	0x0800aa41
 800a9c0:	0800aa41 	.word	0x0800aa41
 800a9c4:	0800aa41 	.word	0x0800aa41
 800a9c8:	0800aa41 	.word	0x0800aa41
 800a9cc:	0800aa41 	.word	0x0800aa41
 800a9d0:	0800acb3 	.word	0x0800acb3
 800a9d4:	0800aa41 	.word	0x0800aa41
 800a9d8:	0800aa41 	.word	0x0800aa41
 800a9dc:	0800aa41 	.word	0x0800aa41
 800a9e0:	0800aa41 	.word	0x0800aa41
 800a9e4:	0800aa41 	.word	0x0800aa41
 800a9e8:	0800aa41 	.word	0x0800aa41
 800a9ec:	0800aa41 	.word	0x0800aa41
 800a9f0:	0800aa41 	.word	0x0800aa41
 800a9f4:	0800aa41 	.word	0x0800aa41
 800a9f8:	0800aa41 	.word	0x0800aa41
 800a9fc:	0800aa41 	.word	0x0800aa41
 800aa00:	0800acb3 	.word	0x0800acb3
 800aa04:	0800aa41 	.word	0x0800aa41
 800aa08:	0800aa41 	.word	0x0800aa41
 800aa0c:	0800aa41 	.word	0x0800aa41
 800aa10:	0800aa41 	.word	0x0800aa41
 800aa14:	0800aa41 	.word	0x0800aa41
 800aa18:	0800aa41 	.word	0x0800aa41
 800aa1c:	0800aa41 	.word	0x0800aa41
 800aa20:	0800aa41 	.word	0x0800aa41
 800aa24:	0800aa41 	.word	0x0800aa41
 800aa28:	0800aa41 	.word	0x0800aa41
 800aa2c:	0800aa41 	.word	0x0800aa41
 800aa30:	0800aa41 	.word	0x0800aa41
 800aa34:	0800aa41 	.word	0x0800aa41
 800aa38:	0800aa41 	.word	0x0800aa41
 800aa3c:	0800acb3 	.word	0x0800acb3
					// do nothing while in whitespace
					case ' ':	case ',':	case ';':	case   9:	case  10:	case  13:			continue;

					}
					// reset the hex stuff
					wb -> acu_cnt	= 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	75a3      	strb	r3, [r4, #22]
					wb -> acu		= 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	6123      	str	r3, [r4, #16]
					wb -> mode		= 2;
 800aa48:	2302      	movs	r3, #2
 800aa4a:	75e3      	strb	r3, [r4, #23]

		// hex digit mode
		case 2:		switch (t) {
 800aa4c:	f1a5 0309 	sub.w	r3, r5, #9
 800aa50:	2b5d      	cmp	r3, #93	; 0x5d
 800aa52:	f200 812f 	bhi.w	800acb4 <override_txt_W+0x404>
 800aa56:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <override_txt_W+0x1ac>)
 800aa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5c:	0800abfd 	.word	0x0800abfd
 800aa60:	0800abfd 	.word	0x0800abfd
 800aa64:	0800acb5 	.word	0x0800acb5
 800aa68:	0800acb5 	.word	0x0800acb5
 800aa6c:	0800abfd 	.word	0x0800abfd
 800aa70:	0800acb5 	.word	0x0800acb5
 800aa74:	0800acb5 	.word	0x0800acb5
 800aa78:	0800acb5 	.word	0x0800acb5
 800aa7c:	0800acb5 	.word	0x0800acb5
 800aa80:	0800acb5 	.word	0x0800acb5
 800aa84:	0800acb5 	.word	0x0800acb5
 800aa88:	0800acb5 	.word	0x0800acb5
 800aa8c:	0800acb5 	.word	0x0800acb5
 800aa90:	0800acb5 	.word	0x0800acb5
 800aa94:	0800acb5 	.word	0x0800acb5
 800aa98:	0800acb5 	.word	0x0800acb5
 800aa9c:	0800acb5 	.word	0x0800acb5
 800aaa0:	0800acb5 	.word	0x0800acb5
 800aaa4:	0800acb5 	.word	0x0800acb5
 800aaa8:	0800acb5 	.word	0x0800acb5
 800aaac:	0800acb5 	.word	0x0800acb5
 800aab0:	0800acb5 	.word	0x0800acb5
 800aab4:	0800acb5 	.word	0x0800acb5
 800aab8:	0800abfd 	.word	0x0800abfd
 800aabc:	0800acb5 	.word	0x0800acb5
 800aac0:	0800acb5 	.word	0x0800acb5
 800aac4:	0800acb5 	.word	0x0800acb5
 800aac8:	0800acb5 	.word	0x0800acb5
 800aacc:	0800acb5 	.word	0x0800acb5
 800aad0:	0800acb5 	.word	0x0800acb5
 800aad4:	0800acb5 	.word	0x0800acb5
 800aad8:	0800acb5 	.word	0x0800acb5
 800aadc:	0800acb5 	.word	0x0800acb5
 800aae0:	0800acb5 	.word	0x0800acb5
 800aae4:	0800acb5 	.word	0x0800acb5
 800aae8:	0800abfd 	.word	0x0800abfd
 800aaec:	0800acb5 	.word	0x0800acb5
 800aaf0:	0800acb5 	.word	0x0800acb5
 800aaf4:	0800acb5 	.word	0x0800acb5
 800aaf8:	0800abdb 	.word	0x0800abdb
 800aafc:	0800abdb 	.word	0x0800abdb
 800ab00:	0800abdb 	.word	0x0800abdb
 800ab04:	0800abdb 	.word	0x0800abdb
 800ab08:	0800abdb 	.word	0x0800abdb
 800ab0c:	0800abdb 	.word	0x0800abdb
 800ab10:	0800abdb 	.word	0x0800abdb
 800ab14:	0800abdb 	.word	0x0800abdb
 800ab18:	0800abdb 	.word	0x0800abdb
 800ab1c:	0800abdb 	.word	0x0800abdb
 800ab20:	0800acb5 	.word	0x0800acb5
 800ab24:	0800abfd 	.word	0x0800abfd
 800ab28:	0800acb5 	.word	0x0800acb5
 800ab2c:	0800acb5 	.word	0x0800acb5
 800ab30:	0800acb5 	.word	0x0800acb5
 800ab34:	0800acb5 	.word	0x0800acb5
 800ab38:	0800acb5 	.word	0x0800acb5
 800ab3c:	0800abd9 	.word	0x0800abd9
 800ab40:	0800abd9 	.word	0x0800abd9
 800ab44:	0800abd9 	.word	0x0800abd9
 800ab48:	0800abd9 	.word	0x0800abd9
 800ab4c:	0800abd9 	.word	0x0800abd9
 800ab50:	0800abd9 	.word	0x0800abd9
 800ab54:	0800acb5 	.word	0x0800acb5
 800ab58:	0800acb5 	.word	0x0800acb5
 800ab5c:	0800acb5 	.word	0x0800acb5
 800ab60:	0800acb5 	.word	0x0800acb5
 800ab64:	0800acb5 	.word	0x0800acb5
 800ab68:	0800acb5 	.word	0x0800acb5
 800ab6c:	0800acb5 	.word	0x0800acb5
 800ab70:	0800acb5 	.word	0x0800acb5
 800ab74:	0800acb5 	.word	0x0800acb5
 800ab78:	0800acb5 	.word	0x0800acb5
 800ab7c:	0800acb5 	.word	0x0800acb5
 800ab80:	0800acb5 	.word	0x0800acb5
 800ab84:	0800acb5 	.word	0x0800acb5
 800ab88:	0800acb5 	.word	0x0800acb5
 800ab8c:	0800acb5 	.word	0x0800acb5
 800ab90:	0800acb5 	.word	0x0800acb5
 800ab94:	0800acb5 	.word	0x0800acb5
 800ab98:	0800acb5 	.word	0x0800acb5
 800ab9c:	0800acb5 	.word	0x0800acb5
 800aba0:	0800acb5 	.word	0x0800acb5
 800aba4:	0800acb5 	.word	0x0800acb5
 800aba8:	0800acb5 	.word	0x0800acb5
 800abac:	0800acb5 	.word	0x0800acb5
 800abb0:	0800acb5 	.word	0x0800acb5
 800abb4:	0800acb5 	.word	0x0800acb5
 800abb8:	0800acb5 	.word	0x0800acb5
 800abbc:	0800abd5 	.word	0x0800abd5
 800abc0:	0800abd5 	.word	0x0800abd5
 800abc4:	0800abd5 	.word	0x0800abd5
 800abc8:	0800abd5 	.word	0x0800abd5
 800abcc:	0800abd5 	.word	0x0800abd5
 800abd0:	0800abd5 	.word	0x0800abd5

					case 'a' ... 'f':	t ^= 32;	//	shift the caps
 800abd4:	f085 0520 	eor.w	r5, r5, #32
					case 'A' ... 'F':	t -=  7;	//	delete the alpha offset
 800abd8:	3d07      	subs	r5, #7
					case '0' ... '9':	wb -> acu = (wb -> acu << 4) + t - '0';	wb -> acu_cnt ++;	continue;
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	462a      	mov	r2, r5
 800abe0:	4413      	add	r3, r2
 800abe2:	3b30      	subs	r3, #48	; 0x30
 800abe4:	6123      	str	r3, [r4, #16]
 800abe6:	7da3      	ldrb	r3, [r4, #22]
 800abe8:	3301      	adds	r3, #1
 800abea:	b2db      	uxtb	r3, r3
 800abec:	75a3      	strb	r3, [r4, #22]
 800abee:	e061      	b.n	800acb4 <override_txt_W+0x404>
 800abf0:	20002c7c 	.word	0x20002c7c
 800abf4:	20003504 	.word	0x20003504
 800abf8:	20002ca8 	.word	0x20002ca8

					// found the end of the number
					case ' ':	case ',':	case ';':	case   9:	case  10:	case  13:

						// write in the number
						wb -> acu_cnt >>= 1;		//	divide nibble count by 2 to get bytes, ignore partials
 800abfc:	7da3      	ldrb	r3, [r4, #22]
 800abfe:	085b      	lsrs	r3, r3, #1
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	75a3      	strb	r3, [r4, #22]
						memcpy (& debug.buf [bc], & wb -> acu, wb -> acu_cnt);
 800ac04:	4b34      	ldr	r3, [pc, #208]	; (800acd8 <override_txt_W+0x428>)
 800ac06:	4433      	add	r3, r6
 800ac08:	f104 0110 	add.w	r1, r4, #16
 800ac0c:	7da2      	ldrb	r2, [r4, #22]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f002 fb2c 	bl	800d26c <memcpy>
						bc	+= wb -> acu_cnt;
 800ac14:	7da3      	ldrb	r3, [r4, #22]
 800ac16:	441e      	add	r6, r3

						// check the byte counter
						wb -> mode = 3;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	75e3      	strb	r3, [r4, #23]
						if (bc >= 30) {
 800ac1c:	2e1d      	cmp	r6, #29
 800ac1e:	dd49      	ble.n	800acb4 <override_txt_W+0x404>

CR_LF2:						wb -> mode		 =  4;
 800ac20:	2304      	movs	r3, #4
 800ac22:	75e3      	strb	r3, [r4, #23]
CR_LF:						debug.Buf [15]	 =	0x0a0d;
 800ac24:	4b2c      	ldr	r3, [pc, #176]	; (800acd8 <override_txt_W+0x428>)
 800ac26:	f640 220d 	movw	r2, #2573	; 0xa0d
 800ac2a:	83da      	strh	r2, [r3, #30]

							// calculate the OVERRIDE.BIN offset;
							register int ofs = wb -> dest ++;	//	increment the destination index slot
 800ac2c:	7d23      	ldrb	r3, [r4, #20]
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	b2d2      	uxtb	r2, r2
 800ac32:	7522      	strb	r2, [r4, #20]
 800ac34:	4698      	mov	r8, r3
							register int sh  = ofs & 31;
 800ac36:	f008 051f 	and.w	r5, r8, #31

							// check the erase_bmp
							if ((wb -> erase_bmp [ofs >> 5] >> sh & 1) == 0) {
 800ac3a:	ea4f 1368 	mov.w	r3, r8, asr #5
 800ac3e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ac42:	40eb      	lsrs	r3, r5
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d107      	bne.n	800ac5c <override_txt_W+0x3ac>

								memset (wb -> erase_bmp, 255, sizeof (_wb.erase_bmp));
 800ac4c:	4623      	mov	r3, r4
 800ac4e:	2210      	movs	r2, #16
 800ac50:	21ff      	movs	r1, #255	; 0xff
 800ac52:	4618      	mov	r0, r3
 800ac54:	f002 fb15 	bl	800d282 <memset>
								OVERRIDE_erase ();
 800ac58:	f7ff fc46 	bl	800a4e8 <OVERRIDE_erase>

							}
							// clear the erase bit
							wb -> erase_bmp [ofs >> 5] &= ~ (1 << sh);
 800ac5c:	ea4f 1368 	mov.w	r3, r8, asr #5
 800ac60:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ac64:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac68:	2101      	movs	r1, #1
 800ac6a:	40a9      	lsls	r1, r5
 800ac6c:	43c9      	mvns	r1, r1
 800ac6e:	400a      	ands	r2, r1
 800ac70:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

							// write 32 bytes to OVERRIDE.BIN
							for (register int j = 0; j < 16; j++) {
 800ac74:	2500      	movs	r5, #0
 800ac76:	e015      	b.n	800aca4 <override_txt_W+0x3f4>

								BOOT_BLOCK -> flash_halfword_handler (0x40022000, (t_settings *) & OVERRIDE_BIN -> data [ofs].half [j], debug.Buf [j]);
 800ac78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac7c:	f8d3 39b8 	ldr.w	r3, [r3, #2488]	; 0x9b8
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	4643      	mov	r3, r8
 800ac84:	011b      	lsls	r3, r3, #4
 800ac86:	462a      	mov	r2, r5
 800ac88:	4413      	add	r3, r2
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800ac90:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 800ac94:	4a10      	ldr	r2, [pc, #64]	; (800acd8 <override_txt_W+0x428>)
 800ac96:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	480f      	ldr	r0, [pc, #60]	; (800acdc <override_txt_W+0x42c>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4798      	blx	r3
							for (register int j = 0; j < 16; j++) {
 800aca2:	3501      	adds	r5, #1
 800aca4:	2d0f      	cmp	r5, #15
 800aca6:	dde7      	ble.n	800ac78 <override_txt_W+0x3c8>
 800aca8:	e004      	b.n	800acb4 <override_txt_W+0x404>
					case 13:	continue;
 800acaa:	bf00      	nop
 800acac:	e002      	b.n	800acb4 <override_txt_W+0x404>
					} continue;
 800acae:	bf00      	nop
 800acb0:	e000      	b.n	800acb4 <override_txt_W+0x404>
					case ' ':	case ',':	case ';':	case   9:	case  10:	case  13:			continue;
 800acb2:	bf00      	nop
	for (register int cnt = 0; cnt < 512 && wb -> dest < (OVERRIDE_SIZE / 32); cnt ++) {
 800acb4:	f109 0901 	add.w	r9, r9, #1
 800acb8:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
 800acbc:	da04      	bge.n	800acc8 <override_txt_W+0x418>
 800acbe:	7d23      	ldrb	r3, [r4, #20]
 800acc0:	b25b      	sxtb	r3, r3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f6bf ae09 	bge.w	800a8da <override_txt_W+0x2a>
							}
						}
					}
		}
	}
	wb -> byte_cnt = bc;
 800acc8:	b2f3      	uxtb	r3, r6
 800acca:	7563      	strb	r3, [r4, #21]

}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd6:	bf00      	nop
 800acd8:	20002ca8 	.word	0x20002ca8
 800acdc:	40022000 	.word	0x40022000

0800ace0 <readme_txt_R>:

//---------------------------------------------------------------------------------------------------------

void readme_txt_R (register ptr_all_types buf, register uint32_t file_ofs) {
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1

	if (!file_ofs)
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d106      	bne.n	800acfa <readme_txt_R+0x1a>
		memcpy (buf.byte, &readme_txt, sizeof (readme_txt));
 800acec:	4b04      	ldr	r3, [pc, #16]	; (800ad00 <readme_txt_R+0x20>)
 800acee:	4610      	mov	r0, r2
 800acf0:	4619      	mov	r1, r3
 800acf2:	234d      	movs	r3, #77	; 0x4d
 800acf4:	461a      	mov	r2, r3
 800acf6:	f002 fab9 	bl	800d26c <memcpy>

}
 800acfa:	bf00      	nop
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	0800df28 	.word	0x0800df28

0800ad04 <report_txt_R>:

void report_txt_R (register ptr_all_types buf, register uint32_t file_ofs) {
 800ad04:	b580      	push	{r7, lr}
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1

	if (!file_ofs)
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d107      	bne.n	800ad20 <report_txt_R+0x1c>
		memcpy (buf.byte, &report_txt, 512);
 800ad10:	4b04      	ldr	r3, [pc, #16]	; (800ad24 <report_txt_R+0x20>)
 800ad12:	4610      	mov	r0, r2
 800ad14:	4619      	mov	r1, r3
 800ad16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f002 faa6 	bl	800d26c <memcpy>

}
 800ad20:	bf00      	nop
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	200032c8 	.word	0x200032c8

0800ad28 <resetnes_txt_R>:

void resetnes_txt_R (register ptr_all_types buf, register uint32_t file_ofs) {
 800ad28:	b5b0      	push	{r4, r5, r7, lr}
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	460c      	mov	r4, r1

	ptr_krnl -> media_change_handler ();
 800ad30:	4b08      	ldr	r3, [pc, #32]	; (800ad54 <resetnes_txt_R+0x2c>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	4798      	blx	r3
	if (!file_ofs)
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	d108      	bne.n	800ad4e <resetnes_txt_R+0x26>
		memcpy (buf.byte, &report_txt, 512);
 800ad3c:	462a      	mov	r2, r5
 800ad3e:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <resetnes_txt_R+0x30>)
 800ad40:	4610      	mov	r0, r2
 800ad42:	4619      	mov	r1, r3
 800ad44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad48:	461a      	mov	r2, r3
 800ad4a:	f002 fa8f 	bl	800d26c <memcpy>

}
 800ad4e:	bf00      	nop
 800ad50:	bdb0      	pop	{r4, r5, r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20003634 	.word	0x20003634
 800ad58:	200032c8 	.word	0x200032c8

0800ad5c <DEMO_NES_R>:

void DEMO_NES_R (register ptr_all_types buf, register uint32_t file_ofs) {
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1

	if (file_ofs < 128)
 800ad64:	2b7f      	cmp	r3, #127	; 0x7f
 800ad66:	d80a      	bhi.n	800ad7e <DEMO_NES_R+0x22>
		memcpy (buf.byte, (char *) DEMO_BASE + (file_ofs << 9), 512);
 800ad68:	4610      	mov	r0, r2
 800ad6a:	025b      	lsls	r3, r3, #9
 800ad6c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800ad70:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ad74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad78:	4619      	mov	r1, r3
 800ad7a:	f002 fa77 	bl	800d26c <memcpy>

}
 800ad7e:	bf00      	nop
 800ad80:	bd80      	pop	{r7, pc}
	...

0800ad84 <ROM_NES_R>:

void ROM_NES_R (register ptr_all_types buf, register uint32_t file_ofs) {
 800ad84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad88:	b083      	sub	sp, #12
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	4680      	mov	r8, r0
 800ad8e:	460d      	mov	r5, r1

	old_PRG_bank |= bs_helper;		//	mostly for mapper 268
 800ad90:	4b44      	ldr	r3, [pc, #272]	; (800aea4 <ROM_NES_R+0x120>)
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	4b44      	ldr	r3, [pc, #272]	; (800aea8 <ROM_NES_R+0x124>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	4a42      	ldr	r2, [pc, #264]	; (800aea4 <ROM_NES_R+0x120>)
 800ad9c:	6013      	str	r3, [r2, #0]
	file_ofs <<= 9;
 800ad9e:	026d      	lsls	r5, r5, #9
	unsigned int cnt = 512 / 16;
 800ada0:	2320      	movs	r3, #32
 800ada2:	607b      	str	r3, [r7, #4]
	do {

		register unsigned int ROM_addr = file_ofs;
 800ada4:	462c      	mov	r4, r5
		file_ofs += 16;
 800ada6:	3510      	adds	r5, #16

		if (ROM_addr < 16) {
 800ada8:	2c0f      	cmp	r4, #15
 800adaa:	d809      	bhi.n	800adc0 <ROM_NES_R+0x3c>

			// NES header
			memcpy (buf.byte, &info, 16);
 800adac:	4643      	mov	r3, r8
 800adae:	2210      	movs	r2, #16
 800adb0:	493e      	ldr	r1, [pc, #248]	; (800aeac <ROM_NES_R+0x128>)
 800adb2:	4618      	mov	r0, r3
 800adb4:	f002 fa5a 	bl	800d26c <memcpy>
			buf.byte += 16;
 800adb8:	4643      	mov	r3, r8
 800adba:	3310      	adds	r3, #16
 800adbc:	4698      	mov	r8, r3
			continue;
 800adbe:	e065      	b.n	800ae8c <ROM_NES_R+0x108>

		}
		ROM_addr -= 16;
 800adc0:	3c10      	subs	r4, #16
		if (ROM_addr < v.PRG_ROM_size) {
 800adc2:	4b3b      	ldr	r3, [pc, #236]	; (800aeb0 <ROM_NES_R+0x12c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	42a3      	cmp	r3, r4
 800adc8:	d92c      	bls.n	800ae24 <ROM_NES_R+0xa0>

			// PRG-ROM handler
			if ((ROM_addr ^ old_PRG_bank) & v.PRG_bank_mask) {
 800adca:	4b36      	ldr	r3, [pc, #216]	; (800aea4 <ROM_NES_R+0x120>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	ea84 0203 	eor.w	r2, r4, r3
 800add2:	4b37      	ldr	r3, [pc, #220]	; (800aeb0 <ROM_NES_R+0x12c>)
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	4013      	ands	r3, r2
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00b      	beq.n	800adf4 <ROM_NES_R+0x70>

				old_PRG_bank = ROM_addr;
 800addc:	4b31      	ldr	r3, [pc, #196]	; (800aea4 <ROM_NES_R+0x120>)
 800adde:	601c      	str	r4, [r3, #0]
				old_CHR_bank |= b31;
 800ade0:	4b34      	ldr	r3, [pc, #208]	; (800aeb4 <ROM_NES_R+0x130>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ade8:	4a32      	ldr	r2, [pc, #200]	; (800aeb4 <ROM_NES_R+0x130>)
 800adea:	6013      	str	r3, [r2, #0]
				map.PRG_B (ROM_addr);
 800adec:	4b32      	ldr	r3, [pc, #200]	; (800aeb8 <ROM_NES_R+0x134>)
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	4620      	mov	r0, r4
 800adf2:	4798      	blx	r3
			}
			ROM_addr &= v.PRG_mask;
 800adf4:	4b2e      	ldr	r3, [pc, #184]	; (800aeb0 <ROM_NES_R+0x12c>)
 800adf6:	891b      	ldrh	r3, [r3, #8]
 800adf8:	401c      	ands	r4, r3
			ROM_addr += info.r.PRG_bank_ofs;
 800adfa:	4b2c      	ldr	r3, [pc, #176]	; (800aeac <ROM_NES_R+0x128>)
 800adfc:	8a1b      	ldrh	r3, [r3, #16]
 800adfe:	441c      	add	r4, r3
			register unsigned int i = 16;
 800ae00:	2610      	movs	r6, #16
			do {

				buf.byte [0] = CPU_R (ROM_addr++);
 800ae02:	46c1      	mov	r9, r8
 800ae04:	4623      	mov	r3, r4
 800ae06:	1c5c      	adds	r4, r3, #1
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fd fbad 	bl	8008568 <CPU_R>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	f889 3000 	strb.w	r3, [r9]
				buf.byte++;
 800ae16:	4643      	mov	r3, r8
 800ae18:	3301      	adds	r3, #1
 800ae1a:	4698      	mov	r8, r3

			} while (--i);
 800ae1c:	3e01      	subs	r6, #1
 800ae1e:	2e00      	cmp	r6, #0
 800ae20:	d1ef      	bne.n	800ae02 <ROM_NES_R+0x7e>
			continue;
 800ae22:	e033      	b.n	800ae8c <ROM_NES_R+0x108>

		}
		ROM_addr -= v.PRG_ROM_size;
 800ae24:	4b22      	ldr	r3, [pc, #136]	; (800aeb0 <ROM_NES_R+0x12c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	1ae4      	subs	r4, r4, r3
		if (ROM_addr < v.CHR_ROM_size) {
 800ae2a:	4b21      	ldr	r3, [pc, #132]	; (800aeb0 <ROM_NES_R+0x12c>)
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	42a3      	cmp	r3, r4
 800ae30:	d92c      	bls.n	800ae8c <ROM_NES_R+0x108>

			// CHR-ROM handler
			if ((ROM_addr ^ old_CHR_bank) & v.CHR_bank_mask) {
 800ae32:	4b20      	ldr	r3, [pc, #128]	; (800aeb4 <ROM_NES_R+0x130>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	ea84 0203 	eor.w	r2, r4, r3
 800ae3a:	4b1d      	ldr	r3, [pc, #116]	; (800aeb0 <ROM_NES_R+0x12c>)
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00b      	beq.n	800ae5c <ROM_NES_R+0xd8>

				old_CHR_bank = ROM_addr;
 800ae44:	4b1b      	ldr	r3, [pc, #108]	; (800aeb4 <ROM_NES_R+0x130>)
 800ae46:	601c      	str	r4, [r3, #0]
				old_PRG_bank |= b31;
 800ae48:	4b16      	ldr	r3, [pc, #88]	; (800aea4 <ROM_NES_R+0x120>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae50:	4a14      	ldr	r2, [pc, #80]	; (800aea4 <ROM_NES_R+0x120>)
 800ae52:	6013      	str	r3, [r2, #0]
				map.CHR_B (ROM_addr);
 800ae54:	4b18      	ldr	r3, [pc, #96]	; (800aeb8 <ROM_NES_R+0x134>)
 800ae56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae58:	4620      	mov	r0, r4
 800ae5a:	4798      	blx	r3
			}
			ROM_addr &= v.CHR_mask;
 800ae5c:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <ROM_NES_R+0x12c>)
 800ae5e:	8a9b      	ldrh	r3, [r3, #20]
 800ae60:	401c      	ands	r4, r3
			ROM_addr += info.r.CHR_bank_ofs;
 800ae62:	4b12      	ldr	r3, [pc, #72]	; (800aeac <ROM_NES_R+0x128>)
 800ae64:	8a5b      	ldrh	r3, [r3, #18]
 800ae66:	441c      	add	r4, r3
			register unsigned int i = 16;
 800ae68:	2610      	movs	r6, #16
			do {

				buf.byte [0] = chr_src (ROM_addr ++); //PPU_R (ROM_addr++);
 800ae6a:	46c1      	mov	r9, r8
 800ae6c:	4b13      	ldr	r3, [pc, #76]	; (800aebc <ROM_NES_R+0x138>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4622      	mov	r2, r4
 800ae72:	1c54      	adds	r4, r2, #1
 800ae74:	4610      	mov	r0, r2
 800ae76:	4798      	blx	r3
 800ae78:	4603      	mov	r3, r0
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f889 3000 	strb.w	r3, [r9]
				buf.byte++;
 800ae80:	4643      	mov	r3, r8
 800ae82:	3301      	adds	r3, #1
 800ae84:	4698      	mov	r8, r3

			} while (--i);
 800ae86:	3e01      	subs	r6, #1
 800ae88:	2e00      	cmp	r6, #0
 800ae8a:	d1ee      	bne.n	800ae6a <ROM_NES_R+0xe6>
		}

	} while (--cnt);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	607b      	str	r3, [r7, #4]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d185      	bne.n	800ada4 <ROM_NES_R+0x20>
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aea2:	bf00      	nop
 800aea4:	20002aec 	.word	0x20002aec
 800aea8:	20002b74 	.word	0x20002b74
 800aeac:	2000288c 	.word	0x2000288c
 800aeb0:	200034cc 	.word	0x200034cc
 800aeb4:	2000350c 	.word	0x2000350c
 800aeb8:	20002aac 	.word	0x20002aac
 800aebc:	2000352c 	.word	0x2000352c

0800aec0 <ROM_SAV_R>:
	do PPU_W (ROM_addr + i, buf.byte [i]);
	while (++i < 512);

}
*/
void ROM_SAV_R (register ptr_all_types buf, register uint32_t ROM_addr) {
 800aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	4680      	mov	r8, r0
 800aec8:	460c      	mov	r4, r1

	ROM_addr <<= 9;
 800aeca:	0264      	lsls	r4, r4, #9
	if ((ROM_addr ^ old_SAV_bank) & v.SAV_bank_mask) {
 800aecc:	4b13      	ldr	r3, [pc, #76]	; (800af1c <ROM_SAV_R+0x5c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	ea84 0203 	eor.w	r2, r4, r3
 800aed4:	4b12      	ldr	r3, [pc, #72]	; (800af20 <ROM_SAV_R+0x60>)
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	4013      	ands	r3, r2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <ROM_SAV_R+0x2a>

		old_SAV_bank = ROM_addr;
 800aede:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <ROM_SAV_R+0x5c>)
 800aee0:	601c      	str	r4, [r3, #0]
		map.SAV_B (ROM_addr);
 800aee2:	4b10      	ldr	r3, [pc, #64]	; (800af24 <ROM_SAV_R+0x64>)
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	4620      	mov	r0, r4
 800aee8:	4798      	blx	r3

	}
	ROM_addr &= v.SAV_mask;
 800aeea:	4b0d      	ldr	r3, [pc, #52]	; (800af20 <ROM_SAV_R+0x60>)
 800aeec:	8c1b      	ldrh	r3, [r3, #32]
 800aeee:	401c      	ands	r4, r3
	ROM_addr += map.SAV_base;
 800aef0:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <ROM_SAV_R+0x64>)
 800aef2:	885b      	ldrh	r3, [r3, #2]
 800aef4:	441c      	add	r4, r3
	register unsigned int i = 0;
 800aef6:	2500      	movs	r5, #0
	do buf.byte [i] = sram_src_R (ROM_addr + i);
 800aef8:	4643      	mov	r3, r8
 800aefa:	195e      	adds	r6, r3, r5
 800aefc:	4b0a      	ldr	r3, [pc, #40]	; (800af28 <ROM_SAV_R+0x68>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	1962      	adds	r2, r4, r5
 800af02:	4610      	mov	r0, r2
 800af04:	4798      	blx	r3
 800af06:	4603      	mov	r3, r0
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	7033      	strb	r3, [r6, #0]
	while (++i < 512);
 800af0c:	3501      	adds	r5, #1
 800af0e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800af12:	d3f1      	bcc.n	800aef8 <ROM_SAV_R+0x38>

}
 800af14:	bf00      	nop
 800af16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af1a:	bf00      	nop
 800af1c:	200030b0 	.word	0x200030b0
 800af20:	200034cc 	.word	0x200034cc
 800af24:	20002aac 	.word	0x20002aac
 800af28:	20003510 	.word	0x20003510

0800af2c <ROM_SAV_W>:

void ROM_SAV_W (register ptr_all_types buf, register uint32_t ROM_addr) {
 800af2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2e:	af00      	add	r7, sp, #0
 800af30:	4606      	mov	r6, r0
 800af32:	460c      	mov	r4, r1

	ROM_addr <<= 9;
 800af34:	0264      	lsls	r4, r4, #9
	if ((ROM_addr ^ old_SAV_bank) & v.SAV_bank_mask) {
 800af36:	4b13      	ldr	r3, [pc, #76]	; (800af84 <ROM_SAV_W+0x58>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	ea84 0203 	eor.w	r2, r4, r3
 800af3e:	4b12      	ldr	r3, [pc, #72]	; (800af88 <ROM_SAV_W+0x5c>)
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	4013      	ands	r3, r2
 800af44:	2b00      	cmp	r3, #0
 800af46:	d005      	beq.n	800af54 <ROM_SAV_W+0x28>

		old_SAV_bank = ROM_addr;
 800af48:	4b0e      	ldr	r3, [pc, #56]	; (800af84 <ROM_SAV_W+0x58>)
 800af4a:	601c      	str	r4, [r3, #0]
		map.SAV_B (ROM_addr);
 800af4c:	4b0f      	ldr	r3, [pc, #60]	; (800af8c <ROM_SAV_W+0x60>)
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	4620      	mov	r0, r4
 800af52:	4798      	blx	r3

	}
	ROM_addr += v.SAV_ofs;
 800af54:	4b0c      	ldr	r3, [pc, #48]	; (800af88 <ROM_SAV_W+0x5c>)
 800af56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800af58:	441c      	add	r4, r3
	ROM_addr &= v.SAV_mask;
 800af5a:	4b0b      	ldr	r3, [pc, #44]	; (800af88 <ROM_SAV_W+0x5c>)
 800af5c:	8c1b      	ldrh	r3, [r3, #32]
 800af5e:	401c      	ands	r4, r3
	ROM_addr += map.SAV_base;
 800af60:	4b0a      	ldr	r3, [pc, #40]	; (800af8c <ROM_SAV_W+0x60>)
 800af62:	885b      	ldrh	r3, [r3, #2]
 800af64:	441c      	add	r4, r3
	register unsigned int i = 0;
 800af66:	2500      	movs	r5, #0
	do sram_src_W (ROM_addr + i, buf.byte [i]);
 800af68:	4b09      	ldr	r3, [pc, #36]	; (800af90 <ROM_SAV_W+0x64>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	1960      	adds	r0, r4, r5
 800af6e:	4632      	mov	r2, r6
 800af70:	442a      	add	r2, r5
 800af72:	7812      	ldrb	r2, [r2, #0]
 800af74:	4611      	mov	r1, r2
 800af76:	4798      	blx	r3
	while (++i < 512);
 800af78:	3501      	adds	r5, #1
 800af7a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800af7e:	d3f3      	bcc.n	800af68 <ROM_SAV_W+0x3c>

}
 800af80:	bf00      	nop
 800af82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af84:	200030b0 	.word	0x200030b0
 800af88:	200034cc 	.word	0x200034cc
 800af8c:	20002aac 	.word	0x20002aac
 800af90:	20003664 	.word	0x20003664

0800af94 <PRG_W_byte>:

static void PRG_W_byte (register unsigned int addr, register unsigned int data) {
 800af94:	b5b0      	push	{r4, r5, r7, lr}
 800af96:	af00      	add	r7, sp, #0
 800af98:	4604      	mov	r4, r0
 800af9a:	460d      	mov	r5, r1

	if ((addr ^ old_PRG_bank) & v.PRG_bank_mask) {
 800af9c:	4b1a      	ldr	r3, [pc, #104]	; (800b008 <PRG_W_byte+0x74>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	ea84 0203 	eor.w	r2, r4, r3
 800afa4:	4b19      	ldr	r3, [pc, #100]	; (800b00c <PRG_W_byte+0x78>)
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	4013      	ands	r3, r2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d005      	beq.n	800afba <PRG_W_byte+0x26>

		old_PRG_bank = addr;
 800afae:	4b16      	ldr	r3, [pc, #88]	; (800b008 <PRG_W_byte+0x74>)
 800afb0:	601c      	str	r4, [r3, #0]
//		old_CHR_bank |= b31;
		map.PRG_B (addr);
 800afb2:	4b17      	ldr	r3, [pc, #92]	; (800b010 <PRG_W_byte+0x7c>)
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	4620      	mov	r0, r4
 800afb8:	4798      	blx	r3

	}
	addr &= v.PRG_mask;
 800afba:	4b14      	ldr	r3, [pc, #80]	; (800b00c <PRG_W_byte+0x78>)
 800afbc:	891b      	ldrh	r3, [r3, #8]
 800afbe:	401c      	ands	r4, r3
	addr += info.r.PRG_bank_ofs;
 800afc0:	4b14      	ldr	r3, [pc, #80]	; (800b014 <PRG_W_byte+0x80>)
 800afc2:	8a1b      	ldrh	r3, [r3, #16]
 800afc4:	441c      	add	r4, r3

	// phase 1: data & address setup
	GPIOB->ODR = (data << 8) | (addr & 255);			// data and low address
 800afc6:	4914      	ldr	r1, [pc, #80]	; (800b018 <PRG_W_byte+0x84>)
 800afc8:	022a      	lsls	r2, r5, #8
 800afca:	b2e3      	uxtb	r3, r4
 800afcc:	4313      	orrs	r3, r2
 800afce:	60cb      	str	r3, [r1, #12]
	GPIOA->ODR = ((addr >> 8) & 0x7F)					// high address
 800afd0:	4a12      	ldr	r2, [pc, #72]	; (800b01c <PRG_W_byte+0x88>)
 800afd2:	0a23      	lsrs	r3, r4, #8
				| ROMSEL | PPU_RD | PPU_WR				// control signals
 800afd4:	b2db      	uxtb	r3, r3
				| 0x2400;								// pull-up for IRQ & NT.A10
 800afd6:	f443 4364 	orr.w	r3, r3, #58368	; 0xe400
 800afda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	GPIOA->ODR = ((addr >> 8) & 0x7F)					// high address
 800afde:	60d3      	str	r3, [r2, #12]

	// phase 2: assert clock line(s) and enable output register
	GPIOB->CRH = 0x33333333;							// enable data bus if addr in $0000 - $7FFF
 800afe0:	4b0d      	ldr	r3, [pc, #52]	; (800b018 <PRG_W_byte+0x84>)
 800afe2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800afe6:	605a      	str	r2, [r3, #4]
	GPIOA->BSRR = ((addr << 8) & 0x800000) | M2;		// enable M2 and /ROMSEL if A15 = 1
 800afe8:	4a0c      	ldr	r2, [pc, #48]	; (800b01c <PRG_W_byte+0x88>)
 800afea:	0223      	lsls	r3, r4, #8
 800afec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aff4:	6113      	str	r3, [r2, #16]

	//phase 3: negate clock line and disable output register
	GPIOA->BSRR = M2 << 16 | ROMSEL;					// clear M2 and set ROMSEL
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <PRG_W_byte+0x88>)
 800aff8:	4a09      	ldr	r2, [pc, #36]	; (800b020 <PRG_W_byte+0x8c>)
 800affa:	611a      	str	r2, [r3, #16]
	GPIOB->CRH = 0x44444444;							// disable data bus
 800affc:	4b06      	ldr	r3, [pc, #24]	; (800b018 <PRG_W_byte+0x84>)
 800affe:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 800b002:	605a      	str	r2, [r3, #4]

}
 800b004:	bf00      	nop
 800b006:	bdb0      	pop	{r4, r5, r7, pc}
 800b008:	20002aec 	.word	0x20002aec
 800b00c:	200034cc 	.word	0x200034cc
 800b010:	20002aac 	.word	0x20002aac
 800b014:	2000288c 	.word	0x2000288c
 800b018:	40010c00 	.word	0x40010c00
 800b01c:	40010800 	.word	0x40010800
 800b020:	01000080 	.word	0x01000080

0800b024 <PRG_BIN_W>:

static void PRG_BIN_W (register ptr_all_types buf, register uint32_t file_ofs) {
 800b024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4682      	mov	sl, r0
 800b02c:	4688      	mov	r8, r1

	// check the power situation
	check_power_OK ();
 800b02e:	f7fd fa3f 	bl	80084b0 <check_power_OK>

	// precalculations
	register uint32_t ROM_addr		= file_ofs << 9;
 800b032:	ea4f 2648 	mov.w	r6, r8, lsl #9
	register uint32_t CPU_addr		= info.r.PRG_bank_ofs + (ROM_addr & v.PRG_mask);
 800b036:	4b41      	ldr	r3, [pc, #260]	; (800b13c <PRG_BIN_W+0x118>)
 800b038:	8a1b      	ldrh	r3, [r3, #16]
 800b03a:	461a      	mov	r2, r3
 800b03c:	4b40      	ldr	r3, [pc, #256]	; (800b140 <PRG_BIN_W+0x11c>)
 800b03e:	891b      	ldrh	r3, [r3, #8]
 800b040:	4033      	ands	r3, r6
 800b042:	18d5      	adds	r5, r2, r3
	register uint32_t flash__sector	= file_ofs >> 3;
 800b044:	ea4f 04d8 	mov.w	r4, r8, lsr #3
	register uint32_t offset_sector	= file_ofs &  7;
 800b048:	f008 0807 	and.w	r8, r8, #7

	// check if sector has been erased
	if (!(PRG_erase [flash__sector] >> offset_sector & 1)) {					//	check if sector has already been erased
 800b04c:	4b3d      	ldr	r3, [pc, #244]	; (800b144 <PRG_BIN_W+0x120>)
 800b04e:	5d1b      	ldrb	r3, [r3, r4]
 800b050:	fa43 f308 	asr.w	r3, r3, r8
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d12e      	bne.n	800b0ba <PRG_BIN_W+0x96>

		// invoke the sector erase command
		PRG_W_byte (0x5555, 0xAA);	PRG_W_byte (0x2AAA, 0x55);	PRG_W_byte (0x5555	, 0x80);
 800b05c:	21aa      	movs	r1, #170	; 0xaa
 800b05e:	f245 5055 	movw	r0, #21845	; 0x5555
 800b062:	f7ff ff97 	bl	800af94 <PRG_W_byte>
 800b066:	2155      	movs	r1, #85	; 0x55
 800b068:	f642 20aa 	movw	r0, #10922	; 0x2aaa
 800b06c:	f7ff ff92 	bl	800af94 <PRG_W_byte>
 800b070:	2180      	movs	r1, #128	; 0x80
 800b072:	f245 5055 	movw	r0, #21845	; 0x5555
 800b076:	f7ff ff8d 	bl	800af94 <PRG_W_byte>
		PRG_W_byte (0x5555, 0xAA);	PRG_W_byte (0x2AAA, 0x55);	PRG_W_byte (ROM_addr, 0x30);
 800b07a:	21aa      	movs	r1, #170	; 0xaa
 800b07c:	f245 5055 	movw	r0, #21845	; 0x5555
 800b080:	f7ff ff88 	bl	800af94 <PRG_W_byte>
 800b084:	2155      	movs	r1, #85	; 0x55
 800b086:	f642 20aa 	movw	r0, #10922	; 0x2aaa
 800b08a:	f7ff ff83 	bl	800af94 <PRG_W_byte>
 800b08e:	2130      	movs	r1, #48	; 0x30
 800b090:	4630      	mov	r0, r6
 800b092:	f7ff ff7f 	bl	800af94 <PRG_W_byte>

		// wait for command to complete
		while ((CPU_R (CPU_addr) ^ CPU_R (CPU_addr)) & 0x40);					//	wait using toggle bit
 800b096:	bf00      	nop
 800b098:	4628      	mov	r0, r5
 800b09a:	f7fd fa65 	bl	8008568 <CPU_R>
 800b09e:	4681      	mov	r9, r0
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	f7fd fa61 	bl	8008568 <CPU_R>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	ea89 0303 	eor.w	r3, r9, r3
 800b0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1f1      	bne.n	800b098 <PRG_BIN_W+0x74>
		PRG_erase [flash__sector] = 0xFF;										//	set 8 bits to indicate 4KB is now erased & ready to program
 800b0b4:	4b23      	ldr	r3, [pc, #140]	; (800b144 <PRG_BIN_W+0x120>)
 800b0b6:	22ff      	movs	r2, #255	; 0xff
 800b0b8:	551a      	strb	r2, [r3, r4]

	}
	//	do the byte programming
	PRG_erase [flash__sector] &= ~(1 << offset_sector);							//	clear the erased bit
 800b0ba:	4b22      	ldr	r3, [pc, #136]	; (800b144 <PRG_BIN_W+0x120>)
 800b0bc:	5d1b      	ldrb	r3, [r3, r4]
 800b0be:	b25a      	sxtb	r2, r3
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	fa03 f308 	lsl.w	r3, r3, r8
 800b0c6:	b25b      	sxtb	r3, r3
 800b0c8:	43db      	mvns	r3, r3
 800b0ca:	b25b      	sxtb	r3, r3
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	b25b      	sxtb	r3, r3
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <PRG_BIN_W+0x120>)
 800b0d4:	551a      	strb	r2, [r3, r4]
	for (register int a = 0; a < 512; a ++, CPU_addr ++) {
 800b0d6:	2400      	movs	r4, #0
 800b0d8:	e029      	b.n	800b12e <PRG_BIN_W+0x10a>

		// invoke the programming sequence
		PRG_W_byte (0x5555		, 0xAA			);
 800b0da:	21aa      	movs	r1, #170	; 0xaa
 800b0dc:	f245 5055 	movw	r0, #21845	; 0x5555
 800b0e0:	f7ff ff58 	bl	800af94 <PRG_W_byte>
		PRG_W_byte (0x2AAA		, 0x55			);
 800b0e4:	2155      	movs	r1, #85	; 0x55
 800b0e6:	f642 20aa 	movw	r0, #10922	; 0x2aaa
 800b0ea:	f7ff ff53 	bl	800af94 <PRG_W_byte>
		PRG_W_byte (0x5555		, 0xA0			);
 800b0ee:	21a0      	movs	r1, #160	; 0xa0
 800b0f0:	f245 5055 	movw	r0, #21845	; 0x5555
 800b0f4:	f7ff ff4e 	bl	800af94 <PRG_W_byte>
		PRG_W_byte (ROM_addr + a, buf.byte [a]	);
 800b0f8:	4623      	mov	r3, r4
 800b0fa:	18f2      	adds	r2, r6, r3
 800b0fc:	4651      	mov	r1, sl
 800b0fe:	4623      	mov	r3, r4
 800b100:	440b      	add	r3, r1
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	4619      	mov	r1, r3
 800b106:	4610      	mov	r0, r2
 800b108:	f7ff ff44 	bl	800af94 <PRG_W_byte>

		// wait for command to complete
		while ((CPU_R (CPU_addr) ^ CPU_R (CPU_addr)) & 0x40);					//	wait using toggle bit
 800b10c:	bf00      	nop
 800b10e:	4628      	mov	r0, r5
 800b110:	f7fd fa2a 	bl	8008568 <CPU_R>
 800b114:	4680      	mov	r8, r0
 800b116:	4628      	mov	r0, r5
 800b118:	f7fd fa26 	bl	8008568 <CPU_R>
 800b11c:	4603      	mov	r3, r0
 800b11e:	ea88 0303 	eor.w	r3, r8, r3
 800b122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1f1      	bne.n	800b10e <PRG_BIN_W+0xea>
	for (register int a = 0; a < 512; a ++, CPU_addr ++) {
 800b12a:	3401      	adds	r4, #1
 800b12c:	3501      	adds	r5, #1
 800b12e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800b132:	dbd2      	blt.n	800b0da <PRG_BIN_W+0xb6>

	}
}
 800b134:	bf00      	nop
 800b136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b13a:	bf00      	nop
 800b13c:	2000288c 	.word	0x2000288c
 800b140:	200034cc 	.word	0x200034cc
 800b144:	20002af4 	.word	0x20002af4

0800b148 <CHR_W_byte>:

static void CHR_W_byte (register int addr, register int data) {
 800b148:	b5b0      	push	{r4, r5, r7, lr}
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	4604      	mov	r4, r0
 800b14e:	460d      	mov	r5, r1

	if ((addr ^ old_CHR_bank) & v.CHR_bank_mask) {
 800b150:	4622      	mov	r2, r4
 800b152:	4b1e      	ldr	r3, [pc, #120]	; (800b1cc <CHR_W_byte+0x84>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	405a      	eors	r2, r3
 800b158:	4b1d      	ldr	r3, [pc, #116]	; (800b1d0 <CHR_W_byte+0x88>)
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	4013      	ands	r3, r2
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d007      	beq.n	800b172 <CHR_W_byte+0x2a>

		old_CHR_bank = addr;
 800b162:	4622      	mov	r2, r4
 800b164:	4b19      	ldr	r3, [pc, #100]	; (800b1cc <CHR_W_byte+0x84>)
 800b166:	601a      	str	r2, [r3, #0]
//		old_PRG_bank |= b31;
		map.CHR_B (addr);
 800b168:	4b1a      	ldr	r3, [pc, #104]	; (800b1d4 <CHR_W_byte+0x8c>)
 800b16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16c:	4622      	mov	r2, r4
 800b16e:	4610      	mov	r0, r2
 800b170:	4798      	blx	r3

	}
	addr &= v.CHR_mask;
 800b172:	4b17      	ldr	r3, [pc, #92]	; (800b1d0 <CHR_W_byte+0x88>)
 800b174:	8a9b      	ldrh	r3, [r3, #20]
 800b176:	401c      	ands	r4, r3
	addr += info.r.CHR_bank_ofs;
 800b178:	4b17      	ldr	r3, [pc, #92]	; (800b1d8 <CHR_W_byte+0x90>)
 800b17a:	8a5b      	ldrh	r3, [r3, #18]
 800b17c:	441c      	add	r4, r3

	// phase 1: data & address setup
	GPIOB->ODR = (data << 8) | (addr & 255);			// data and low address
 800b17e:	4917      	ldr	r1, [pc, #92]	; (800b1dc <CHR_W_byte+0x94>)
 800b180:	022a      	lsls	r2, r5, #8
 800b182:	b2e3      	uxtb	r3, r4
 800b184:	4313      	orrs	r3, r2
 800b186:	60cb      	str	r3, [r1, #12]
	GPIOA->ODR = ((~addr >> 7) & 0x40)					// inverted A13
 800b188:	4915      	ldr	r1, [pc, #84]	; (800b1e0 <CHR_W_byte+0x98>)
 800b18a:	43e3      	mvns	r3, r4
 800b18c:	11db      	asrs	r3, r3, #7
 800b18e:	f003 0240 	and.w	r2, r3, #64	; 0x40
				| ((addr >> 8) & 0x3F)					// high address
 800b192:	1223      	asrs	r3, r4, #8
 800b194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b198:	4313      	orrs	r3, r2
				| ROMSEL | CPU_RW | PPU_RD | PPU_WR		// control signals
				| 0x2400;  								// pull-up for IRQ & NT.A10
 800b19a:	f443 4366 	orr.w	r3, r3, #58880	; 0xe600
 800b19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	GPIOA->ODR = ((~addr >> 7) & 0x40)					// inverted A13
 800b1a2:	60cb      	str	r3, [r1, #12]

	// phase 2: assert clock line and enable output register
	GPIOB->CRH = 0x33333333;							// enable data bus
 800b1a4:	4b0d      	ldr	r3, [pc, #52]	; (800b1dc <CHR_W_byte+0x94>)
 800b1a6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800b1aa:	605a      	str	r2, [r3, #4]
	asm ("nop\n nop\n");								// fixup to match PRG section timing
 800b1ac:	bf00      	nop
 800b1ae:	bf00      	nop
	GPIOA->BRR = PPU_WR;
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <CHR_W_byte+0x98>)
 800b1b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b1b6:	615a      	str	r2, [r3, #20]

	//phase 3: negate clock line
	GPIOA->BSRR = PPU_WR;
 800b1b8:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <CHR_W_byte+0x98>)
 800b1ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b1be:	611a      	str	r2, [r3, #16]

	//phase 4: cool down
	GPIOB->CRH = 0x44444444;
 800b1c0:	4b06      	ldr	r3, [pc, #24]	; (800b1dc <CHR_W_byte+0x94>)
 800b1c2:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 800b1c6:	605a      	str	r2, [r3, #4]

}
 800b1c8:	bf00      	nop
 800b1ca:	bdb0      	pop	{r4, r5, r7, pc}
 800b1cc:	2000350c 	.word	0x2000350c
 800b1d0:	200034cc 	.word	0x200034cc
 800b1d4:	20002aac 	.word	0x20002aac
 800b1d8:	2000288c 	.word	0x2000288c
 800b1dc:	40010c00 	.word	0x40010c00
 800b1e0:	40010800 	.word	0x40010800

0800b1e4 <CHR_BIN_W>:

static void CHR_BIN_W (register ptr_all_types buf, register uint32_t file_ofs) {
 800b1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4682      	mov	sl, r0
 800b1ec:	4688      	mov	r8, r1

	// check the power situation
	check_power_OK ();
 800b1ee:	f7fd f95f 	bl	80084b0 <check_power_OK>

	// precalculations
	register uint32_t ROM_addr		= file_ofs << 9;
 800b1f2:	ea4f 2648 	mov.w	r6, r8, lsl #9
	register uint32_t PPU_addr		= info.r.CHR_bank_ofs + (ROM_addr & v.CHR_mask);
 800b1f6:	4b41      	ldr	r3, [pc, #260]	; (800b2fc <CHR_BIN_W+0x118>)
 800b1f8:	8a5b      	ldrh	r3, [r3, #18]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	4b40      	ldr	r3, [pc, #256]	; (800b300 <CHR_BIN_W+0x11c>)
 800b1fe:	8a9b      	ldrh	r3, [r3, #20]
 800b200:	4033      	ands	r3, r6
 800b202:	18d5      	adds	r5, r2, r3
	register uint32_t flash__sector	= file_ofs >> 3;
 800b204:	ea4f 04d8 	mov.w	r4, r8, lsr #3
	register uint32_t offset_sector	= file_ofs &  7;
 800b208:	f008 0807 	and.w	r8, r8, #7

	// check if sector has been erased
	if (!(CHR_erase [flash__sector] >> offset_sector & 1)) {					//	check if sector has already been erased
 800b20c:	4b3d      	ldr	r3, [pc, #244]	; (800b304 <CHR_BIN_W+0x120>)
 800b20e:	5d1b      	ldrb	r3, [r3, r4]
 800b210:	fa43 f308 	asr.w	r3, r3, r8
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d12f      	bne.n	800b27c <CHR_BIN_W+0x98>

		// invoke the sector erase command
		CHR_W_byte (0x5555, 0xAA);	CHR_W_byte (0x2AAA, 0x55);	CHR_W_byte (0x5555	, 0x80);
 800b21c:	21aa      	movs	r1, #170	; 0xaa
 800b21e:	f245 5055 	movw	r0, #21845	; 0x5555
 800b222:	f7ff ff91 	bl	800b148 <CHR_W_byte>
 800b226:	2155      	movs	r1, #85	; 0x55
 800b228:	f642 20aa 	movw	r0, #10922	; 0x2aaa
 800b22c:	f7ff ff8c 	bl	800b148 <CHR_W_byte>
 800b230:	2180      	movs	r1, #128	; 0x80
 800b232:	f245 5055 	movw	r0, #21845	; 0x5555
 800b236:	f7ff ff87 	bl	800b148 <CHR_W_byte>
		CHR_W_byte (0x5555, 0xAA);	CHR_W_byte (0x2AAA, 0x55);	CHR_W_byte (ROM_addr, 0x30);
 800b23a:	21aa      	movs	r1, #170	; 0xaa
 800b23c:	f245 5055 	movw	r0, #21845	; 0x5555
 800b240:	f7ff ff82 	bl	800b148 <CHR_W_byte>
 800b244:	2155      	movs	r1, #85	; 0x55
 800b246:	f642 20aa 	movw	r0, #10922	; 0x2aaa
 800b24a:	f7ff ff7d 	bl	800b148 <CHR_W_byte>
 800b24e:	4633      	mov	r3, r6
 800b250:	2130      	movs	r1, #48	; 0x30
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff ff78 	bl	800b148 <CHR_W_byte>

		// wait for command to complete
		while ((PPU_R (PPU_addr) ^ PPU_R (PPU_addr)) & 0x40);					//	wait using toggle bit
 800b258:	bf00      	nop
 800b25a:	4628      	mov	r0, r5
 800b25c:	f7fd fa02 	bl	8008664 <PPU_R>
 800b260:	4681      	mov	r9, r0
 800b262:	4628      	mov	r0, r5
 800b264:	f7fd f9fe 	bl	8008664 <PPU_R>
 800b268:	4603      	mov	r3, r0
 800b26a:	ea89 0303 	eor.w	r3, r9, r3
 800b26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1f1      	bne.n	800b25a <CHR_BIN_W+0x76>
		CHR_erase [flash__sector] = 0xFF;										//	set 8 bits to indicate 4KB is now erased & ready to program
 800b276:	4b23      	ldr	r3, [pc, #140]	; (800b304 <CHR_BIN_W+0x120>)
 800b278:	22ff      	movs	r2, #255	; 0xff
 800b27a:	551a      	strb	r2, [r3, r4]

	}
	//	do the byte programming
	CHR_erase [flash__sector] &= ~(1 << offset_sector);							//	clear the erased bit
 800b27c:	4b21      	ldr	r3, [pc, #132]	; (800b304 <CHR_BIN_W+0x120>)
 800b27e:	5d1b      	ldrb	r3, [r3, r4]
 800b280:	b25a      	sxtb	r2, r3
 800b282:	2301      	movs	r3, #1
 800b284:	fa03 f308 	lsl.w	r3, r3, r8
 800b288:	b25b      	sxtb	r3, r3
 800b28a:	43db      	mvns	r3, r3
 800b28c:	b25b      	sxtb	r3, r3
 800b28e:	4013      	ands	r3, r2
 800b290:	b25b      	sxtb	r3, r3
 800b292:	b2da      	uxtb	r2, r3
 800b294:	4b1b      	ldr	r3, [pc, #108]	; (800b304 <CHR_BIN_W+0x120>)
 800b296:	551a      	strb	r2, [r3, r4]
	for (register int a = 0; a < 512; a ++, PPU_addr ++) {
 800b298:	2400      	movs	r4, #0
 800b29a:	e029      	b.n	800b2f0 <CHR_BIN_W+0x10c>

		// invoke the programming sequence
		CHR_W_byte (0x5555		, 0xAA			);
 800b29c:	21aa      	movs	r1, #170	; 0xaa
 800b29e:	f245 5055 	movw	r0, #21845	; 0x5555
 800b2a2:	f7ff ff51 	bl	800b148 <CHR_W_byte>
		CHR_W_byte (0x2AAA		, 0x55			);
 800b2a6:	2155      	movs	r1, #85	; 0x55
 800b2a8:	f642 20aa 	movw	r0, #10922	; 0x2aaa
 800b2ac:	f7ff ff4c 	bl	800b148 <CHR_W_byte>
		CHR_W_byte (0x5555		, 0xA0			);
 800b2b0:	21a0      	movs	r1, #160	; 0xa0
 800b2b2:	f245 5055 	movw	r0, #21845	; 0x5555
 800b2b6:	f7ff ff47 	bl	800b148 <CHR_W_byte>
		CHR_W_byte (ROM_addr + a, buf.byte [a]	);
 800b2ba:	4623      	mov	r3, r4
 800b2bc:	4433      	add	r3, r6
 800b2be:	4618      	mov	r0, r3
 800b2c0:	4652      	mov	r2, sl
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	4413      	add	r3, r2
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	f7ff ff3d 	bl	800b148 <CHR_W_byte>

		// wait for command to complete
		while ((PPU_R (PPU_addr) ^ PPU_R (PPU_addr)) & 0x40);					//	wait using toggle bit
 800b2ce:	bf00      	nop
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f7fd f9c7 	bl	8008664 <PPU_R>
 800b2d6:	4680      	mov	r8, r0
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f7fd f9c3 	bl	8008664 <PPU_R>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	ea88 0303 	eor.w	r3, r8, r3
 800b2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1f1      	bne.n	800b2d0 <CHR_BIN_W+0xec>
	for (register int a = 0; a < 512; a ++, PPU_addr ++) {
 800b2ec:	3401      	adds	r4, #1
 800b2ee:	3501      	adds	r5, #1
 800b2f0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800b2f4:	dbd2      	blt.n	800b29c <CHR_BIN_W+0xb8>

	}
}
 800b2f6:	bf00      	nop
 800b2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fc:	2000288c 	.word	0x2000288c
 800b300:	200034cc 	.word	0x200034cc
 800b304:	20003668 	.word	0x20003668

0800b308 <PPU_mirroring_test>:

//***************************************************************************************
//*************** Misc. *****************************************************************
//***************************************************************************************

uint32_t PPU_mirroring_test (register int i) {
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	4606      	mov	r6, r0
	register uint32_t t = 0xC5;		//	test pattern - zero terminating
 800b30e:	25c5      	movs	r5, #197	; 0xc5
	register uint32_t v = t << 13;	//	result buffer
 800b310:	036c      	lsls	r4, r5, #13
	if (ASIC_types [i].reserved_3 & 128)	return ASIC_types [i].MIR_.test (0);		//	mirroring test override
 800b312:	4a17      	ldr	r2, [pc, #92]	; (800b370 <PPU_mirroring_test+0x68>)
 800b314:	01b3      	lsls	r3, r6, #6
 800b316:	4413      	add	r3, r2
 800b318:	3310      	adds	r3, #16
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b320:	2b00      	cmp	r3, #0
 800b322:	d008      	beq.n	800b336 <PPU_mirroring_test+0x2e>
 800b324:	4a12      	ldr	r2, [pc, #72]	; (800b370 <PPU_mirroring_test+0x68>)
 800b326:	01b3      	lsls	r3, r6, #6
 800b328:	4413      	add	r3, r2
 800b32a:	331c      	adds	r3, #28
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2000      	movs	r0, #0
 800b330:	4798      	blx	r3
 800b332:	4603      	mov	r3, r0
 800b334:	e01a      	b.n	800b36c <PPU_mirroring_test+0x64>
	do {
		ASIC_types [i].MIR_.mirr (t);
 800b336:	4a0e      	ldr	r2, [pc, #56]	; (800b370 <PPU_mirroring_test+0x68>)
 800b338:	01b3      	lsls	r3, r6, #6
 800b33a:	4413      	add	r3, r2
 800b33c:	331c      	adds	r3, #28
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4628      	mov	r0, r5
 800b342:	4798      	blx	r3
		GPIOA->BSRR = 0x540028;		//	A11 = A13 = 1; A10 = A12 = /A13 = 0
 800b344:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <PPU_mirroring_test+0x6c>)
 800b346:	4a0c      	ldr	r2, [pc, #48]	; (800b378 <PPU_mirroring_test+0x70>)
 800b348:	611a      	str	r2, [r3, #16]
		chill (40);
 800b34a:	2028      	movs	r0, #40	; 0x28
 800b34c:	f7fd f80c 	bl	8008368 <chill>
		v ^= GPIOA->IDR & NT_A10; v >>= 1;
 800b350:	4b08      	ldr	r3, [pc, #32]	; (800b374 <PPU_mirroring_test+0x6c>)
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b358:	405c      	eors	r4, r3
 800b35a:	0864      	lsrs	r4, r4, #1
	} while (t >>= 1);
 800b35c:	086d      	lsrs	r5, r5, #1
 800b35e:	2d00      	cmp	r5, #0
 800b360:	d1e9      	bne.n	800b336 <PPU_mirroring_test+0x2e>
	return (!v);
 800b362:	2c00      	cmp	r4, #0
 800b364:	bf0c      	ite	eq
 800b366:	2301      	moveq	r3, #1
 800b368:	2300      	movne	r3, #0
 800b36a:	b2db      	uxtb	r3, r3
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b370:	0800e098 	.word	0x0800e098
 800b374:	40010800 	.word	0x40010800
 800b378:	00540028 	.word	0x00540028

0800b37c <PPU_mirroring_test_2>:

uint32_t PPU_mirroring_test_2 (register uint32_t A10, register uint32_t A11) {
 800b37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b380:	af00      	add	r7, sp, #0
 800b382:	4605      	mov	r5, r0
 800b384:	460e      	mov	r6, r1
	A10 <<= 4;
 800b386:	012d      	lsls	r5, r5, #4
	A11 <<= 4;
 800b388:	0136      	lsls	r6, r6, #4
	register uint32_t j = 0;
 800b38a:	2400      	movs	r4, #0
	for (register int i = 0; i < 8; i++) {
 800b38c:	f04f 0800 	mov.w	r8, #0
 800b390:	e01e      	b.n	800b3d0 <PPU_mirroring_test_2+0x54>
		GPIOA->BSRR = 0x40000 >> (A10 & 16) | 0x80000 >> (A11 & 16) | 0x500020; // sets A13 = 1 & A12,/A13 = 0
 800b392:	4913      	ldr	r1, [pc, #76]	; (800b3e0 <PPU_mirroring_test_2+0x64>)
 800b394:	f005 0310 	and.w	r3, r5, #16
 800b398:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b39c:	411a      	asrs	r2, r3
 800b39e:	f006 0310 	and.w	r3, r6, #16
 800b3a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b3a6:	fa40 f303 	asr.w	r3, r0, r3
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800b3b0:	f043 0320 	orr.w	r3, r3, #32
 800b3b4:	610b      	str	r3, [r1, #16]
		A10 >>= 1;
 800b3b6:	086d      	lsrs	r5, r5, #1
		A11 >>= 1;
 800b3b8:	0876      	lsrs	r6, r6, #1
		chill (40);
 800b3ba:	2028      	movs	r0, #40	; 0x28
 800b3bc:	f7fc ffd4 	bl	8008368 <chill>
		j >>= 1; j |= GPIOA->IDR & NT_A10;
 800b3c0:	0864      	lsrs	r4, r4, #1
 800b3c2:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <PPU_mirroring_test_2+0x64>)
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3ca:	431c      	orrs	r4, r3
	for (register int i = 0; i < 8; i++) {
 800b3cc:	f108 0801 	add.w	r8, r8, #1
 800b3d0:	f1b8 0f07 	cmp.w	r8, #7
 800b3d4:	dddd      	ble.n	800b392 <PPU_mirroring_test_2+0x16>
	}
	return (j >> 6);
 800b3d6:	09a3      	lsrs	r3, r4, #6
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3de:	bf00      	nop
 800b3e0:	40010800 	.word	0x40010800

0800b3e4 <scan_CHR>:

void scan_CHR (void) {
 800b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0

	info_5_mask = 0xff;
 800b3ec:	4b60      	ldr	r3, [pc, #384]	; (800b570 <scan_CHR+0x18c>)
 800b3ee:	22ff      	movs	r2, #255	; 0xff
 800b3f0:	701a      	strb	r2, [r3, #0]
//	CHR_bank_mask = 0;
	register uint32_t bank_size	= 1 << map.CHR_bank_size;
 800b3f2:	4b60      	ldr	r3, [pc, #384]	; (800b574 <scan_CHR+0x190>)
 800b3f4:	7a5b      	ldrb	r3, [r3, #9]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	4093      	lsls	r3, r2
 800b3fc:	4698      	mov	r8, r3
	v.CHR_mask					= bank_size - 1;
 800b3fe:	fa1f f388 	uxth.w	r3, r8
 800b402:	3b01      	subs	r3, #1
 800b404:	b29a      	uxth	r2, r3
 800b406:	4b5c      	ldr	r3, [pc, #368]	; (800b578 <scan_CHR+0x194>)
 800b408:	829a      	strh	r2, [r3, #20]
	register uint32_t bank_bits	= map.CHR_bank_size - 10;
 800b40a:	4b5a      	ldr	r3, [pc, #360]	; (800b574 <scan_CHR+0x190>)
 800b40c:	7a5b      	ldrb	r3, [r3, #9]
 800b40e:	3b0a      	subs	r3, #10
 800b410:	4699      	mov	r9, r3
	info.r.CHR_bank_ofs			= map.CHR_ofs << map.CHR_bank_size;
 800b412:	4b58      	ldr	r3, [pc, #352]	; (800b574 <scan_CHR+0x190>)
 800b414:	7a9b      	ldrb	r3, [r3, #10]
 800b416:	461a      	mov	r2, r3
 800b418:	4b56      	ldr	r3, [pc, #344]	; (800b574 <scan_CHR+0x190>)
 800b41a:	7a5b      	ldrb	r3, [r3, #9]
 800b41c:	fa02 f303 	lsl.w	r3, r2, r3
 800b420:	b29a      	uxth	r2, r3
 800b422:	4b56      	ldr	r3, [pc, #344]	; (800b57c <scan_CHR+0x198>)
 800b424:	825a      	strh	r2, [r3, #18]
	info.r.CHR_bank_bits		= map.CHR_bank_size;
 800b426:	4b53      	ldr	r3, [pc, #332]	; (800b574 <scan_CHR+0x190>)
 800b428:	7a5a      	ldrb	r2, [r3, #9]
 800b42a:	4b54      	ldr	r3, [pc, #336]	; (800b57c <scan_CHR+0x198>)
 800b42c:	765a      	strb	r2, [r3, #25]
	for (register uint32_t i = 1 << map.CHR_msb; i > bank_size; i >>= 1)
 800b42e:	4b51      	ldr	r3, [pc, #324]	; (800b574 <scan_CHR+0x190>)
 800b430:	7a1b      	ldrb	r3, [r3, #8]
 800b432:	461a      	mov	r2, r3
 800b434:	2301      	movs	r3, #1
 800b436:	4093      	lsls	r3, r2
 800b438:	461c      	mov	r4, r3
 800b43a:	e04a      	b.n	800b4d2 <scan_CHR+0xee>
		for (register uint32_t j = 0; j < i; j += bank_size) {
 800b43c:	2600      	movs	r6, #0
 800b43e:	e045      	b.n	800b4cc <scan_CHR+0xe8>
			map.CHR_B (i+j); for (register uint32_t k = 0; k < CHR_KEYS; k++)	  bank_sig [k]  = chr_src (info.r.CHR_bank_ofs + CHR_keys [bank_bits][k]);
 800b440:	4b4c      	ldr	r3, [pc, #304]	; (800b574 <scan_CHR+0x190>)
 800b442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b444:	19a2      	adds	r2, r4, r6
 800b446:	4610      	mov	r0, r2
 800b448:	4798      	blx	r3
 800b44a:	2500      	movs	r5, #0
 800b44c:	e012      	b.n	800b474 <scan_CHR+0x90>
 800b44e:	4b4c      	ldr	r3, [pc, #304]	; (800b580 <scan_CHR+0x19c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a4a      	ldr	r2, [pc, #296]	; (800b57c <scan_CHR+0x198>)
 800b454:	8a52      	ldrh	r2, [r2, #18]
 800b456:	4610      	mov	r0, r2
 800b458:	494a      	ldr	r1, [pc, #296]	; (800b584 <scan_CHR+0x1a0>)
 800b45a:	ea4f 1209 	mov.w	r2, r9, lsl #4
 800b45e:	442a      	add	r2, r5
 800b460:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800b464:	4402      	add	r2, r0
 800b466:	4610      	mov	r0, r2
 800b468:	4798      	blx	r3
 800b46a:	4603      	mov	r3, r0
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	4b46      	ldr	r3, [pc, #280]	; (800b588 <scan_CHR+0x1a4>)
 800b470:	555a      	strb	r2, [r3, r5]
 800b472:	3501      	adds	r5, #1
 800b474:	2d0f      	cmp	r5, #15
 800b476:	d9ea      	bls.n	800b44e <scan_CHR+0x6a>
			map.CHR_B (  j); for (register uint32_t k = 0; k < CHR_KEYS; k++) if (bank_sig [k] != chr_src (info.r.CHR_bank_ofs + CHR_keys [bank_bits][k])) {
 800b478:	4b3e      	ldr	r3, [pc, #248]	; (800b574 <scan_CHR+0x190>)
 800b47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47c:	4630      	mov	r0, r6
 800b47e:	4798      	blx	r3
 800b480:	2500      	movs	r5, #0
 800b482:	e020      	b.n	800b4c6 <scan_CHR+0xe2>
 800b484:	4b40      	ldr	r3, [pc, #256]	; (800b588 <scan_CHR+0x1a4>)
 800b486:	5d5b      	ldrb	r3, [r3, r5]
 800b488:	469a      	mov	sl, r3
 800b48a:	4b3d      	ldr	r3, [pc, #244]	; (800b580 <scan_CHR+0x19c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a3b      	ldr	r2, [pc, #236]	; (800b57c <scan_CHR+0x198>)
 800b490:	8a52      	ldrh	r2, [r2, #18]
 800b492:	4610      	mov	r0, r2
 800b494:	493b      	ldr	r1, [pc, #236]	; (800b584 <scan_CHR+0x1a0>)
 800b496:	ea4f 1209 	mov.w	r2, r9, lsl #4
 800b49a:	442a      	add	r2, r5
 800b49c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800b4a0:	4402      	add	r2, r0
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	4798      	blx	r3
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	459a      	cmp	sl, r3
 800b4aa:	d00b      	beq.n	800b4c4 <scan_CHR+0xe0>
				info.b [5] = i >> 12;
 800b4ac:	0b23      	lsrs	r3, r4, #12
 800b4ae:	b2da      	uxtb	r2, r3
 800b4b0:	4b32      	ldr	r3, [pc, #200]	; (800b57c <scan_CHR+0x198>)
 800b4b2:	715a      	strb	r2, [r3, #5]
				v.CHR_bank_mask = (i + i - bank_size) | b31;
 800b4b4:	1923      	adds	r3, r4, r4
 800b4b6:	eba3 0308 	sub.w	r3, r3, r8
 800b4ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4be:	4a2e      	ldr	r2, [pc, #184]	; (800b578 <scan_CHR+0x194>)
 800b4c0:	6113      	str	r3, [r2, #16]
				goto RAM_TEST;
 800b4c2:	e00b      	b.n	800b4dc <scan_CHR+0xf8>
			map.CHR_B (  j); for (register uint32_t k = 0; k < CHR_KEYS; k++) if (bank_sig [k] != chr_src (info.r.CHR_bank_ofs + CHR_keys [bank_bits][k])) {
 800b4c4:	3501      	adds	r5, #1
 800b4c6:	2d0f      	cmp	r5, #15
 800b4c8:	d9dc      	bls.n	800b484 <scan_CHR+0xa0>
		for (register uint32_t j = 0; j < i; j += bank_size) {
 800b4ca:	4446      	add	r6, r8
 800b4cc:	42a6      	cmp	r6, r4
 800b4ce:	d3b7      	bcc.n	800b440 <scan_CHR+0x5c>
	for (register uint32_t i = 1 << map.CHR_msb; i > bank_size; i >>= 1)
 800b4d0:	0864      	lsrs	r4, r4, #1
 800b4d2:	4544      	cmp	r4, r8
 800b4d4:	d8b2      	bhi.n	800b43c <scan_CHR+0x58>
			}
		}

	info_5_mask = 0;
 800b4d6:	4b26      	ldr	r3, [pc, #152]	; (800b570 <scan_CHR+0x18c>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	701a      	strb	r2, [r3, #0]
RAM_TEST:;

	// early exit for CHR-bypass types
	if (chr_src == CPU_R)	return;
 800b4dc:	4b28      	ldr	r3, [pc, #160]	; (800b580 <scan_CHR+0x19c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a2a      	ldr	r2, [pc, #168]	; (800b58c <scan_CHR+0x1a8>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d03f      	beq.n	800b566 <scan_CHR+0x182>

	//	try to read complimented data back
	char i = PPU_R (0x0000);						//	read in data from CHR-RAM test addresses
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	f7fd f8bc 	bl	8008664 <PPU_R>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	71fb      	strb	r3, [r7, #7]
	char j = PPU_R (0x0001);						//	2 addresses to remedy open-bus capacitance
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	f7fd f8b7 	bl	8008664 <PPU_R>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	71bb      	strb	r3, [r7, #6]
			 PPU_W (0x0000, ~i);					//	write out compliment
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	43db      	mvns	r3, r3
 800b4fe:	4619      	mov	r1, r3
 800b500:	2000      	movs	r0, #0
 800b502:	f7fd f8df 	bl	80086c4 <PPU_W>
			 PPU_W (0x0001,  i);					//	write true data to next address
 800b506:	79fb      	ldrb	r3, [r7, #7]
 800b508:	4619      	mov	r1, r3
 800b50a:	2001      	movs	r0, #1
 800b50c:	f7fd f8da 	bl	80086c4 <PPU_W>
	char k = PPU_R (0x0000) ^ 0xFF;
 800b510:	2000      	movs	r0, #0
 800b512:	f7fd f8a7 	bl	8008664 <PPU_R>
 800b516:	4603      	mov	r3, r0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	43db      	mvns	r3, r3
 800b51c:	717b      	strb	r3, [r7, #5]
	if 	(k == i) switch (map.map_no) {
 800b51e:	797a      	ldrb	r2, [r7, #5]
 800b520:	79fb      	ldrb	r3, [r7, #7]
 800b522:	429a      	cmp	r2, r3
 800b524:	d114      	bne.n	800b550 <scan_CHR+0x16c>
 800b526:	4b13      	ldr	r3, [pc, #76]	; (800b574 <scan_CHR+0x190>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00f      	beq.n	800b54e <scan_CHR+0x16a>
 800b52e:	2b05      	cmp	r3, #5
 800b530:	d00d      	beq.n	800b54e <scan_CHR+0x16a>
	//	bypass the test for RAM on RED PILL + MMC5 (experimental)
	case 0:
	case 5:		break;

	// disable the CHR ROM by setting it to 0
	default:	info.r.CHR_RAM_size		= 38 - __CLZ (info.b [5]);
 800b532:	4b12      	ldr	r3, [pc, #72]	; (800b57c <scan_CHR+0x198>)
 800b534:	795b      	ldrb	r3, [r3, #5]
 800b536:	fab3 f383 	clz	r3, r3
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	f1c3 0326 	rsb	r3, r3, #38	; 0x26
 800b540:	b2da      	uxtb	r2, r3
 800b542:	4b0e      	ldr	r3, [pc, #56]	; (800b57c <scan_CHR+0x198>)
 800b544:	72da      	strb	r2, [r3, #11]
				info.b [5]				= 0;
 800b546:	4b0d      	ldr	r3, [pc, #52]	; (800b57c <scan_CHR+0x198>)
 800b548:	2200      	movs	r2, #0
 800b54a:	715a      	strb	r2, [r3, #5]
 800b54c:	e000      	b.n	800b550 <scan_CHR+0x16c>
	case 5:		break;
 800b54e:	bf00      	nop

	}
	PPU_W (0x0000, i);								//	restore test bytes
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	4619      	mov	r1, r3
 800b554:	2000      	movs	r0, #0
 800b556:	f7fd f8b5 	bl	80086c4 <PPU_W>
	PPU_W (0x0001, j);								//	these have no effect on CHR-ROM
 800b55a:	79bb      	ldrb	r3, [r7, #6]
 800b55c:	4619      	mov	r1, r3
 800b55e:	2001      	movs	r0, #1
 800b560:	f7fd f8b0 	bl	80086c4 <PPU_W>
 800b564:	e000      	b.n	800b568 <scan_CHR+0x184>
	if (chr_src == CPU_R)	return;
 800b566:	bf00      	nop
}
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b570:	20002c78 	.word	0x20002c78
 800b574:	20002aac 	.word	0x20002aac
 800b578:	200034cc 	.word	0x200034cc
 800b57c:	2000288c 	.word	0x2000288c
 800b580:	2000352c 	.word	0x2000352c
 800b584:	0800df78 	.word	0x0800df78
 800b588:	2000351c 	.word	0x2000351c
 800b58c:	08008569 	.word	0x08008569

0800b590 <scan_PRG>:

void scan_PRG (void) {
 800b590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b594:	af00      	add	r7, sp, #0

	info_4_mask					= 0xFF;
 800b596:	4b3d      	ldr	r3, [pc, #244]	; (800b68c <scan_PRG+0xfc>)
 800b598:	22ff      	movs	r2, #255	; 0xff
 800b59a:	701a      	strb	r2, [r3, #0]
	register uint32_t bank_size	= 1 << map.PRG_bank_size;
 800b59c:	4b3c      	ldr	r3, [pc, #240]	; (800b690 <scan_PRG+0x100>)
 800b59e:	799b      	ldrb	r3, [r3, #6]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4093      	lsls	r3, r2
 800b5a6:	4698      	mov	r8, r3
	v.PRG_mask					= bank_size - 1;
 800b5a8:	fa1f f388 	uxth.w	r3, r8
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	4b38      	ldr	r3, [pc, #224]	; (800b694 <scan_PRG+0x104>)
 800b5b2:	811a      	strh	r2, [r3, #8]
	register uint32_t bank_bits	= map.PRG_bank_size - 13;
 800b5b4:	4b36      	ldr	r3, [pc, #216]	; (800b690 <scan_PRG+0x100>)
 800b5b6:	799b      	ldrb	r3, [r3, #6]
 800b5b8:	3b0d      	subs	r3, #13
 800b5ba:	4699      	mov	r9, r3
	info.r.PRG_bank_bits		= map.PRG_bank_size;
 800b5bc:	4b34      	ldr	r3, [pc, #208]	; (800b690 <scan_PRG+0x100>)
 800b5be:	799a      	ldrb	r2, [r3, #6]
 800b5c0:	4b35      	ldr	r3, [pc, #212]	; (800b698 <scan_PRG+0x108>)
 800b5c2:	761a      	strb	r2, [r3, #24]
	info.r.PRG_bank_ofs			= map.PRG_ofs << map.PRG_bank_size;
 800b5c4:	4b32      	ldr	r3, [pc, #200]	; (800b690 <scan_PRG+0x100>)
 800b5c6:	79db      	ldrb	r3, [r3, #7]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4b31      	ldr	r3, [pc, #196]	; (800b690 <scan_PRG+0x100>)
 800b5cc:	799b      	ldrb	r3, [r3, #6]
 800b5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	4b30      	ldr	r3, [pc, #192]	; (800b698 <scan_PRG+0x108>)
 800b5d6:	821a      	strh	r2, [r3, #16]
	for (register uint32_t i = 1 << map.PRG_msb; i > bank_size; i >>= 1)
 800b5d8:	4b2d      	ldr	r3, [pc, #180]	; (800b690 <scan_PRG+0x100>)
 800b5da:	795b      	ldrb	r3, [r3, #5]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	2301      	movs	r3, #1
 800b5e0:	4093      	lsls	r3, r2
 800b5e2:	461c      	mov	r4, r3
 800b5e4:	e048      	b.n	800b678 <scan_PRG+0xe8>
		for (register uint32_t j = 0; j < i; j += bank_size) {
 800b5e6:	2600      	movs	r6, #0
 800b5e8:	e043      	b.n	800b672 <scan_PRG+0xe2>
			map.PRG_B (i+j); for (register uint32_t k = 0; k < PRG_KEYS; k++)	 bank_sig [k]  = CPU_R (info.r.PRG_bank_ofs + PRG_keys [bank_bits][k]);
 800b5ea:	4b29      	ldr	r3, [pc, #164]	; (800b690 <scan_PRG+0x100>)
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	19a2      	adds	r2, r4, r6
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	4798      	blx	r3
 800b5f4:	2500      	movs	r5, #0
 800b5f6:	e011      	b.n	800b61c <scan_PRG+0x8c>
 800b5f8:	4b27      	ldr	r3, [pc, #156]	; (800b698 <scan_PRG+0x108>)
 800b5fa:	8a1b      	ldrh	r3, [r3, #16]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	4a27      	ldr	r2, [pc, #156]	; (800b69c <scan_PRG+0x10c>)
 800b600:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b604:	442b      	add	r3, r5
 800b606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b60a:	440b      	add	r3, r1
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7fc ffab 	bl	8008568 <CPU_R>
 800b612:	4603      	mov	r3, r0
 800b614:	b2da      	uxtb	r2, r3
 800b616:	4b22      	ldr	r3, [pc, #136]	; (800b6a0 <scan_PRG+0x110>)
 800b618:	555a      	strb	r2, [r3, r5]
 800b61a:	3501      	adds	r5, #1
 800b61c:	2d07      	cmp	r5, #7
 800b61e:	d9eb      	bls.n	800b5f8 <scan_PRG+0x68>
			map.PRG_B (  j); for (register uint32_t k = 0; k < PRG_KEYS; k++) if (bank_sig [k] != CPU_R (info.r.PRG_bank_ofs + PRG_keys [bank_bits][k])) {
 800b620:	4b1b      	ldr	r3, [pc, #108]	; (800b690 <scan_PRG+0x100>)
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	4630      	mov	r0, r6
 800b626:	4798      	blx	r3
 800b628:	2500      	movs	r5, #0
 800b62a:	e01f      	b.n	800b66c <scan_PRG+0xdc>
 800b62c:	4b1c      	ldr	r3, [pc, #112]	; (800b6a0 <scan_PRG+0x110>)
 800b62e:	5d5b      	ldrb	r3, [r3, r5]
 800b630:	469a      	mov	sl, r3
 800b632:	4b19      	ldr	r3, [pc, #100]	; (800b698 <scan_PRG+0x108>)
 800b634:	8a1b      	ldrh	r3, [r3, #16]
 800b636:	4619      	mov	r1, r3
 800b638:	4a18      	ldr	r2, [pc, #96]	; (800b69c <scan_PRG+0x10c>)
 800b63a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b63e:	442b      	add	r3, r5
 800b640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b644:	440b      	add	r3, r1
 800b646:	4618      	mov	r0, r3
 800b648:	f7fc ff8e 	bl	8008568 <CPU_R>
 800b64c:	4603      	mov	r3, r0
 800b64e:	459a      	cmp	sl, r3
 800b650:	d00b      	beq.n	800b66a <scan_PRG+0xda>
				info.b [4] = i >> 13;
 800b652:	0b63      	lsrs	r3, r4, #13
 800b654:	b2da      	uxtb	r2, r3
 800b656:	4b10      	ldr	r3, [pc, #64]	; (800b698 <scan_PRG+0x108>)
 800b658:	711a      	strb	r2, [r3, #4]
				v.PRG_bank_mask = (i + i - bank_size) | b31;
 800b65a:	1923      	adds	r3, r4, r4
 800b65c:	eba3 0308 	sub.w	r3, r3, r8
 800b660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b664:	4a0b      	ldr	r2, [pc, #44]	; (800b694 <scan_PRG+0x104>)
 800b666:	6053      	str	r3, [r2, #4]
				return;
 800b668:	e00e      	b.n	800b688 <scan_PRG+0xf8>
			map.PRG_B (  j); for (register uint32_t k = 0; k < PRG_KEYS; k++) if (bank_sig [k] != CPU_R (info.r.PRG_bank_ofs + PRG_keys [bank_bits][k])) {
 800b66a:	3501      	adds	r5, #1
 800b66c:	2d07      	cmp	r5, #7
 800b66e:	d9dd      	bls.n	800b62c <scan_PRG+0x9c>
		for (register uint32_t j = 0; j < i; j += bank_size) {
 800b670:	4446      	add	r6, r8
 800b672:	42a6      	cmp	r6, r4
 800b674:	d3b9      	bcc.n	800b5ea <scan_PRG+0x5a>
	for (register uint32_t i = 1 << map.PRG_msb; i > bank_size; i >>= 1)
 800b676:	0864      	lsrs	r4, r4, #1
 800b678:	4544      	cmp	r4, r8
 800b67a:	d8b4      	bhi.n	800b5e6 <scan_PRG+0x56>
			}
		}

	// default for no switchable banks found
	info.b [4]		= 2;
 800b67c:	4b06      	ldr	r3, [pc, #24]	; (800b698 <scan_PRG+0x108>)
 800b67e:	2202      	movs	r2, #2
 800b680:	711a      	strb	r2, [r3, #4]
	info_4_mask		= 0;
 800b682:	4b02      	ldr	r3, [pc, #8]	; (800b68c <scan_PRG+0xfc>)
 800b684:	2200      	movs	r2, #0
 800b686:	701a      	strb	r2, [r3, #0]
//	PRG_bank_mask	= 0;
}
 800b688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68c:	200036ea 	.word	0x200036ea
 800b690:	20002aac 	.word	0x20002aac
 800b694:	200034cc 	.word	0x200034cc
 800b698:	2000288c 	.word	0x2000288c
 800b69c:	0800dff8 	.word	0x0800dff8
 800b6a0:	2000351c 	.word	0x2000351c

0800b6a4 <scan_SAV>:

void scan_SAV (void) {
 800b6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a8:	b088      	sub	sp, #32
 800b6aa:	af00      	add	r7, sp, #0

	// read in SRAM data covering range of test, save it at the end of report_txt
	if (!map.SAV_base) return;								//	no more testing if mapper says so
 800b6ac:	4b9b      	ldr	r3, [pc, #620]	; (800b91c <scan_SAV+0x278>)
 800b6ae:	885b      	ldrh	r3, [r3, #2]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 812c 	beq.w	800b90e <scan_SAV+0x26a>
	int end	= 2 << map.SAV_msb;
 800b6b6:	4b99      	ldr	r3, [pc, #612]	; (800b91c <scan_SAV+0x278>)
 800b6b8:	791b      	ldrb	r3, [r3, #4]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	2302      	movs	r3, #2
 800b6be:	4093      	lsls	r3, r2
 800b6c0:	617b      	str	r3, [r7, #20]
	register int j = 511;
 800b6c2:	f240 15ff 	movw	r5, #511	; 0x1ff
	for (register int i = -1; end & i; i <<= 1, j--) {
 800b6c6:	f04f 34ff 	mov.w	r4, #4294967295
 800b6ca:	e015      	b.n	800b6f8 <scan_SAV+0x54>
		map.SAV_B (i);
 800b6cc:	4b93      	ldr	r3, [pc, #588]	; (800b91c <scan_SAV+0x278>)
 800b6ce:	6a1b      	ldr	r3, [r3, #32]
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	4798      	blx	r3
		int a = (~i & 0x1FFF) ^ map.SAV_base;
 800b6d6:	43e3      	mvns	r3, r4
 800b6d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6dc:	4a8f      	ldr	r2, [pc, #572]	; (800b91c <scan_SAV+0x278>)
 800b6de:	8852      	ldrh	r2, [r2, #2]
 800b6e0:	4053      	eors	r3, r2
 800b6e2:	613b      	str	r3, [r7, #16]
		report_txt [j] = CPU_R (a);
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fc ff3e 	bl	8008568 <CPU_R>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	4b8b      	ldr	r3, [pc, #556]	; (800b920 <scan_SAV+0x27c>)
 800b6f2:	555a      	strb	r2, [r3, r5]
	for (register int i = -1; end & i; i <<= 1, j--) {
 800b6f4:	0064      	lsls	r4, r4, #1
 800b6f6:	3d01      	subs	r5, #1
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	4023      	ands	r3, r4
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1e5      	bne.n	800b6cc <scan_SAV+0x28>
	}

	// generate mask of implemented address lines
	v.SRAM_err		= 0;		//	SRAM write-back error count
 800b700:	4b88      	ldr	r3, [pc, #544]	; (800b924 <scan_SAV+0x280>)
 800b702:	2200      	movs	r2, #0
 800b704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	register int b	= 0;		//	battery-backed test count
 800b708:	2400      	movs	r4, #0
	register int c	= 0;		//	SRAM test count
 800b70a:	2600      	movs	r6, #0
	int k			= -1;
 800b70c:	f04f 33ff 	mov.w	r3, #4294967295
 800b710:	61fb      	str	r3, [r7, #28]
	j = 511;
 800b712:	f240 15ff 	movw	r5, #511	; 0x1ff
	int mask = 0;	//	valid SRAM bits
 800b716:	2300      	movs	r3, #0
 800b718:	61bb      	str	r3, [r7, #24]
	for (register int i = -2; end & k; i <<= 1, k <<= 1, j--) {
 800b71a:	f06f 0801 	mvn.w	r8, #1
 800b71e:	e043      	b.n	800b7a8 <scan_SAV+0x104>
		int a = (~i & 0x1FFF) ^ map.SAV_base;
 800b720:	ea6f 0308 	mvn.w	r3, r8
 800b724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b728:	4a7c      	ldr	r2, [pc, #496]	; (800b91c <scan_SAV+0x278>)
 800b72a:	8852      	ldrh	r2, [r2, #2]
 800b72c:	4053      	eors	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]
		int b = (~k & 0x1FFF) ^ map.SAV_base;
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	43db      	mvns	r3, r3
 800b734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b738:	4a78      	ldr	r2, [pc, #480]	; (800b91c <scan_SAV+0x278>)
 800b73a:	8852      	ldrh	r2, [r2, #2]
 800b73c:	4053      	eors	r3, r2
 800b73e:	60bb      	str	r3, [r7, #8]
		map.SAV_B (k);		CPU_W (b,  ~report_txt [j]);	//	lower (current) address
 800b740:	4b76      	ldr	r3, [pc, #472]	; (800b91c <scan_SAV+0x278>)
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	69fa      	ldr	r2, [r7, #28]
 800b746:	4610      	mov	r0, r2
 800b748:	4798      	blx	r3
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	4b74      	ldr	r3, [pc, #464]	; (800b920 <scan_SAV+0x27c>)
 800b74e:	5d5b      	ldrb	r3, [r3, r5]
 800b750:	43db      	mvns	r3, r3
 800b752:	4619      	mov	r1, r3
 800b754:	4610      	mov	r0, r2
 800b756:	f7fc ff3b 	bl	80085d0 <CPU_W>
		map.SAV_B (i);		CPU_W (a,	report_txt [j]);	//	higher address
 800b75a:	4b70      	ldr	r3, [pc, #448]	; (800b91c <scan_SAV+0x278>)
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	4642      	mov	r2, r8
 800b760:	4610      	mov	r0, r2
 800b762:	4798      	blx	r3
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	4b6e      	ldr	r3, [pc, #440]	; (800b920 <scan_SAV+0x27c>)
 800b768:	5d5b      	ldrb	r3, [r3, r5]
 800b76a:	4619      	mov	r1, r3
 800b76c:	4610      	mov	r0, r2
 800b76e:	f7fc ff2f 	bl	80085d0 <CPU_W>
		map.SAV_B (k); if ((CPU_R (b) ^ report_txt [j]) == 0xFF) {
 800b772:	4b6a      	ldr	r3, [pc, #424]	; (800b91c <scan_SAV+0x278>)
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	69fa      	ldr	r2, [r7, #28]
 800b778:	4610      	mov	r0, r2
 800b77a:	4798      	blx	r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fc fef2 	bl	8008568 <CPU_R>
 800b784:	4602      	mov	r2, r0
 800b786:	4b66      	ldr	r3, [pc, #408]	; (800b920 <scan_SAV+0x27c>)
 800b788:	5d5b      	ldrb	r3, [r3, r5]
 800b78a:	4053      	eors	r3, r2
 800b78c:	2bff      	cmp	r3, #255	; 0xff
 800b78e:	d105      	bne.n	800b79c <scan_SAV+0xf8>
			mask |= -k;										//	valid SRAM bits
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	425b      	negs	r3, r3
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	4313      	orrs	r3, r2
 800b798:	61bb      	str	r3, [r7, #24]
			c++;											//	total SRAM count
 800b79a:	3601      	adds	r6, #1
	for (register int i = -2; end & k; i <<= 1, k <<= 1, j--) {
 800b79c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	3d01      	subs	r5, #1
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1b6      	bne.n	800b720 <scan_SAV+0x7c>
		}
	}

	// test for battery-backed save RAM
	if (!c) return;											//	no more testing if SRAM absent
 800b7b2:	2e00      	cmp	r6, #0
 800b7b4:	f000 80ad 	beq.w	800b912 <scan_SAV+0x26e>
	if (ch.items.battery_test_enable) {
 800b7b8:	4b5b      	ldr	r3, [pc, #364]	; (800b928 <scan_SAV+0x284>)
 800b7ba:	891b      	ldrh	r3, [r3, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d061      	beq.n	800b884 <scan_SAV+0x1e0>

		// shut down the cart for a moment
		shut_down ();
 800b7c0:	f7fc fde4 	bl	800838c <shut_down>
		chill (ch.items.battery_power_down * (MSEC_const / 2));
 800b7c4:	4b58      	ldr	r3, [pc, #352]	; (800b928 <scan_SAV+0x284>)
 800b7c6:	889b      	ldrh	r3, [r3, #4]
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 800b7ce:	fb03 f302 	mul.w	r3, r3, r2
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fc fdc8 	bl	8008368 <chill>
		if (ch.items.quick_discharge_enable) discharge ();
 800b7d8:	4b53      	ldr	r3, [pc, #332]	; (800b928 <scan_SAV+0x284>)
 800b7da:	88db      	ldrh	r3, [r3, #6]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <scan_SAV+0x140>
 800b7e0:	f7fc fe0e 	bl	8008400 <discharge>
		chill (ch.items.battery_power_down * (MSEC_const / 2));
 800b7e4:	4b50      	ldr	r3, [pc, #320]	; (800b928 <scan_SAV+0x284>)
 800b7e6:	889b      	ldrh	r3, [r3, #4]
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 800b7ee:	fb03 f302 	mul.w	r3, r3, r2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fc fdb8 	bl	8008368 <chill>
		check_power_OK ();
 800b7f8:	f7fc fe5a 	bl	80084b0 <check_power_OK>

		// run through the ranges, count the compliment data matches as battery-backed SRAM present in 2^n
		j = 511;
 800b7fc:	f240 15ff 	movw	r5, #511	; 0x1ff
		for (register int i = -1; end & i; i <<= 1, j--) {
 800b800:	f04f 38ff 	mov.w	r8, #4294967295
 800b804:	e038      	b.n	800b878 <scan_SAV+0x1d4>
			int a = (~i & 0x1FFF) ^ map.SAV_base;
 800b806:	ea6f 0308 	mvn.w	r3, r8
 800b80a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b80e:	4a43      	ldr	r2, [pc, #268]	; (800b91c <scan_SAV+0x278>)
 800b810:	8852      	ldrh	r2, [r2, #2]
 800b812:	4053      	eors	r3, r2
 800b814:	607b      	str	r3, [r7, #4]
			map.SAV_B (i);
 800b816:	4b41      	ldr	r3, [pc, #260]	; (800b91c <scan_SAV+0x278>)
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	4642      	mov	r2, r8
 800b81c:	4610      	mov	r0, r2
 800b81e:	4798      	blx	r3
			if ((mask & -i) && ((CPU_R (a) ^ report_txt [j]) == 0xFF))
 800b820:	f1c8 0200 	rsb	r2, r8, #0
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	4013      	ands	r3, r2
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00a      	beq.n	800b842 <scan_SAV+0x19e>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fc fe9a 	bl	8008568 <CPU_R>
 800b834:	4602      	mov	r2, r0
 800b836:	4b3a      	ldr	r3, [pc, #232]	; (800b920 <scan_SAV+0x27c>)
 800b838:	5d5b      	ldrb	r3, [r3, r5]
 800b83a:	4053      	eors	r3, r2
 800b83c:	2bff      	cmp	r3, #255	; 0xff
 800b83e:	d100      	bne.n	800b842 <scan_SAV+0x19e>
				b++;											//	battery-backed SRAM count
 800b840:	3401      	adds	r4, #1

			CPU_W (a, report_txt [j]);							//	write back original data
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	4b36      	ldr	r3, [pc, #216]	; (800b920 <scan_SAV+0x27c>)
 800b846:	5d5b      	ldrb	r3, [r3, r5]
 800b848:	4619      	mov	r1, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	f7fc fec0 	bl	80085d0 <CPU_W>
			if (CPU_R (a) != report_txt [j])
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4618      	mov	r0, r3
 800b854:	f7fc fe88 	bl	8008568 <CPU_R>
 800b858:	4602      	mov	r2, r0
 800b85a:	4b31      	ldr	r3, [pc, #196]	; (800b920 <scan_SAV+0x27c>)
 800b85c:	5d5b      	ldrb	r3, [r3, r5]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d007      	beq.n	800b872 <scan_SAV+0x1ce>
				v.SRAM_err ++;									// verify original SRAM data written back properly
 800b862:	4b30      	ldr	r3, [pc, #192]	; (800b924 <scan_SAV+0x280>)
 800b864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b868:	3301      	adds	r3, #1
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	4b2d      	ldr	r3, [pc, #180]	; (800b924 <scan_SAV+0x280>)
 800b86e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		for (register int i = -1; end & i; i <<= 1, j--) {
 800b872:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b876:	3d01      	subs	r5, #1
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	ea08 0303 	and.w	r3, r8, r3
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1c1      	bne.n	800b806 <scan_SAV+0x162>
 800b882:	e000      	b.n	800b886 <scan_SAV+0x1e2>
		}
	}
	else b = c;
 800b884:	4634      	mov	r4, r6

	// if a battery presence is detected, set up the save RAM methods
	if (b == c) {
 800b886:	42b4      	cmp	r4, r6
 800b888:	d112      	bne.n	800b8b0 <scan_SAV+0x20c>

		if (b > 13)	 v.SRAM_size = 1 << b;
 800b88a:	2c0d      	cmp	r4, #13
 800b88c:	dd05      	ble.n	800b89a <scan_SAV+0x1f6>
 800b88e:	2301      	movs	r3, #1
 800b890:	40a3      	lsls	r3, r4
 800b892:	461a      	mov	r2, r3
 800b894:	4b23      	ldr	r3, [pc, #140]	; (800b924 <scan_SAV+0x280>)
 800b896:	619a      	str	r2, [r3, #24]
 800b898:	e003      	b.n	800b8a2 <scan_SAV+0x1fe>
		else		 v.SRAM_size = 8192;
 800b89a:	4b22      	ldr	r3, [pc, #136]	; (800b924 <scan_SAV+0x280>)
 800b89c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b8a0:	619a      	str	r2, [r3, #24]
		info.b [6] |= 2;										//	set the battery-backed bit
 800b8a2:	4b22      	ldr	r3, [pc, #136]	; (800b92c <scan_SAV+0x288>)
 800b8a4:	799b      	ldrb	r3, [r3, #6]
 800b8a6:	f043 0302 	orr.w	r3, r3, #2
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	4b1f      	ldr	r3, [pc, #124]	; (800b92c <scan_SAV+0x288>)
 800b8ae:	719a      	strb	r2, [r3, #6]

	}
	// update iNES header and other stuff
	v.SAV_bank_mask = (mask & 0xFFFFE000) | b31;			//	SRAM bankswitch mask
 800b8b0:	69ba      	ldr	r2, [r7, #24]
 800b8b2:	4b1f      	ldr	r3, [pc, #124]	; (800b930 <scan_SAV+0x28c>)
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8ba:	4a1a      	ldr	r2, [pc, #104]	; (800b924 <scan_SAV+0x280>)
 800b8bc:	61d3      	str	r3, [r2, #28]
	SAV_size = b;											//	total SRAM amount
 800b8be:	b2e2      	uxtb	r2, r4
 800b8c0:	4b1c      	ldr	r3, [pc, #112]	; (800b934 <scan_SAV+0x290>)
 800b8c2:	701a      	strb	r2, [r3, #0]
	c  =  c - b - 6;	c &= -c >> 31 & 15;					//	non-battery backed SRAM amount
 800b8c4:	1b33      	subs	r3, r6, r4
 800b8c6:	1f9e      	subs	r6, r3, #6
 800b8c8:	4273      	negs	r3, r6
 800b8ca:	17db      	asrs	r3, r3, #31
 800b8cc:	f003 030f 	and.w	r3, r3, #15
 800b8d0:	401e      	ands	r6, r3
	b -= 		  6;	b &= -b >> 31 & 15;					//	battery backed SRAM amount
 800b8d2:	3c06      	subs	r4, #6
 800b8d4:	4263      	negs	r3, r4
 800b8d6:	17db      	asrs	r3, r3, #31
 800b8d8:	f003 030f 	and.w	r3, r3, #15
 800b8dc:	401c      	ands	r4, r3
	info.b [10] = b << 4 | c;								//	.NES 2.0 PRG RAM size byte
 800b8de:	0123      	lsls	r3, r4, #4
 800b8e0:	b25a      	sxtb	r2, r3
 800b8e2:	b273      	sxtb	r3, r6
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	b25b      	sxtb	r3, r3
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	4b10      	ldr	r3, [pc, #64]	; (800b92c <scan_SAV+0x288>)
 800b8ec:	729a      	strb	r2, [r3, #10]
	if (b) {
 800b8ee:	2c00      	cmp	r4, #0
 800b8f0:	d010      	beq.n	800b914 <scan_SAV+0x270>

		info.r.PRG_bank_ofs_SRAM	= map.SAV_base;
 800b8f2:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <scan_SAV+0x278>)
 800b8f4:	885a      	ldrh	r2, [r3, #2]
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <scan_SAV+0x288>)
 800b8f8:	829a      	strh	r2, [r3, #20]
		info.r.PRG_bank_bits_SRAM	= (b <= 6)? b + 6 : 13;
 800b8fa:	2c06      	cmp	r4, #6
 800b8fc:	dc03      	bgt.n	800b906 <scan_SAV+0x262>
 800b8fe:	b2e3      	uxtb	r3, r4
 800b900:	3306      	adds	r3, #6
 800b902:	b2db      	uxtb	r3, r3
 800b904:	e000      	b.n	800b908 <scan_SAV+0x264>
 800b906:	230d      	movs	r3, #13
 800b908:	4a08      	ldr	r2, [pc, #32]	; (800b92c <scan_SAV+0x288>)
 800b90a:	7693      	strb	r3, [r2, #26]
 800b90c:	e002      	b.n	800b914 <scan_SAV+0x270>
	if (!map.SAV_base) return;								//	no more testing if mapper says so
 800b90e:	bf00      	nop
 800b910:	e000      	b.n	800b914 <scan_SAV+0x270>
	if (!c) return;											//	no more testing if SRAM absent
 800b912:	bf00      	nop

	}
}
 800b914:	3720      	adds	r7, #32
 800b916:	46bd      	mov	sp, r7
 800b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91c:	20002aac 	.word	0x20002aac
 800b920:	200032c8 	.word	0x200032c8
 800b924:	200034cc 	.word	0x200034cc
 800b928:	20003638 	.word	0x20003638
 800b92c:	2000288c 	.word	0x2000288c
 800b930:	7fffe000 	.word	0x7fffe000
 800b934:	200034c8 	.word	0x200034c8

0800b938 <goto_root>:

void goto_root () {
 800b938:	b598      	push	{r3, r4, r7, lr}
 800b93a:	af00      	add	r7, sp, #0
	
	for (register int i = 0xffff; i >= 0x8000; i --)
 800b93c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b940:	e010      	b.n	800b964 <goto_root+0x2c>
		
		if (! CPU_R (i)) {
 800b942:	4623      	mov	r3, r4
 800b944:	4618      	mov	r0, r3
 800b946:	f7fc fe0f 	bl	8008568 <CPU_R>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d108      	bne.n	800b962 <goto_root+0x2a>
			
			CPU_W (i, 0);		//	set mapper to bank 0
 800b950:	4623      	mov	r3, r4
 800b952:	2100      	movs	r1, #0
 800b954:	4618      	mov	r0, r3
 800b956:	f7fc fe3b 	bl	80085d0 <CPU_W>
			cur_bank = 0;
 800b95a:	4b04      	ldr	r3, [pc, #16]	; (800b96c <goto_root+0x34>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	701a      	strb	r2, [r3, #0]
			return;
 800b960:	e003      	b.n	800b96a <goto_root+0x32>
	for (register int i = 0xffff; i >= 0x8000; i --)
 800b962:	3c01      	subs	r4, #1
 800b964:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b968:	daeb      	bge.n	800b942 <goto_root+0xa>
			
		}
}
 800b96a:	bd98      	pop	{r3, r4, r7, pc}
 800b96c:	200034c9 	.word	0x200034c9

0800b970 <goto_bank>:

int goto_bank (register uint32_t b) {
 800b970:	b5b0      	push	{r4, r5, r7, lr}
 800b972:	af00      	add	r7, sp, #0
 800b974:	4605      	mov	r5, r0

	// test if the bank is available
	if (data_table [b]) {
 800b976:	4b1e      	ldr	r3, [pc, #120]	; (800b9f0 <goto_bank+0x80>)
 800b978:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d033      	beq.n	800b9e8 <goto_bank+0x78>

		// is there a root entry in the table for current bank?
		if (! root_table [cur_bank])
 800b980:	4b1c      	ldr	r3, [pc, #112]	; (800b9f4 <goto_bank+0x84>)
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	461a      	mov	r2, r3
 800b986:	4b1c      	ldr	r3, [pc, #112]	; (800b9f8 <goto_bank+0x88>)
 800b988:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d115      	bne.n	800b9bc <goto_bank+0x4c>

			// scan the PRG space for a null byte
			for (register int i = 0xffff; i >= 0x8000; i --)
 800b990:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b994:	e00f      	b.n	800b9b6 <goto_bank+0x46>

				if (! CPU_R (i)) {
 800b996:	4623      	mov	r3, r4
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fc fde5 	bl	8008568 <CPU_R>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d107      	bne.n	800b9b4 <goto_bank+0x44>

					root_table [cur_bank] = i;
 800b9a4:	4b13      	ldr	r3, [pc, #76]	; (800b9f4 <goto_bank+0x84>)
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	b2a1      	uxth	r1, r4
 800b9ac:	4b12      	ldr	r3, [pc, #72]	; (800b9f8 <goto_bank+0x88>)
 800b9ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					break;
 800b9b2:	e003      	b.n	800b9bc <goto_bank+0x4c>
			for (register int i = 0xffff; i >= 0x8000; i --)
 800b9b4:	3c01      	subs	r4, #1
 800b9b6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b9ba:	daec      	bge.n	800b996 <goto_bank+0x26>

				}
	
		// go back to the root bank to use the data lookup table there
		CPU_W (root_table [cur_bank], 0);	//	bankswitch back to root bank
 800b9bc:	4b0d      	ldr	r3, [pc, #52]	; (800b9f4 <goto_bank+0x84>)
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4b0d      	ldr	r3, [pc, #52]	; (800b9f8 <goto_bank+0x88>)
 800b9c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fc fe00 	bl	80085d0 <CPU_W>
		CPU_W (data_table [b], b);			//	bankswitch to desired bank
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <goto_bank+0x80>)
 800b9d2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fc fdf9 	bl	80085d0 <CPU_W>
		cur_bank = b;
 800b9de:	b2ea      	uxtb	r2, r5
 800b9e0:	4b04      	ldr	r3, [pc, #16]	; (800b9f4 <goto_bank+0x84>)
 800b9e2:	701a      	strb	r2, [r3, #0]
		return 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	e001      	b.n	800b9ec <goto_bank+0x7c>

	}
	return -1;
 800b9e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	bdb0      	pop	{r4, r5, r7, pc}
 800b9f0:	200030c8 	.word	0x200030c8
 800b9f4:	200034c9 	.word	0x200034c9
 800b9f8:	200028ac 	.word	0x200028ac

0800b9fc <MIR_R>:

// return the NT A10 line
uint32_t MIR_R (register uint32_t addr) {
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	af00      	add	r7, sp, #0

	GPIOA -> BSRR = 0x00540028;
 800ba00:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <MIR_R+0x20>)
 800ba02:	4a07      	ldr	r2, [pc, #28]	; (800ba20 <MIR_R+0x24>)
 800ba04:	611a      	str	r2, [r3, #16]
	chill (40);
 800ba06:	2028      	movs	r0, #40	; 0x28
 800ba08:	f7fc fcae 	bl	8008368 <chill>
	return GPIOA -> IDR >> 13 & 1;
 800ba0c:	4b03      	ldr	r3, [pc, #12]	; (800ba1c <MIR_R+0x20>)
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	0b5b      	lsrs	r3, r3, #13
 800ba12:	f003 0301 	and.w	r3, r3, #1

}
 800ba16:	4618      	mov	r0, r3
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	40010800 	.word	0x40010800
 800ba20:	00540028 	.word	0x00540028

0800ba24 <get_bank_score>:

void get_bank_score (uint8_t * t2, uint32_t (* BUS_R) (register uint32_t addr), const uint16_t * u, uint16_t ofs) {
 800ba24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba28:	b086      	sub	sp, #24
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6178      	str	r0, [r7, #20]
 800ba2e:	6139      	str	r1, [r7, #16]
 800ba30:	60fa      	str	r2, [r7, #12]
 800ba32:	817b      	strh	r3, [r7, #10]
//	t2		score byte
//	u		CPU/PPU test address
//	BUS_R	CPU_R or PPU_R

	// create the data value and data valid buffers (1 == not valid)
	register unsigned char * buf	= & debug.buf  [0];
 800ba34:	4c52      	ldr	r4, [pc, #328]	; (800bb80 <get_bank_score+0x15c>)
	register		  char * nul	= & report_txt [0];
 800ba36:	4b53      	ldr	r3, [pc, #332]	; (800bb84 <get_bank_score+0x160>)
 800ba38:	607b      	str	r3, [r7, #4]

	// switch to all 256 banks and read a byte at the same address
	for (register unsigned int y = 0; y < 256; y ++) {
 800ba3a:	2500      	movs	r5, #0
 800ba3c:	e048      	b.n	800bad0 <get_bank_score+0xac>

		// bankswitch to 256 PRG banks
		if (! (nul [y] = goto_bank (y))) {
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	195e      	adds	r6, r3, r5
 800ba42:	4628      	mov	r0, r5
 800ba44:	f7ff ff94 	bl	800b970 <goto_bank>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	7033      	strb	r3, [r6, #0]
 800ba4e:	7833      	ldrb	r3, [r6, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d13c      	bne.n	800bace <get_bank_score+0xaa>

			// record the data
			buf [y		] = BUS_R (u [0] + ofs);
 800ba54:	1966      	adds	r6, r4, r5
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	897b      	ldrh	r3, [r7, #10]
 800ba5e:	4413      	add	r3, r2
 800ba60:	461a      	mov	r2, r3
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	4610      	mov	r0, r2
 800ba66:	4798      	blx	r3
 800ba68:	4603      	mov	r3, r0
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	7033      	strb	r3, [r6, #0]
			buf [y + 256] = BUS_R (u [1] + ofs);
 800ba6e:	f505 7380 	add.w	r3, r5, #256	; 0x100
 800ba72:	18e6      	adds	r6, r4, r3
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	3302      	adds	r3, #2
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	897b      	ldrh	r3, [r7, #10]
 800ba7e:	4413      	add	r3, r2
 800ba80:	461a      	mov	r2, r3
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	4610      	mov	r0, r2
 800ba86:	4798      	blx	r3
 800ba88:	4603      	mov	r3, r0
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	7033      	strb	r3, [r6, #0]
			buf [y + 512] = BUS_R (u [2] + ofs);
 800ba8e:	f505 7300 	add.w	r3, r5, #512	; 0x200
 800ba92:	18e6      	adds	r6, r4, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3304      	adds	r3, #4
 800ba98:	881b      	ldrh	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	897b      	ldrh	r3, [r7, #10]
 800ba9e:	4413      	add	r3, r2
 800baa0:	461a      	mov	r2, r3
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	4610      	mov	r0, r2
 800baa6:	4798      	blx	r3
 800baa8:	4603      	mov	r3, r0
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	7033      	strb	r3, [r6, #0]
			buf [y + 768] = BUS_R (u [3] + ofs);
 800baae:	f505 7340 	add.w	r3, r5, #768	; 0x300
 800bab2:	18e6      	adds	r6, r4, r3
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3306      	adds	r3, #6
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	897b      	ldrh	r3, [r7, #10]
 800babe:	4413      	add	r3, r2
 800bac0:	461a      	mov	r2, r3
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	4610      	mov	r0, r2
 800bac6:	4798      	blx	r3
 800bac8:	4603      	mov	r3, r0
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	7033      	strb	r3, [r6, #0]
	for (register unsigned int y = 0; y < 256; y ++) {
 800bace:	3501      	adds	r5, #1
 800bad0:	2dff      	cmp	r5, #255	; 0xff
 800bad2:	d9b4      	bls.n	800ba3e <get_bank_score+0x1a>

		}
	}
	// determine which bits caused any bankswitch behaviour
	register unsigned int t = t2 [0];
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	461e      	mov	r6, r3
	for (register unsigned int i = 128; i; i >>= 1) {
 800bada:	2580      	movs	r5, #128	; 0x80
 800badc:	e046      	b.n	800bb6c <get_bank_score+0x148>

		// iterate 0 to 127
		for (register unsigned int j = 0; j < 128; j ++) {
 800bade:	f04f 0a00 	mov.w	sl, #0
 800bae2:	e03f      	b.n	800bb64 <get_bank_score+0x140>

			register unsigned int x = (- i & j) + j;
 800bae4:	426b      	negs	r3, r5
 800bae6:	ea03 030a 	and.w	r3, r3, sl
 800baea:	eb03 080a 	add.w	r8, r3, sl
			register unsigned int y = x + i;
 800baee:	eb08 0905 	add.w	r9, r8, r5
			if (nul [x] |  nul [y])		continue;
 800baf2:	6879      	ldr	r1, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	4443      	add	r3, r8
 800baf8:	781a      	ldrb	r2, [r3, #0]
 800bafa:	460b      	mov	r3, r1
 800bafc:	444b      	add	r3, r9
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d12a      	bne.n	800bb5e <get_bank_score+0x13a>

			if (buf [x		] != buf [y		 ])		t |= i;
 800bb08:	eb04 0308 	add.w	r3, r4, r8
 800bb0c:	781a      	ldrb	r2, [r3, #0]
 800bb0e:	eb04 0309 	add.w	r3, r4, r9
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d000      	beq.n	800bb1a <get_bank_score+0xf6>
 800bb18:	432e      	orrs	r6, r5
			if (buf [x + 256] != buf [y + 256])		t |= i;
 800bb1a:	f508 7380 	add.w	r3, r8, #256	; 0x100
 800bb1e:	4423      	add	r3, r4
 800bb20:	781a      	ldrb	r2, [r3, #0]
 800bb22:	f509 7380 	add.w	r3, r9, #256	; 0x100
 800bb26:	4423      	add	r3, r4
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d000      	beq.n	800bb30 <get_bank_score+0x10c>
 800bb2e:	432e      	orrs	r6, r5
			if (buf [x + 512] != buf [y + 512])		t |= i;
 800bb30:	f508 7300 	add.w	r3, r8, #512	; 0x200
 800bb34:	4423      	add	r3, r4
 800bb36:	781a      	ldrb	r2, [r3, #0]
 800bb38:	f509 7300 	add.w	r3, r9, #512	; 0x200
 800bb3c:	4423      	add	r3, r4
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d000      	beq.n	800bb46 <get_bank_score+0x122>
 800bb44:	432e      	orrs	r6, r5
			if (buf [x + 768] != buf [y + 768])		t |= i;
 800bb46:	f508 7340 	add.w	r3, r8, #768	; 0x300
 800bb4a:	4423      	add	r3, r4
 800bb4c:	781a      	ldrb	r2, [r3, #0]
 800bb4e:	f509 7340 	add.w	r3, r9, #768	; 0x300
 800bb52:	4423      	add	r3, r4
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d002      	beq.n	800bb60 <get_bank_score+0x13c>
 800bb5a:	432e      	orrs	r6, r5
 800bb5c:	e000      	b.n	800bb60 <get_bank_score+0x13c>
			if (nul [x] |  nul [y])		continue;
 800bb5e:	bf00      	nop
		for (register unsigned int j = 0; j < 128; j ++) {
 800bb60:	f10a 0a01 	add.w	sl, sl, #1
 800bb64:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
 800bb68:	d9bc      	bls.n	800bae4 <get_bank_score+0xc0>
	for (register unsigned int i = 128; i; i >>= 1) {
 800bb6a:	086d      	lsrs	r5, r5, #1
 800bb6c:	2d00      	cmp	r5, #0
 800bb6e:	d1b6      	bne.n	800bade <get_bank_score+0xba>

		}
	}
	t2 [0] = t;
 800bb70:	b2f2      	uxtb	r2, r6
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	701a      	strb	r2, [r3, #0]

}
 800bb76:	bf00      	nop
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb80:	20002ca8 	.word	0x20002ca8
 800bb84:	200032c8 	.word	0x200032c8

0800bb88 <init>:

//***************************************************************************************
//*************** File system init + cart present detect + cart type detect *************
//***************************************************************************************

void init (t_kernel_functions * ptr) {
 800bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8a:	b0a1      	sub	sp, #132	; 0x84
 800bb8c:	af02      	add	r7, sp, #8
 800bb8e:	6078      	str	r0, [r7, #4]

	// initialize the application RAM
	memset ((char *) RAM_BASE, 0, RAM_USED);
 800bb90:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800bb94:	2100      	movs	r1, #0
 800bb96:	483d      	ldr	r0, [pc, #244]	; (800bc8c <init+0x104>)
 800bb98:	f001 fb73 	bl	800d282 <memset>
	memcpy (&info, &NES_header_init, 32);
 800bb9c:	4a3c      	ldr	r2, [pc, #240]	; (800bc90 <init+0x108>)
 800bb9e:	4b3d      	ldr	r3, [pc, #244]	; (800bc94 <init+0x10c>)
 800bba0:	4614      	mov	r4, r2
 800bba2:	461d      	mov	r5, r3
 800bba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bba8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bbac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	src_pos				= & OVERRIDE_BIN -> byte [0];
 800bbb0:	4b39      	ldr	r3, [pc, #228]	; (800bc98 <init+0x110>)
 800bbb2:	4a3a      	ldr	r2, [pc, #232]	; (800bc9c <init+0x114>)
 800bbb4:	601a      	str	r2, [r3, #0]
	chr_src				= PPU_R;
 800bbb6:	4b3a      	ldr	r3, [pc, #232]	; (800bca0 <init+0x118>)
 800bbb8:	4a3a      	ldr	r2, [pc, #232]	; (800bca4 <init+0x11c>)
 800bbba:	601a      	str	r2, [r3, #0]
	sram_src_R			= CPU_R;
 800bbbc:	4b3a      	ldr	r3, [pc, #232]	; (800bca8 <init+0x120>)
 800bbbe:	4a3b      	ldr	r2, [pc, #236]	; (800bcac <init+0x124>)
 800bbc0:	601a      	str	r2, [r3, #0]
	sram_src_W			= (void *) CPU_W;
 800bbc2:	4b3b      	ldr	r3, [pc, #236]	; (800bcb0 <init+0x128>)
 800bbc4:	4a3b      	ldr	r2, [pc, #236]	; (800bcb4 <init+0x12c>)
 800bbc6:	601a      	str	r2, [r3, #0]
	map					= map_init;
 800bbc8:	4a3b      	ldr	r2, [pc, #236]	; (800bcb8 <init+0x130>)
 800bbca:	4b3c      	ldr	r3, [pc, #240]	; (800bcbc <init+0x134>)
 800bbcc:	4614      	mov	r4, r2
 800bbce:	461d      	mov	r5, r3
 800bbd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bbe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CPU_W_enable		= 0x88888888;			// 0x33333333 for ON
 800bbe4:	4b36      	ldr	r3, [pc, #216]	; (800bcc0 <init+0x138>)
 800bbe6:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800bbea:	601a      	str	r2, [r3, #0]
	CPU_W_disable		= 0x88888888;			// 0x44444444 for HI-Z
 800bbec:	4b35      	ldr	r3, [pc, #212]	; (800bcc4 <init+0x13c>)
 800bbee:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800bbf2:	601a      	str	r2, [r3, #0]
	v.PRG_bank_mask		= b31;
 800bbf4:	4b34      	ldr	r3, [pc, #208]	; (800bcc8 <init+0x140>)
 800bbf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbfa:	605a      	str	r2, [r3, #4]
	v.CHR_bank_mask		= b31;
 800bbfc:	4b32      	ldr	r3, [pc, #200]	; (800bcc8 <init+0x140>)
 800bbfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc02:	611a      	str	r2, [r3, #16]
	v.SAV_ofs			= 0x0000;
 800bc04:	4b30      	ldr	r3, [pc, #192]	; (800bcc8 <init+0x140>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	849a      	strh	r2, [r3, #36]	; 0x24
	v.PRG_mask			= 0x7FFF;
 800bc0a:	4b2f      	ldr	r3, [pc, #188]	; (800bcc8 <init+0x140>)
 800bc0c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bc10:	811a      	strh	r2, [r3, #8]
	v.CHR_mask			= 0x1FFF;
 800bc12:	4b2d      	ldr	r3, [pc, #180]	; (800bcc8 <init+0x140>)
 800bc14:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800bc18:	829a      	strh	r2, [r3, #20]
	v.SAV_mask			= 0x1FFF;
 800bc1a:	4b2b      	ldr	r3, [pc, #172]	; (800bcc8 <init+0x140>)
 800bc1c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800bc20:	841a      	strh	r2, [r3, #32]
	ptr_krnl			= ptr;					// get the kernel function pointer
 800bc22:	4a2a      	ldr	r2, [pc, #168]	; (800bccc <init+0x144>)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6013      	str	r3, [r2, #0]

	// import the settings
	settings_items = SETTINGS_ITEMS - (memcmp (& info, (int *) DEMO_NES, 4) != 0);
 800bc28:	2204      	movs	r2, #4
 800bc2a:	4929      	ldr	r1, [pc, #164]	; (800bcd0 <init+0x148>)
 800bc2c:	4818      	ldr	r0, [pc, #96]	; (800bc90 <init+0x108>)
 800bc2e:	f001 fb0e 	bl	800d24e <memcmp>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <init+0xb4>
 800bc38:	2214      	movs	r2, #20
 800bc3a:	e000      	b.n	800bc3e <init+0xb6>
 800bc3c:	2215      	movs	r2, #21
 800bc3e:	4b25      	ldr	r3, [pc, #148]	; (800bcd4 <init+0x14c>)
 800bc40:	701a      	strb	r2, [r3, #0]
	memcpy (& debug, SETTINGS_BIN, SAVE_SIZE);
 800bc42:	4a25      	ldr	r2, [pc, #148]	; (800bcd8 <init+0x150>)
 800bc44:	4b25      	ldr	r3, [pc, #148]	; (800bcdc <init+0x154>)
 800bc46:	4610      	mov	r0, r2
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f001 fb0c 	bl	800d26c <memcpy>
	import_settings ((t_settings *) & debug, 1);
 800bc54:	2101      	movs	r1, #1
 800bc56:	4820      	ldr	r0, [pc, #128]	; (800bcd8 <init+0x150>)
 800bc58:	f7fc faac 	bl	80081b4 <import_settings>

	// determine the size of SETTINGS.TXT by scanning until null
	register int q = 0;
 800bc5c:	2400      	movs	r4, #0
	do if (SETTINGS_BIN -> byte [q] == 0)	break;
 800bc5e:	4b1f      	ldr	r3, [pc, #124]	; (800bcdc <init+0x154>)
 800bc60:	5d1b      	ldrb	r3, [r3, r4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d005      	beq.n	800bc72 <init+0xea>
	while (++ q < (SAVE_SIZE - 1));
 800bc66:	3401      	adds	r4, #1
 800bc68:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800bc6c:	429c      	cmp	r4, r3
 800bc6e:	ddf6      	ble.n	800bc5e <init+0xd6>
 800bc70:	e000      	b.n	800bc74 <init+0xec>
	do if (SETTINGS_BIN -> byte [q] == 0)	break;
 800bc72:	bf00      	nop

	// create the settings file
	ptr_krnl -> make_file_handler ("SETTINGSTXT&", q, settings_R, settings_W);
 800bc74:	4b15      	ldr	r3, [pc, #84]	; (800bccc <init+0x144>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	685d      	ldr	r5, [r3, #4]
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4b18      	ldr	r3, [pc, #96]	; (800bce0 <init+0x158>)
 800bc7e:	4a19      	ldr	r2, [pc, #100]	; (800bce4 <init+0x15c>)
 800bc80:	4819      	ldr	r0, [pc, #100]	; (800bce8 <init+0x160>)
 800bc82:	47a8      	blx	r5

	// determine the size of the bus conflict mapper table
	for (simple_cnt = 0; (BCMTABLE_BIN [simple_cnt].byte [1][0] != 0) && (simple_cnt < 32); simple_cnt ++);
 800bc84:	4b19      	ldr	r3, [pc, #100]	; (800bcec <init+0x164>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
 800bc8a:	e037      	b.n	800bcfc <init+0x174>
 800bc8c:	20002800 	.word	0x20002800
 800bc90:	2000288c 	.word	0x2000288c
 800bc94:	0800e028 	.word	0x0800e028
 800bc98:	20003630 	.word	0x20003630
 800bc9c:	0800f000 	.word	0x0800f000
 800bca0:	2000352c 	.word	0x2000352c
 800bca4:	08008665 	.word	0x08008665
 800bca8:	20003510 	.word	0x20003510
 800bcac:	08008569 	.word	0x08008569
 800bcb0:	20003664 	.word	0x20003664
 800bcb4:	080085d1 	.word	0x080085d1
 800bcb8:	20002aac 	.word	0x20002aac
 800bcbc:	0800e048 	.word	0x0800e048
 800bcc0:	20002c98 	.word	0x20002c98
 800bcc4:	20002ca0 	.word	0x20002ca0
 800bcc8:	200034cc 	.word	0x200034cc
 800bccc:	20003634 	.word	0x20003634
 800bcd0:	08010000 	.word	0x08010000
 800bcd4:	200030b4 	.word	0x200030b4
 800bcd8:	20002ca8 	.word	0x20002ca8
 800bcdc:	0800e800 	.word	0x0800e800
 800bce0:	0800a4ad 	.word	0x0800a4ad
 800bce4:	0800a485 	.word	0x0800a485
 800bce8:	0800dd24 	.word	0x0800dd24
 800bcec:	20003508 	.word	0x20003508
 800bcf0:	4b8b      	ldr	r3, [pc, #556]	; (800bf20 <init+0x398>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	b2da      	uxtb	r2, r3
 800bcf8:	4b89      	ldr	r3, [pc, #548]	; (800bf20 <init+0x398>)
 800bcfa:	701a      	strb	r2, [r3, #0]
 800bcfc:	4b88      	ldr	r3, [pc, #544]	; (800bf20 <init+0x398>)
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	015b      	lsls	r3, r3, #5
 800bd02:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800bd06:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800bd0a:	7c1b      	ldrb	r3, [r3, #16]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <init+0x190>
 800bd10:	4b83      	ldr	r3, [pc, #524]	; (800bf20 <init+0x398>)
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	2b1f      	cmp	r3, #31
 800bd16:	d9eb      	bls.n	800bcf0 <init+0x168>

	// create the BCMTABLE.BIN file
	if (ch.items.BCMTABLE_BIN_on	)	ptr_krnl -> make_file_handler ("BCMTABLEBIN&", BCMTABLE_SIZE, bcmtable_R, bcmtable_W);
 800bd18:	4b82      	ldr	r3, [pc, #520]	; (800bf24 <init+0x39c>)
 800bd1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d008      	beq.n	800bd32 <init+0x1aa>
 800bd20:	4b81      	ldr	r3, [pc, #516]	; (800bf28 <init+0x3a0>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685c      	ldr	r4, [r3, #4]
 800bd26:	4b81      	ldr	r3, [pc, #516]	; (800bf2c <init+0x3a4>)
 800bd28:	4a81      	ldr	r2, [pc, #516]	; (800bf30 <init+0x3a8>)
 800bd2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd2e:	4881      	ldr	r0, [pc, #516]	; (800bf34 <init+0x3ac>)
 800bd30:	47a0      	blx	r4

	// create a report file
	if (ch.items.REPORT_TXT_enable	)	ptr_krnl -> make_file_handler ("REPORT  TXT ", 256, report_txt_R,	null_io);
 800bd32:	4b7c      	ldr	r3, [pc, #496]	; (800bf24 <init+0x39c>)
 800bd34:	8b9b      	ldrh	r3, [r3, #28]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d008      	beq.n	800bd4c <init+0x1c4>
 800bd3a:	4b7b      	ldr	r3, [pc, #492]	; (800bf28 <init+0x3a0>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	685c      	ldr	r4, [r3, #4]
 800bd40:	4b7d      	ldr	r3, [pc, #500]	; (800bf38 <init+0x3b0>)
 800bd42:	4a7e      	ldr	r2, [pc, #504]	; (800bf3c <init+0x3b4>)
 800bd44:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd48:	487d      	ldr	r0, [pc, #500]	; (800bf40 <init+0x3b8>)
 800bd4a:	47a0      	blx	r4
	if (ch.items.RESETNES_TXT_on	)	ptr_krnl -> make_file_handler ("DETECT  TXT ", 256, resetnes_txt_R, null_io);
 800bd4c:	4b75      	ldr	r3, [pc, #468]	; (800bf24 <init+0x39c>)
 800bd4e:	8bdb      	ldrh	r3, [r3, #30]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d008      	beq.n	800bd66 <init+0x1de>
 800bd54:	4b74      	ldr	r3, [pc, #464]	; (800bf28 <init+0x3a0>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	685c      	ldr	r4, [r3, #4]
 800bd5a:	4b77      	ldr	r3, [pc, #476]	; (800bf38 <init+0x3b0>)
 800bd5c:	4a79      	ldr	r2, [pc, #484]	; (800bf44 <init+0x3bc>)
 800bd5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd62:	4879      	ldr	r0, [pc, #484]	; (800bf48 <init+0x3c0>)
 800bd64:	47a0      	blx	r4

	// create the OVERRIDE.TXT file
	if (ch.items.OVERRIDE_TXT_on) {
 800bd66:	4b6f      	ldr	r3, [pc, #444]	; (800bf24 <init+0x39c>)
 800bd68:	8c1b      	ldrh	r3, [r3, #32]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d016      	beq.n	800bd9c <init+0x214>

		// calculate the size of OVERRIDE.TXT
		register int s = 0;
 800bd6e:	2400      	movs	r4, #0
		register int i = 0;
 800bd70:	2500      	movs	r5, #0
		do switch (OVERRIDE_BIN -> name [i].text [3]) {
 800bd72:	4a76      	ldr	r2, [pc, #472]	; (800bf4c <init+0x3c4>)
 800bd74:	016b      	lsls	r3, r5, #5
 800bd76:	4413      	add	r3, r2
 800bd78:	3303      	adds	r3, #3
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	3b20      	subs	r3, #32
 800bd7e:	2b5e      	cmp	r3, #94	; 0x5e
 800bd80:	d900      	bls.n	800bd84 <init+0x1fc>

		default:			s += 96;
 800bd82:	3460      	adds	r4, #96	; 0x60
		case ' ' ... '~':	s += 32;
 800bd84:	3420      	adds	r4, #32

		} while ((++ i) < (OVERRIDE_SIZE / 32));
 800bd86:	3501      	adds	r5, #1
 800bd88:	2d7f      	cmp	r5, #127	; 0x7f
 800bd8a:	ddf2      	ble.n	800bd72 <init+0x1ea>

		// create the override file
		ptr_krnl -> make_file_handler ("OVERRIDETXT&", s, override_txt_R, override_txt_W);
 800bd8c:	4b66      	ldr	r3, [pc, #408]	; (800bf28 <init+0x3a0>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	685d      	ldr	r5, [r3, #4]
 800bd92:	4621      	mov	r1, r4
 800bd94:	4b6e      	ldr	r3, [pc, #440]	; (800bf50 <init+0x3c8>)
 800bd96:	4a6f      	ldr	r2, [pc, #444]	; (800bf54 <init+0x3cc>)
 800bd98:	486f      	ldr	r0, [pc, #444]	; (800bf58 <init+0x3d0>)
 800bd9a:	47a8      	blx	r5

	}
	// create the debug files
	if (ch.items.debug_enable) {
 800bd9c:	4b61      	ldr	r3, [pc, #388]	; (800bf24 <init+0x39c>)
 800bd9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d019      	beq.n	800bdd8 <init+0x250>

//		ptr_krnl -> make_file_handler ("PRG_TBL BIN ", sizeof (PRG_bank_tbl	), PRG__tbl_R, null_io		);
//		ptr_krnl -> make_file_handler ("CHR_TBL BIN ", sizeof (CHR_bank_tbl	), CHR__tbl_R, null_io		);
//		ptr_krnl -> make_file_handler ("OUTPARAMBIN ", sizeof (v			), outparam_R, null_io		);
		ptr_krnl -> make_file_handler ("BCMSCOREBIN ", sizeof (score		), scoretbl_R, null_io		);
 800bda4:	4b60      	ldr	r3, [pc, #384]	; (800bf28 <init+0x3a0>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685c      	ldr	r4, [r3, #4]
 800bdaa:	4b63      	ldr	r3, [pc, #396]	; (800bf38 <init+0x3b0>)
 800bdac:	4a6b      	ldr	r2, [pc, #428]	; (800bf5c <init+0x3d4>)
 800bdae:	2110      	movs	r1, #16
 800bdb0:	486b      	ldr	r0, [pc, #428]	; (800bf60 <init+0x3d8>)
 800bdb2:	47a0      	blx	r4
		ptr_krnl -> make_file_handler ("ROOT_TBLBIN ", sizeof (root_table	), root_tbl_R, null_io		);
 800bdb4:	4b5c      	ldr	r3, [pc, #368]	; (800bf28 <init+0x3a0>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	685c      	ldr	r4, [r3, #4]
 800bdba:	4b5f      	ldr	r3, [pc, #380]	; (800bf38 <init+0x3b0>)
 800bdbc:	4a69      	ldr	r2, [pc, #420]	; (800bf64 <init+0x3dc>)
 800bdbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bdc2:	4869      	ldr	r0, [pc, #420]	; (800bf68 <init+0x3e0>)
 800bdc4:	47a0      	blx	r4
		ptr_krnl -> make_file_handler ("DATA_TBLBIN ", sizeof (data_table	), data_tbl_R, null_io		);
 800bdc6:	4b58      	ldr	r3, [pc, #352]	; (800bf28 <init+0x3a0>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	685c      	ldr	r4, [r3, #4]
 800bdcc:	4b5a      	ldr	r3, [pc, #360]	; (800bf38 <init+0x3b0>)
 800bdce:	4a67      	ldr	r2, [pc, #412]	; (800bf6c <init+0x3e4>)
 800bdd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bdd4:	4866      	ldr	r0, [pc, #408]	; (800bf70 <init+0x3e8>)
 800bdd6:	47a0      	blx	r4
// 		ptr_krnl -> make_file_handler ("ERRORLOGBIN ", sizeof (error_info	), errorlog_R, null_io		);
//		debug.Buf [255] = 0;

	}
	// create a readme file
	if (ch.items.README_TXT_enable)
 800bdd8:	4b52      	ldr	r3, [pc, #328]	; (800bf24 <init+0x39c>)
 800bdda:	8b5b      	ldrh	r3, [r3, #26]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d007      	beq.n	800bdf0 <init+0x268>

		ptr_krnl -> make_file_handler ("README  TXT ", sizeof (readme_txt) - 1, readme_txt_R, null_io);
 800bde0:	4b51      	ldr	r3, [pc, #324]	; (800bf28 <init+0x3a0>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	685c      	ldr	r4, [r3, #4]
 800bde6:	4b54      	ldr	r3, [pc, #336]	; (800bf38 <init+0x3b0>)
 800bde8:	4a62      	ldr	r2, [pc, #392]	; (800bf74 <init+0x3ec>)
 800bdea:	214c      	movs	r1, #76	; 0x4c
 800bdec:	4862      	ldr	r0, [pc, #392]	; (800bf78 <init+0x3f0>)
 800bdee:	47a0      	blx	r4

	// turn on the cycle count register
	CoreDebug -> DEMCR |= 0x01000000;
 800bdf0:	4a62      	ldr	r2, [pc, #392]	; (800bf7c <init+0x3f4>)
 800bdf2:	4b62      	ldr	r3, [pc, #392]	; (800bf7c <init+0x3f4>)
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdfa:	60d3      	str	r3, [r2, #12]
	DWT -> CTRL |= 1;
 800bdfc:	4a60      	ldr	r2, [pc, #384]	; (800bf80 <init+0x3f8>)
 800bdfe:	4b60      	ldr	r3, [pc, #384]	; (800bf80 <init+0x3f8>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f043 0301 	orr.w	r3, r3, #1
 800be06:	6013      	str	r3, [r2, #0]

	// check for the NES demo
	if  (ch.items.DEMO_NES_enable)
 800be08:	4b46      	ldr	r3, [pc, #280]	; (800bf24 <init+0x39c>)
 800be0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d008      	beq.n	800be22 <init+0x29a>

		ptr_krnl -> make_file_handler ("DEMO    NES ", 40976, DEMO_NES_R, null_io);
 800be10:	4b45      	ldr	r3, [pc, #276]	; (800bf28 <init+0x3a0>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	685c      	ldr	r4, [r3, #4]
 800be16:	4b48      	ldr	r3, [pc, #288]	; (800bf38 <init+0x3b0>)
 800be18:	4a5a      	ldr	r2, [pc, #360]	; (800bf84 <init+0x3fc>)
 800be1a:	f24a 0110 	movw	r1, #40976	; 0xa010
 800be1e:	485a      	ldr	r0, [pc, #360]	; (800bf88 <init+0x400>)
 800be20:	47a0      	blx	r4

	// -------------------------------------------------------------------------------------------------
	if (ch.items.OVERRIDE_BIN_on || (ch.items.NES_2_0_enable >= 2 && ! ch.items.OVERRIDE_TXT_on))
 800be22:	4b40      	ldr	r3, [pc, #256]	; (800bf24 <init+0x39c>)
 800be24:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800be26:	2b00      	cmp	r3, #0
 800be28:	d107      	bne.n	800be3a <init+0x2b2>
 800be2a:	4b3e      	ldr	r3, [pc, #248]	; (800bf24 <init+0x39c>)
 800be2c:	8b1b      	ldrh	r3, [r3, #24]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d90c      	bls.n	800be4c <init+0x2c4>
 800be32:	4b3c      	ldr	r3, [pc, #240]	; (800bf24 <init+0x39c>)
 800be34:	8c1b      	ldrh	r3, [r3, #32]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d108      	bne.n	800be4c <init+0x2c4>

		ptr_krnl -> make_file_handler ("OVERRIDEBIN&", OVERRIDE_SIZE, override_R, override_W);
 800be3a:	4b3b      	ldr	r3, [pc, #236]	; (800bf28 <init+0x3a0>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	685c      	ldr	r4, [r3, #4]
 800be40:	4b52      	ldr	r3, [pc, #328]	; (800bf8c <init+0x404>)
 800be42:	4a53      	ldr	r2, [pc, #332]	; (800bf90 <init+0x408>)
 800be44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800be48:	4852      	ldr	r0, [pc, #328]	; (800bf94 <init+0x40c>)
 800be4a:	47a0      	blx	r4

	// check if mapper override mode is enabled
	if (ch.items.NES_2_0_enable >= 2) {
 800be4c:	4b35      	ldr	r3, [pc, #212]	; (800bf24 <init+0x39c>)
 800be4e:	8b1b      	ldrh	r3, [r3, #24]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d943      	bls.n	800bedc <init+0x354>
NO_CART:;
		// go to the mapper index
		unsigned int i = 0;
 800be54:	2300      	movs	r3, #0
 800be56:	617b      	str	r3, [r7, #20]
		ch.items.override_mode_index += ch.items.NES_2_0_enable - 1;
 800be58:	4b32      	ldr	r3, [pc, #200]	; (800bf24 <init+0x39c>)
 800be5a:	8ada      	ldrh	r2, [r3, #22]
 800be5c:	4b31      	ldr	r3, [pc, #196]	; (800bf24 <init+0x39c>)
 800be5e:	8b1b      	ldrh	r3, [r3, #24]
 800be60:	4413      	add	r3, r2
 800be62:	b29b      	uxth	r3, r3
 800be64:	3b01      	subs	r3, #1
 800be66:	b29a      	uxth	r2, r3
 800be68:	4b2e      	ldr	r3, [pc, #184]	; (800bf24 <init+0x39c>)
 800be6a:	82da      	strh	r2, [r3, #22]
		if (find_map_header (& i, ch.items.override_mode_index)) {
 800be6c:	4b2d      	ldr	r3, [pc, #180]	; (800bf24 <init+0x39c>)
 800be6e:	8adb      	ldrh	r3, [r3, #22]
 800be70:	461a      	mov	r2, r3
 800be72:	f107 0314 	add.w	r3, r7, #20
 800be76:	4611      	mov	r1, r2
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fc ff4b 	bl	8008d14 <find_map_header>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00d      	beq.n	800bea0 <init+0x318>

			// check the map override for errors
			i = check_map_abstract (& i);
 800be84:	f107 0314 	add.w	r3, r7, #20
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fc ff71 	bl	8008d70 <check_map_abstract>
 800be8e:	4603      	mov	r3, r0
 800be90:	617b      	str	r3, [r7, #20]
			if (i == 0)			{ setup_override ();		goto MAKE_NES; }
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d103      	bne.n	800bea0 <init+0x318>
 800be98:	f7fd f83e 	bl	8008f18 <setup_override>
 800be9c:	f001 b8e6 	b.w	800d06c <init+0x14e4>

		}
		// normalize the error code
		if (i > 10 /*(sizeof (check_err_codes) / 32)*/)		i = 0;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2b0a      	cmp	r3, #10
 800bea4:	d901      	bls.n	800beaa <init+0x322>
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]

		// print the error type to a file
		memset (report_txt, ' ', 512);
 800beaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beae:	2120      	movs	r1, #32
 800beb0:	4839      	ldr	r0, [pc, #228]	; (800bf98 <init+0x410>)
 800beb2:	f001 f9e6 	bl	800d282 <memset>
		register unsigned int * rp = (unsigned int *) & report_txt; rp [0] = 0x2e525245; report_txt [5] = i + '0';	// memcpy (report_txt, check_err_codes [i], 32);
 800beb6:	4c38      	ldr	r4, [pc, #224]	; (800bf98 <init+0x410>)
 800beb8:	4b38      	ldr	r3, [pc, #224]	; (800bf9c <init+0x414>)
 800beba:	6023      	str	r3, [r4, #0]
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	3330      	adds	r3, #48	; 0x30
 800bec2:	b2da      	uxtb	r2, r3
 800bec4:	4b34      	ldr	r3, [pc, #208]	; (800bf98 <init+0x410>)
 800bec6:	715a      	strb	r2, [r3, #5]
		ptr_krnl -> make_file_handler ("ROM     NES ", 16, ROM_NES_R, null_io);
 800bec8:	4b17      	ldr	r3, [pc, #92]	; (800bf28 <init+0x3a0>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	685c      	ldr	r4, [r3, #4]
 800bece:	4b1a      	ldr	r3, [pc, #104]	; (800bf38 <init+0x3b0>)
 800bed0:	4a33      	ldr	r2, [pc, #204]	; (800bfa0 <init+0x418>)
 800bed2:	2110      	movs	r1, #16
 800bed4:	4833      	ldr	r0, [pc, #204]	; (800bfa4 <init+0x41c>)
 800bed6:	47a0      	blx	r4
 800bed8:	f001 b980 	b.w	800d1dc <init+0x1654>

	}

// --------------------------------------------------------------------------------------
	// detect a cart by trying to read a ROM address twice with pull resistors programmed to opposite levels
	check_power_OK ();
 800bedc:	f7fc fae8 	bl	80084b0 <check_power_OK>
	GPIOB->CRH = 0x88888888;				// set the outputs to pull mode
 800bee0:	4b31      	ldr	r3, [pc, #196]	; (800bfa8 <init+0x420>)
 800bee2:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800bee6:	605a      	str	r2, [r3, #4]
	pull = ~CPU_R (0xFFFF);					// read the data & compliment it
 800bee8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800beec:	f7fc fb3c 	bl	8008568 <CPU_R>
 800bef0:	4603      	mov	r3, r0
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	43db      	mvns	r3, r3
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	4b2c      	ldr	r3, [pc, #176]	; (800bfac <init+0x424>)
 800befa:	701a      	strb	r2, [r3, #0]
	if (pull == CPU_R (0xFFFF)) {			// see if the bus pulls toward the compliment
 800befc:	4b2b      	ldr	r3, [pc, #172]	; (800bfac <init+0x424>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	461c      	mov	r4, r3
 800bf02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bf06:	f7fc fb2f 	bl	8008568 <CPU_R>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	429c      	cmp	r4, r3
 800bf0e:	d103      	bne.n	800bf18 <init+0x390>
DEMO:
		ch.items.NES_2_0_enable = 2;
 800bf10:	4b04      	ldr	r3, [pc, #16]	; (800bf24 <init+0x39c>)
 800bf12:	2202      	movs	r2, #2
 800bf14:	831a      	strh	r2, [r3, #24]
		goto NO_CART;
 800bf16:	e79d      	b.n	800be54 <init+0x2cc>
	}

// ASIC mapper class tests ---------------------------------------------------------------

	// bus conflicts test
    for (uint32_t i = 0; i<16; i++) {
 800bf18:	2300      	movs	r3, #0
 800bf1a:	677b      	str	r3, [r7, #116]	; 0x74
 800bf1c:	e337      	b.n	800c58e <init+0xa06>
 800bf1e:	bf00      	nop
 800bf20:	20003508 	.word	0x20003508
 800bf24:	20003638 	.word	0x20003638
 800bf28:	20003634 	.word	0x20003634
 800bf2c:	0800a621 	.word	0x0800a621
 800bf30:	0800a5f9 	.word	0x0800a5f9
 800bf34:	0800dd34 	.word	0x0800dd34
 800bf38:	0800835b 	.word	0x0800835b
 800bf3c:	0800ad05 	.word	0x0800ad05
 800bf40:	0800dd44 	.word	0x0800dd44
 800bf44:	0800ad29 	.word	0x0800ad29
 800bf48:	0800dd54 	.word	0x0800dd54
 800bf4c:	0800f000 	.word	0x0800f000
 800bf50:	0800a8b1 	.word	0x0800a8b1
 800bf54:	0800a7ad 	.word	0x0800a7ad
 800bf58:	0800dd64 	.word	0x0800dd64
 800bf5c:	0800a411 	.word	0x0800a411
 800bf60:	0800dd74 	.word	0x0800dd74
 800bf64:	0800a43d 	.word	0x0800a43d
 800bf68:	0800dd84 	.word	0x0800dd84
 800bf6c:	0800a461 	.word	0x0800a461
 800bf70:	0800dd94 	.word	0x0800dd94
 800bf74:	0800ace1 	.word	0x0800ace1
 800bf78:	0800dda4 	.word	0x0800dda4
 800bf7c:	e000edf0 	.word	0xe000edf0
 800bf80:	e0001000 	.word	0xe0001000
 800bf84:	0800ad5d 	.word	0x0800ad5d
 800bf88:	0800ddb4 	.word	0x0800ddb4
 800bf8c:	0800a571 	.word	0x0800a571
 800bf90:	0800a549 	.word	0x0800a549
 800bf94:	0800ddc4 	.word	0x0800ddc4
 800bf98:	200032c8 	.word	0x200032c8
 800bf9c:	2e525245 	.word	0x2e525245
 800bfa0:	0800ad85 	.word	0x0800ad85
 800bfa4:	0800ddd4 	.word	0x0800ddd4
 800bfa8:	40010c00 	.word	0x40010c00
 800bfac:	20002af0 	.word	0x20002af0
    	uint8_t d = CPU_R (i + 0xFFF0);				//	get the data
 800bfb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfb2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800bfb6:	33f0      	adds	r3, #240	; 0xf0
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fc fad5 	bl	8008568 <CPU_R>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    	uint8_t w = d ^ 0xFF;
 800bfc4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bfc8:	43db      	mvns	r3, r3
 800bfca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    	GPIOB->ODR = w << 8;
 800bfce:	4a9f      	ldr	r2, [pc, #636]	; (800c24c <init+0x6c4>)
 800bfd0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bfd4:	021b      	lsls	r3, r3, #8
 800bfd6:	60d3      	str	r3, [r2, #12]
    	chill (1000);								//	experimental
 800bfd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bfdc:	f7fc f9c4 	bl	8008368 <chill>
    	if (d != CPU_W (i + 0xFFF0, w)) {
 800bfe0:	f897 403b 	ldrb.w	r4, [r7, #59]	; 0x3b
 800bfe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfe6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800bfea:	33f0      	adds	r3, #240	; 0xf0
 800bfec:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800bff0:	4611      	mov	r1, r2
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fc faec 	bl	80085d0 <CPU_W>
 800bff8:	4603      	mov	r3, r0
 800bffa:	429c      	cmp	r4, r3
 800bffc:	f000 82c4 	beq.w	800c588 <init+0xa00>

    		// no bus conflicts, so test ASIC types first
    		CPU_W_disable = 0x44444444;
 800c000:	4b93      	ldr	r3, [pc, #588]	; (800c250 <init+0x6c8>)
 800c002:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 800c006:	601a      	str	r2, [r3, #0]
    		CPU_W_enable  = 0x33333333;				//	outputs are enabled
 800c008:	4b92      	ldr	r3, [pc, #584]	; (800c254 <init+0x6cc>)
 800c00a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800c00e:	601a      	str	r2, [r3, #0]
    		if (! ch.items.ASIC_map_testing_on)		goto ASIC_SKIP;
 800c010:	4b91      	ldr	r3, [pc, #580]	; (800c258 <init+0x6d0>)
 800c012:	899b      	ldrh	r3, [r3, #12]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 82e9 	beq.w	800c5ec <init+0xa64>

    		// process the ASIC mapper list
    		CPU_W (0x8000, 128);					//	JUST for reseting the MMC1!
 800c01a:	2180      	movs	r1, #128	; 0x80
 800c01c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c020:	f7fc fad6 	bl	80085d0 <CPU_W>
    		for (q = 0; q < ASIC_cnt - ASIC_NO_MIRR; q ++)
 800c024:	2400      	movs	r4, #0
 800c026:	e049      	b.n	800c0bc <init+0x534>
    			if (PPU_mirroring_test (q)) {		//	short-circuit ASIC mapper type identification test
 800c028:	4620      	mov	r0, r4
 800c02a:	f7ff f96d 	bl	800b308 <PPU_mirroring_test>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d042      	beq.n	800c0ba <init+0x532>
ASIC_INIT:			map = ASIC_types [q];			//	load descriptor for detected type
 800c034:	4989      	ldr	r1, [pc, #548]	; (800c25c <init+0x6d4>)
 800c036:	4a8a      	ldr	r2, [pc, #552]	; (800c260 <init+0x6d8>)
 800c038:	01a3      	lsls	r3, r4, #6
 800c03a:	4413      	add	r3, r2
 800c03c:	460d      	mov	r5, r1
 800c03e:	461e      	mov	r6, r3
 800c040:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c044:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c048:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c04a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c04c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800c050:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 	  	  			map.INIT_ ();					//	enables SRAM, sets PRG/CHR banking modes
 800c054:	4b81      	ldr	r3, [pc, #516]	; (800c25c <init+0x6d4>)
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	4798      	blx	r3
    				scan_PRG  ();					//	info [ 4]
 800c05a:	f7ff fa99 	bl	800b590 <scan_PRG>
    				scan_CHR  ();					//	info [ 5]
 800c05e:	f7ff f9c1 	bl	800b3e4 <scan_CHR>
    				scan_SAV  ();					//	info [10]
 800c062:	f7ff fb1f 	bl	800b6a4 <scan_SAV>
 800c066:	e002      	b.n	800c06e <init+0x4e6>
    		// ----------------------------------------------------------------------------------
    		// try and find a MIMIC-1
    		map = ASIC_types [q];
    		scan_PRG ();
    		scan_CHR ();
    		if ((info.b [4] & info_4_mask) | (info.b [5] & info_5_mask)) goto ASIC_SETUP_2;
 800c068:	bf00      	nop
 800c06a:	e000      	b.n	800c06e <init+0x4e6>
		// NINA-03/06 test
		q = NINA_SLOT;
		map = ASIC_types [q];
		scan_PRG ();
		scan_CHR ();
		if ((info.b [4] & info_4_mask) | (info.b [5] & info_5_mask)) goto ASIC_SETUP_2;
 800c06c:	bf00      	nop
ASIC_SETUP_2:		info.b [6] |= map.map_no << 4;	//	low nibble
 800c06e:	4b7d      	ldr	r3, [pc, #500]	; (800c264 <init+0x6dc>)
 800c070:	799b      	ldrb	r3, [r3, #6]
 800c072:	b25a      	sxtb	r2, r3
 800c074:	4b79      	ldr	r3, [pc, #484]	; (800c25c <init+0x6d4>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	011b      	lsls	r3, r3, #4
 800c07a:	b25b      	sxtb	r3, r3
 800c07c:	4313      	orrs	r3, r2
 800c07e:	b25b      	sxtb	r3, r3
 800c080:	b2da      	uxtb	r2, r3
 800c082:	4b78      	ldr	r3, [pc, #480]	; (800c264 <init+0x6dc>)
 800c084:	719a      	strb	r2, [r3, #6]
    				info.b [7] |= map.map_no & 0xF0;//	high nibble
 800c086:	4b77      	ldr	r3, [pc, #476]	; (800c264 <init+0x6dc>)
 800c088:	79db      	ldrb	r3, [r3, #7]
 800c08a:	b25a      	sxtb	r2, r3
 800c08c:	4b73      	ldr	r3, [pc, #460]	; (800c25c <init+0x6d4>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	b25b      	sxtb	r3, r3
 800c092:	f023 030f 	bic.w	r3, r3, #15
 800c096:	b25b      	sxtb	r3, r3
 800c098:	4313      	orrs	r3, r2
 800c09a:	b25b      	sxtb	r3, r3
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	4b71      	ldr	r3, [pc, #452]	; (800c264 <init+0x6dc>)
 800c0a0:	71da      	strb	r2, [r3, #7]
    				map.TEST_ ();					//	run any mapper-specific tests
 800c0a2:	4b6e      	ldr	r3, [pc, #440]	; (800c25c <init+0x6d4>)
 800c0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a6:	4798      	blx	r3
    				ASIC_types [q].MIR_.mirr (1);	//	set horizontal mirroring as default
 800c0a8:	4a6d      	ldr	r2, [pc, #436]	; (800c260 <init+0x6d8>)
 800c0aa:	01a3      	lsls	r3, r4, #6
 800c0ac:	4413      	add	r3, r2
 800c0ae:	331c      	adds	r3, #28
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2001      	movs	r0, #1
 800c0b4:	4798      	blx	r3
 800c0b6:	f000 bf9a 	b.w	800cfee <init+0x1466>
    		for (q = 0; q < ASIC_cnt - ASIC_NO_MIRR; q ++)
 800c0ba:	3401      	adds	r4, #1
 800c0bc:	4623      	mov	r3, r4
 800c0be:	2b13      	cmp	r3, #19
 800c0c0:	d9b2      	bls.n	800c028 <init+0x4a0>
    		map = ASIC_types [q];
 800c0c2:	4966      	ldr	r1, [pc, #408]	; (800c25c <init+0x6d4>)
 800c0c4:	4a66      	ldr	r2, [pc, #408]	; (800c260 <init+0x6d8>)
 800c0c6:	01a3      	lsls	r3, r4, #6
 800c0c8:	4413      	add	r3, r2
 800c0ca:	460d      	mov	r5, r1
 800c0cc:	461e      	mov	r6, r3
 800c0ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c0d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c0d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c0d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c0d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c0d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c0da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800c0de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    		CPU_W (0x5000, 	 32);	PPU_W (0x2000, 0x55);				//	clear NT bank bit $5000 = 0
 800c0e2:	2120      	movs	r1, #32
 800c0e4:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800c0e8:	f7fc fa72 	bl	80085d0 <CPU_W>
 800c0ec:	2155      	movs	r1, #85	; 0x55
 800c0ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c0f2:	f7fc fae7 	bl	80086c4 <PPU_W>
    		CPU_W (0x5000, 	  0);	PPU_W (0x2000, 0xAA);				//	set NT bank bit $5000 = 32
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800c0fc:	f7fc fa68 	bl	80085d0 <CPU_W>
 800c100:	21aa      	movs	r1, #170	; 0xaa
 800c102:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c106:	f7fc fadd 	bl	80086c4 <PPU_W>
    		CPU_W (0x5000, 	 32);	tmp [0] = CPU_R (0x2000);			//	clear NT bank bit $5000 = 0
 800c10a:	2120      	movs	r1, #32
 800c10c:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800c110:	f7fc fa5e 	bl	80085d0 <CPU_W>
 800c114:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c118:	f7fc fa26 	bl	8008568 <CPU_R>
 800c11c:	4603      	mov	r3, r0
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	743b      	strb	r3, [r7, #16]
    		CPU_W (0x5000, 	  0);	tmp [1] = CPU_R (0x2000);			//	set NT bank bit $5000 = 32
 800c122:	2100      	movs	r1, #0
 800c124:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800c128:	f7fc fa52 	bl	80085d0 <CPU_W>
 800c12c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c130:	f7fc fa1a 	bl	8008568 <CPU_R>
 800c134:	4603      	mov	r3, r0
 800c136:	b2db      	uxtb	r3, r3
 800c138:	747b      	strb	r3, [r7, #17]
    		if (tmp [0] == 0x55 && tmp [1] == 0xAA)	{					//	confirm signature is read back
 800c13a:	7c3b      	ldrb	r3, [r7, #16]
 800c13c:	2b55      	cmp	r3, #85	; 0x55
 800c13e:	f040 8095 	bne.w	800c26c <init+0x6e4>
 800c142:	7c7b      	ldrb	r3, [r7, #17]
 800c144:	2baa      	cmp	r3, #170	; 0xaa
 800c146:	f040 8091 	bne.w	800c26c <init+0x6e4>
    			CPU_W (0xD555, 0xAA);
 800c14a:	21aa      	movs	r1, #170	; 0xaa
 800c14c:	f24d 5055 	movw	r0, #54613	; 0xd555
 800c150:	f7fc fa3e 	bl	80085d0 <CPU_W>
    			CPU_W (0xAAAA, 0x55);
 800c154:	2155      	movs	r1, #85	; 0x55
 800c156:	f64a 20aa 	movw	r0, #43690	; 0xaaaa
 800c15a:	f7fc fa39 	bl	80085d0 <CPU_W>
    			CPU_W (0xD555, 0x90);
 800c15e:	2190      	movs	r1, #144	; 0x90
 800c160:	f24d 5055 	movw	r0, #54613	; 0xd555
 800c164:	f7fc fa34 	bl	80085d0 <CPU_W>
    			chill (40);    											//	wait for t_IDA
 800c168:	2028      	movs	r0, #40	; 0x28
 800c16a:	f7fc f8fd 	bl	8008368 <chill>
    			tmp [0] = CPU_R (0x8000);
 800c16e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c172:	f7fc f9f9 	bl	8008568 <CPU_R>
 800c176:	4603      	mov	r3, r0
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	743b      	strb	r3, [r7, #16]
    			tmp [1] = CPU_R (0x8001);
 800c17c:	f248 0001 	movw	r0, #32769	; 0x8001
 800c180:	f7fc f9f2 	bl	8008568 <CPU_R>
 800c184:	4603      	mov	r3, r0
 800c186:	b2db      	uxtb	r3, r3
 800c188:	747b      	strb	r3, [r7, #17]
    			if (tmp [0] == 0xBF && tmp [1] >= 0xb5 && tmp [1] <= 0xb7) {
 800c18a:	7c3b      	ldrb	r3, [r7, #16]
 800c18c:	2bbf      	cmp	r3, #191	; 0xbf
 800c18e:	d16d      	bne.n	800c26c <init+0x6e4>
 800c190:	7c7b      	ldrb	r3, [r7, #17]
 800c192:	2bb4      	cmp	r3, #180	; 0xb4
 800c194:	d96a      	bls.n	800c26c <init+0x6e4>
 800c196:	7c7b      	ldrb	r3, [r7, #17]
 800c198:	2bb7      	cmp	r3, #183	; 0xb7
 800c19a:	d867      	bhi.n	800c26c <init+0x6e4>
    				unsigned int u			= 65536 << (tmp [1] - 0xB5);//	0xB5: 128KB;  0xB6: 256KB;  0xB7: 512KB
 800c19c:	7c7b      	ldrb	r3, [r7, #17]
 800c19e:	3bb5      	subs	r3, #181	; 0xb5
 800c1a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a8:	637b      	str	r3, [r7, #52]	; 0x34
    	    		unsigned int bank_size	= 1 << map.PRG_bank_size;
 800c1aa:	4b2c      	ldr	r3, [pc, #176]	; (800c25c <init+0x6d4>)
 800c1ac:	799b      	ldrb	r3, [r3, #6]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	4093      	lsls	r3, r2
 800c1b4:	633b      	str	r3, [r7, #48]	; 0x30
        			v.PRG_ROM_size			= u + u;
 800c1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ba:	4413      	add	r3, r2
 800c1bc:	4a2a      	ldr	r2, [pc, #168]	; (800c268 <init+0x6e0>)
 800c1be:	6013      	str	r3, [r2, #0]
    	    		v.PRG_mask				= bank_size - 1;
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	4b27      	ldr	r3, [pc, #156]	; (800c268 <init+0x6e0>)
 800c1ca:	811a      	strh	r2, [r3, #8]
    	    		info.r.PRG_bank_ofs		= map.PRG_ofs << map.PRG_bank_size;
 800c1cc:	4b23      	ldr	r3, [pc, #140]	; (800c25c <init+0x6d4>)
 800c1ce:	79db      	ldrb	r3, [r3, #7]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	4b22      	ldr	r3, [pc, #136]	; (800c25c <init+0x6d4>)
 800c1d4:	799b      	ldrb	r3, [r3, #6]
 800c1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	4b21      	ldr	r3, [pc, #132]	; (800c264 <init+0x6dc>)
 800c1de:	821a      	strh	r2, [r3, #16]
    	    		info.r.PRG_bank_bits	= map.PRG_bank_size;
 800c1e0:	4b1e      	ldr	r3, [pc, #120]	; (800c25c <init+0x6d4>)
 800c1e2:	799a      	ldrb	r2, [r3, #6]
 800c1e4:	4b1f      	ldr	r3, [pc, #124]	; (800c264 <init+0x6dc>)
 800c1e6:	761a      	strb	r2, [r3, #24]
   					v.PRG_bank_mask			= (v.PRG_ROM_size - bank_size) | b31;
 800c1e8:	4b1f      	ldr	r3, [pc, #124]	; (800c268 <init+0x6e0>)
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1f4:	4a1c      	ldr	r2, [pc, #112]	; (800c268 <init+0x6e0>)
 800c1f6:	6053      	str	r3, [r2, #4]
   					info.b [ 4]				= u >> 13;
 800c1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fa:	0b5b      	lsrs	r3, r3, #13
 800c1fc:	b2da      	uxtb	r2, r3
 800c1fe:	4b19      	ldr	r3, [pc, #100]	; (800c264 <init+0x6dc>)
 800c200:	711a      	strb	r2, [r3, #4]
    				info.b [ 5]				= 0;						//	CHR-RAM not present
 800c202:	4b18      	ldr	r3, [pc, #96]	; (800c264 <init+0x6dc>)
 800c204:	2200      	movs	r2, #0
 800c206:	715a      	strb	r2, [r3, #5]
    				info.b [ 6]				= 0xFA;						//	set lo mapper bits, set battery bit, 4-screen
 800c208:	4b16      	ldr	r3, [pc, #88]	; (800c264 <init+0x6dc>)
 800c20a:	22fa      	movs	r2, #250	; 0xfa
 800c20c:	719a      	strb	r2, [r3, #6]
    				info.b [ 7]				= 0x60;						//	set hi mapper bits
 800c20e:	4b15      	ldr	r3, [pc, #84]	; (800c264 <init+0x6dc>)
 800c210:	2260      	movs	r2, #96	; 0x60
 800c212:	71da      	strb	r2, [r3, #7]
    				info.b [10]				= (tmp [1] - 0xAA) << 4;	//	set the PRG-EEPROM shift count
 800c214:	7c7b      	ldrb	r3, [r7, #17]
 800c216:	3356      	adds	r3, #86	; 0x56
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	011b      	lsls	r3, r3, #4
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	4b11      	ldr	r3, [pc, #68]	; (800c264 <init+0x6dc>)
 800c220:	729a      	strb	r2, [r3, #10]
    				info.b [11]				= 9;						//	set the CHR-RAM field to 32KB
 800c222:	4b10      	ldr	r3, [pc, #64]	; (800c264 <init+0x6dc>)
 800c224:	2209      	movs	r2, #9
 800c226:	72da      	strb	r2, [r3, #11]
    	    		CPU_W (0x8000, 0xF0);								//	software ID exit
 800c228:	21f0      	movs	r1, #240	; 0xf0
 800c22a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c22e:	f7fc f9cf 	bl	80085d0 <CPU_W>
        			chill (40);    										//	wait for t_IDA
 800c232:	2028      	movs	r0, #40	; 0x28
 800c234:	f7fc f898 	bl	8008368 <chill>
        			v.mode |= 1;
 800c238:	4b0b      	ldr	r3, [pc, #44]	; (800c268 <init+0x6e0>)
 800c23a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800c23e:	f043 0301 	orr.w	r3, r3, #1
 800c242:	b2da      	uxtb	r2, r3
 800c244:	4b08      	ldr	r3, [pc, #32]	; (800c268 <init+0x6e0>)
 800c246:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    				goto ASIC_SETUP_2;
 800c24a:	e710      	b.n	800c06e <init+0x4e6>
 800c24c:	40010c00 	.word	0x40010c00
 800c250:	20002ca0 	.word	0x20002ca0
 800c254:	20002c98 	.word	0x20002c98
 800c258:	20003638 	.word	0x20003638
 800c25c:	20002aac 	.word	0x20002aac
 800c260:	0800e098 	.word	0x0800e098
 800c264:	2000288c 	.word	0x2000288c
 800c268:	200034cc 	.word	0x200034cc
    		q ++;
 800c26c:	3401      	adds	r4, #1
    		map = ASIC_types [q];
 800c26e:	49c0      	ldr	r1, [pc, #768]	; (800c570 <init+0x9e8>)
 800c270:	4ac0      	ldr	r2, [pc, #768]	; (800c574 <init+0x9ec>)
 800c272:	01a3      	lsls	r3, r4, #6
 800c274:	4413      	add	r3, r2
 800c276:	460d      	mov	r5, r1
 800c278:	461e      	mov	r6, r3
 800c27a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c27c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c27e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c282:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c286:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800c28a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    		tmp [0] = ~PPU_R (0x0000);
 800c28e:	2000      	movs	r0, #0
 800c290:	f7fc f9e8 	bl	8008664 <PPU_R>
 800c294:	4603      	mov	r3, r0
 800c296:	b2db      	uxtb	r3, r3
 800c298:	43db      	mvns	r3, r3
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	743b      	strb	r3, [r7, #16]
    		tmp [1] = ~PPU_R (0x1000);
 800c29e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c2a2:	f7fc f9df 	bl	8008664 <PPU_R>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	43db      	mvns	r3, r3
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	747b      	strb	r3, [r7, #17]
    		PPU_W (0x0000, tmp [0]);
 800c2b0:	7c3b      	ldrb	r3, [r7, #16]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	f7fc fa05 	bl	80086c4 <PPU_W>
    		PPU_W (0x1000, tmp [1]);
 800c2ba:	7c7b      	ldrb	r3, [r7, #17]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c2c2:	f7fc f9ff 	bl	80086c4 <PPU_W>
    		if (tmp [0] == PPU_R (0x0000) && tmp [1] == PPU_R (0x1000)) {
 800c2c6:	7c3b      	ldrb	r3, [r7, #16]
 800c2c8:	461d      	mov	r5, r3
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7fc f9ca 	bl	8008664 <PPU_R>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	429d      	cmp	r5, r3
 800c2d4:	f040 8124 	bne.w	800c520 <init+0x998>
 800c2d8:	7c7b      	ldrb	r3, [r7, #17]
 800c2da:	461d      	mov	r5, r3
 800c2dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c2e0:	f7fc f9c0 	bl	8008664 <PPU_R>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	429d      	cmp	r5, r3
 800c2e8:	f040 811a 	bne.w	800c520 <init+0x998>
    			CPU_W (0xC000, 1); CPU_W (0x9555, 0xAA);
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800c2f2:	f7fc f96d 	bl	80085d0 <CPU_W>
 800c2f6:	21aa      	movs	r1, #170	; 0xaa
 800c2f8:	f249 5055 	movw	r0, #38229	; 0x9555
 800c2fc:	f7fc f968 	bl	80085d0 <CPU_W>
    			CPU_W (0xC000, 0); CPU_W (0xAAAA, 0x55);
 800c300:	2100      	movs	r1, #0
 800c302:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800c306:	f7fc f963 	bl	80085d0 <CPU_W>
 800c30a:	2155      	movs	r1, #85	; 0x55
 800c30c:	f64a 20aa 	movw	r0, #43690	; 0xaaaa
 800c310:	f7fc f95e 	bl	80085d0 <CPU_W>
    			CPU_W (0xC000, 1); CPU_W (0x9555, 0x90);
 800c314:	2101      	movs	r1, #1
 800c316:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800c31a:	f7fc f959 	bl	80085d0 <CPU_W>
 800c31e:	2190      	movs	r1, #144	; 0x90
 800c320:	f249 5055 	movw	r0, #38229	; 0x9555
 800c324:	f7fc f954 	bl	80085d0 <CPU_W>
    			chill (40);    											//	wait for t_IDA
 800c328:	2028      	movs	r0, #40	; 0x28
 800c32a:	f7fc f81d 	bl	8008368 <chill>
    			CPU_W (0xC000, 0);
 800c32e:	2100      	movs	r1, #0
 800c330:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800c334:	f7fc f94c 	bl	80085d0 <CPU_W>
    			tmp [0] = CPU_R (0x8000);
 800c338:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c33c:	f7fc f914 	bl	8008568 <CPU_R>
 800c340:	4603      	mov	r3, r0
 800c342:	b2db      	uxtb	r3, r3
 800c344:	743b      	strb	r3, [r7, #16]
    			tmp [1] = CPU_R (0x8001);
 800c346:	f248 0001 	movw	r0, #32769	; 0x8001
 800c34a:	f7fc f90d 	bl	8008568 <CPU_R>
 800c34e:	4603      	mov	r3, r0
 800c350:	b2db      	uxtb	r3, r3
 800c352:	747b      	strb	r3, [r7, #17]
    			if (tmp [0] == 0xBF && tmp [1] >= 0xB5 && tmp [1] <= 0xB7) {
 800c354:	7c3b      	ldrb	r3, [r7, #16]
 800c356:	2bbf      	cmp	r3, #191	; 0xbf
 800c358:	f040 80e2 	bne.w	800c520 <init+0x998>
 800c35c:	7c7b      	ldrb	r3, [r7, #17]
 800c35e:	2bb4      	cmp	r3, #180	; 0xb4
 800c360:	f240 80de 	bls.w	800c520 <init+0x998>
 800c364:	7c7b      	ldrb	r3, [r7, #17]
 800c366:	2bb7      	cmp	r3, #183	; 0xb7
 800c368:	f200 80da 	bhi.w	800c520 <init+0x998>
    				unsigned int u			= 65536 << (tmp [1] - 0xB5);//	0xB5: 128KB;  0xB6: 256KB;  0xB7: 512KB
 800c36c:	7c7b      	ldrb	r3, [r7, #17]
 800c36e:	3bb5      	subs	r3, #181	; 0xb5
 800c370:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c374:	fa02 f303 	lsl.w	r3, r2, r3
 800c378:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    		unsigned int bank_size	= 1 << map.PRG_bank_size;
 800c37a:	4b7d      	ldr	r3, [pc, #500]	; (800c570 <init+0x9e8>)
 800c37c:	799b      	ldrb	r3, [r3, #6]
 800c37e:	461a      	mov	r2, r3
 800c380:	2301      	movs	r3, #1
 800c382:	4093      	lsls	r3, r2
 800c384:	62bb      	str	r3, [r7, #40]	; 0x28
        			v.PRG_ROM_size			= u + u;
 800c386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38a:	4413      	add	r3, r2
 800c38c:	4a7a      	ldr	r2, [pc, #488]	; (800c578 <init+0x9f0>)
 800c38e:	6013      	str	r3, [r2, #0]
    	    		v.PRG_mask				= bank_size - 1;
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	b29b      	uxth	r3, r3
 800c394:	3b01      	subs	r3, #1
 800c396:	b29a      	uxth	r2, r3
 800c398:	4b77      	ldr	r3, [pc, #476]	; (800c578 <init+0x9f0>)
 800c39a:	811a      	strh	r2, [r3, #8]
    	    		info.r.PRG_bank_ofs		= map.PRG_ofs << map.PRG_bank_size;
 800c39c:	4b74      	ldr	r3, [pc, #464]	; (800c570 <init+0x9e8>)
 800c39e:	79db      	ldrb	r3, [r3, #7]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	4b73      	ldr	r3, [pc, #460]	; (800c570 <init+0x9e8>)
 800c3a4:	799b      	ldrb	r3, [r3, #6]
 800c3a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	4b73      	ldr	r3, [pc, #460]	; (800c57c <init+0x9f4>)
 800c3ae:	821a      	strh	r2, [r3, #16]
    	    		info.r.PRG_bank_bits	= map.PRG_bank_size;
 800c3b0:	4b6f      	ldr	r3, [pc, #444]	; (800c570 <init+0x9e8>)
 800c3b2:	799a      	ldrb	r2, [r3, #6]
 800c3b4:	4b71      	ldr	r3, [pc, #452]	; (800c57c <init+0x9f4>)
 800c3b6:	761a      	strb	r2, [r3, #24]
   					v.PRG_bank_mask			= (v.PRG_ROM_size - bank_size) | b31;
 800c3b8:	4b6f      	ldr	r3, [pc, #444]	; (800c578 <init+0x9f0>)
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3c4:	4a6c      	ldr	r2, [pc, #432]	; (800c578 <init+0x9f0>)
 800c3c6:	6053      	str	r3, [r2, #4]
   					info.b [ 4]				= u >> 13;
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	0b5b      	lsrs	r3, r3, #13
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	4b6b      	ldr	r3, [pc, #428]	; (800c57c <init+0x9f4>)
 800c3d0:	711a      	strb	r2, [r3, #4]
    				info.b [ 5]				= 0;						//	CHR-RAM not present
 800c3d2:	4b6a      	ldr	r3, [pc, #424]	; (800c57c <init+0x9f4>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	715a      	strb	r2, [r3, #5]
    				info.b [ 6]				= 0xE2;
 800c3d8:	4b68      	ldr	r3, [pc, #416]	; (800c57c <init+0x9f4>)
 800c3da:	22e2      	movs	r2, #226	; 0xe2
 800c3dc:	719a      	strb	r2, [r3, #6]
    				info.b [ 7]				= 0x10;						//	set hi mapper bits
 800c3de:	4b67      	ldr	r3, [pc, #412]	; (800c57c <init+0x9f4>)
 800c3e0:	2210      	movs	r2, #16
 800c3e2:	71da      	strb	r2, [r3, #7]
    				info.b [10]				= (tmp [1] - 0xAA) << 4;	//	set the PRG-EEPROM shift count
 800c3e4:	7c7b      	ldrb	r3, [r7, #17]
 800c3e6:	3356      	adds	r3, #86	; 0x56
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	011b      	lsls	r3, r3, #4
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	4b63      	ldr	r3, [pc, #396]	; (800c57c <init+0x9f4>)
 800c3f0:	729a      	strb	r2, [r3, #10]
        			CPU_W (0xC000, 0x00); PPU_W (0x0000, 0x55);
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800c3f8:	f7fc f8ea 	bl	80085d0 <CPU_W>
 800c3fc:	2155      	movs	r1, #85	; 0x55
 800c3fe:	2000      	movs	r0, #0
 800c400:	f7fc f960 	bl	80086c4 <PPU_W>
        			CPU_W (0xC000, 0x60); PPU_W (0x0000, 0xAA);
 800c404:	2160      	movs	r1, #96	; 0x60
 800c406:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800c40a:	f7fc f8e1 	bl	80085d0 <CPU_W>
 800c40e:	21aa      	movs	r1, #170	; 0xaa
 800c410:	2000      	movs	r0, #0
 800c412:	f7fc f957 	bl	80086c4 <PPU_W>
        			CPU_W (0xC000, 0x00); tmp [0] = PPU_R (0x0000);
 800c416:	2100      	movs	r1, #0
 800c418:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800c41c:	f7fc f8d8 	bl	80085d0 <CPU_W>
 800c420:	2000      	movs	r0, #0
 800c422:	f7fc f91f 	bl	8008664 <PPU_R>
 800c426:	4603      	mov	r3, r0
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	743b      	strb	r3, [r7, #16]
        			CPU_W (0xC000, 0x60); tmp [1] = PPU_R (0x0000);
 800c42c:	2160      	movs	r1, #96	; 0x60
 800c42e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800c432:	f7fc f8cd 	bl	80085d0 <CPU_W>
 800c436:	2000      	movs	r0, #0
 800c438:	f7fc f914 	bl	8008664 <PPU_R>
 800c43c:	4603      	mov	r3, r0
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	747b      	strb	r3, [r7, #17]
            		if (tmp [0] == 0x55 && tmp [1] == 0xAA)							info.b [11] = 9;
 800c442:	7c3b      	ldrb	r3, [r7, #16]
 800c444:	2b55      	cmp	r3, #85	; 0x55
 800c446:	d106      	bne.n	800c456 <init+0x8ce>
 800c448:	7c7b      	ldrb	r3, [r7, #17]
 800c44a:	2baa      	cmp	r3, #170	; 0xaa
 800c44c:	d103      	bne.n	800c456 <init+0x8ce>
 800c44e:	4b4b      	ldr	r3, [pc, #300]	; (800c57c <init+0x9f4>)
 800c450:	2209      	movs	r2, #9
 800c452:	72da      	strb	r2, [r3, #11]
 800c454:	e002      	b.n	800c45c <init+0x8d4>
            		else															info.b [11] = 7;
 800c456:	4b49      	ldr	r3, [pc, #292]	; (800c57c <init+0x9f4>)
 800c458:	2207      	movs	r2, #7
 800c45a:	72da      	strb	r2, [r3, #11]
            		tmp [0] = ~PPU_R (0x2000);
 800c45c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c460:	f7fc f900 	bl	8008664 <PPU_R>
 800c464:	4603      	mov	r3, r0
 800c466:	b2db      	uxtb	r3, r3
 800c468:	43db      	mvns	r3, r3
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	743b      	strb	r3, [r7, #16]
            		tmp [1] = ~PPU_R (0x3000);
 800c46e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800c472:	f7fc f8f7 	bl	8008664 <PPU_R>
 800c476:	4603      	mov	r3, r0
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	43db      	mvns	r3, r3
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	747b      	strb	r3, [r7, #17]
            		PPU_W (0x2000, tmp [0]);
 800c480:	7c3b      	ldrb	r3, [r7, #16]
 800c482:	4619      	mov	r1, r3
 800c484:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c488:	f7fc f91c 	bl	80086c4 <PPU_W>
            		PPU_W (0x3000, tmp [1]);
 800c48c:	7c7b      	ldrb	r3, [r7, #17]
 800c48e:	4619      	mov	r1, r3
 800c490:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800c494:	f7fc f916 	bl	80086c4 <PPU_W>
            		if (tmp [0] == PPU_R (0x2000) && tmp [1] == PPU_R (0x3000))		info.b [6] = 0xEB;
 800c498:	7c3b      	ldrb	r3, [r7, #16]
 800c49a:	461d      	mov	r5, r3
 800c49c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c4a0:	f7fc f8e0 	bl	8008664 <PPU_R>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	429d      	cmp	r5, r3
 800c4a8:	d10c      	bne.n	800c4c4 <init+0x93c>
 800c4aa:	7c7b      	ldrb	r3, [r7, #17]
 800c4ac:	461d      	mov	r5, r3
 800c4ae:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800c4b2:	f7fc f8d7 	bl	8008664 <PPU_R>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	429d      	cmp	r5, r3
 800c4ba:	d103      	bne.n	800c4c4 <init+0x93c>
 800c4bc:	4b2f      	ldr	r3, [pc, #188]	; (800c57c <init+0x9f4>)
 800c4be:	22eb      	movs	r2, #235	; 0xeb
 800c4c0:	719a      	strb	r2, [r3, #6]
 800c4c2:	e008      	b.n	800c4d6 <init+0x94e>
            		else if (PPU_mirroring_test (q))								info.b [6] = 0xEA;
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f7fe ff1f 	bl	800b308 <PPU_mirroring_test>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <init+0x94e>
 800c4d0:	4b2a      	ldr	r3, [pc, #168]	; (800c57c <init+0x9f4>)
 800c4d2:	22ea      	movs	r2, #234	; 0xea
 800c4d4:	719a      	strb	r2, [r3, #6]
    				if ((info.b [6] & 8) && PPU_mirroring_test_2 (0x35, 0x6C) == 0x35) info.b [6] --;
 800c4d6:	4b29      	ldr	r3, [pc, #164]	; (800c57c <init+0x9f4>)
 800c4d8:	799b      	ldrb	r3, [r3, #6]
 800c4da:	f003 0308 	and.w	r3, r3, #8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00c      	beq.n	800c4fc <init+0x974>
 800c4e2:	216c      	movs	r1, #108	; 0x6c
 800c4e4:	2035      	movs	r0, #53	; 0x35
 800c4e6:	f7fe ff49 	bl	800b37c <PPU_mirroring_test_2>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b35      	cmp	r3, #53	; 0x35
 800c4ee:	d105      	bne.n	800c4fc <init+0x974>
 800c4f0:	4b22      	ldr	r3, [pc, #136]	; (800c57c <init+0x9f4>)
 800c4f2:	799b      	ldrb	r3, [r3, #6]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	4b20      	ldr	r3, [pc, #128]	; (800c57c <init+0x9f4>)
 800c4fa:	719a      	strb	r2, [r3, #6]
    	    		CPU_W (0x8000, 0xF0);								//	software ID exit
 800c4fc:	21f0      	movs	r1, #240	; 0xf0
 800c4fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c502:	f7fc f865 	bl	80085d0 <CPU_W>
        			chill (40);    										//	wait for t_IDA
 800c506:	2028      	movs	r0, #40	; 0x28
 800c508:	f7fb ff2e 	bl	8008368 <chill>
        			v.mode |= 1;
 800c50c:	4b1a      	ldr	r3, [pc, #104]	; (800c578 <init+0x9f0>)
 800c50e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800c512:	f043 0301 	orr.w	r3, r3, #1
 800c516:	b2da      	uxtb	r2, r3
 800c518:	4b17      	ldr	r3, [pc, #92]	; (800c578 <init+0x9f0>)
 800c51a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    				goto ASIC_SETUP_2;
 800c51e:	e5a6      	b.n	800c06e <init+0x4e6>
    		q ++;
 800c520:	3401      	adds	r4, #1
    		map = ASIC_types [q];
 800c522:	4913      	ldr	r1, [pc, #76]	; (800c570 <init+0x9e8>)
 800c524:	4a13      	ldr	r2, [pc, #76]	; (800c574 <init+0x9ec>)
 800c526:	01a3      	lsls	r3, r4, #6
 800c528:	4413      	add	r3, r2
 800c52a:	460d      	mov	r5, r1
 800c52c:	461e      	mov	r6, r3
 800c52e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c532:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c536:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c53a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800c53e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    		scan_PRG ();
 800c542:	f7ff f825 	bl	800b590 <scan_PRG>
    		scan_CHR ();
 800c546:	f7fe ff4d 	bl	800b3e4 <scan_CHR>
    		if ((info.b [4] & info_4_mask) | (info.b [5] & info_5_mask)) goto ASIC_SETUP_2;
 800c54a:	4b0c      	ldr	r3, [pc, #48]	; (800c57c <init+0x9f4>)
 800c54c:	791a      	ldrb	r2, [r3, #4]
 800c54e:	4b0c      	ldr	r3, [pc, #48]	; (800c580 <init+0x9f8>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	4013      	ands	r3, r2
 800c554:	b2da      	uxtb	r2, r3
 800c556:	4b09      	ldr	r3, [pc, #36]	; (800c57c <init+0x9f4>)
 800c558:	7959      	ldrb	r1, [r3, #5]
 800c55a:	4b0a      	ldr	r3, [pc, #40]	; (800c584 <init+0x9fc>)
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	400b      	ands	r3, r1
 800c560:	b2db      	uxtb	r3, r3
 800c562:	4313      	orrs	r3, r2
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	f47f ad7e 	bne.w	800c068 <init+0x4e0>
    		q ++;
 800c56c:	3401      	adds	r4, #1
			goto NO_ASIC;
 800c56e:	e03e      	b.n	800c5ee <init+0xa66>
 800c570:	20002aac 	.word	0x20002aac
 800c574:	0800e098 	.word	0x0800e098
 800c578:	200034cc 	.word	0x200034cc
 800c57c:	2000288c 	.word	0x2000288c
 800c580:	200036ea 	.word	0x200036ea
 800c584:	20002c78 	.word	0x20002c78
    for (uint32_t i = 0; i<16; i++) {
 800c588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c58a:	3301      	adds	r3, #1
 800c58c:	677b      	str	r3, [r7, #116]	; 0x74
 800c58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c590:	2b0f      	cmp	r3, #15
 800c592:	f67f ad0d 	bls.w	800bfb0 <init+0x428>
	CPU_W (0x5205, 0x55);
 800c596:	2155      	movs	r1, #85	; 0x55
 800c598:	f245 2005 	movw	r0, #20997	; 0x5205
 800c59c:	f7fc f818 	bl	80085d0 <CPU_W>
	CPU_W (0x5206, 0xAA);					//	test the multiplier
 800c5a0:	21aa      	movs	r1, #170	; 0xaa
 800c5a2:	f245 2006 	movw	r0, #20998	; 0x5206
 800c5a6:	f7fc f813 	bl	80085d0 <CPU_W>
	if (CPU_R (0x5205) == 0x72 && CPU_R (0x5206) == 0x38) { q = MMC5_SLOT; goto ASIC_INIT; }
 800c5aa:	f245 2005 	movw	r0, #20997	; 0x5205
 800c5ae:	f7fb ffdb 	bl	8008568 <CPU_R>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b72      	cmp	r3, #114	; 0x72
 800c5b6:	d108      	bne.n	800c5ca <init+0xa42>
 800c5b8:	f245 2006 	movw	r0, #20998	; 0x5206
 800c5bc:	f7fb ffd4 	bl	8008568 <CPU_R>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b38      	cmp	r3, #56	; 0x38
 800c5c4:	d101      	bne.n	800c5ca <init+0xa42>
 800c5c6:	2406      	movs	r4, #6
 800c5c8:	e534      	b.n	800c034 <init+0x4ac>
	CPU_W_disable = 0x44444444;
 800c5ca:	4b9a      	ldr	r3, [pc, #616]	; (800c834 <init+0xcac>)
 800c5cc:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 800c5d0:	601a      	str	r2, [r3, #0]
	CPU_W_enable  = 0x33333333 + (0x11111111 * ch.items.bus_disable);	//	ROM space outputs are enabled by default
 800c5d2:	4b99      	ldr	r3, [pc, #612]	; (800c838 <init+0xcb0>)
 800c5d4:	895b      	ldrh	r3, [r3, #10]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	f04f 3311 	mov.w	r3, #286331153	; 0x11111111
 800c5dc:	fb03 f302 	mul.w	r3, r3, r2
 800c5e0:	f103 3333 	add.w	r3, r3, #858993459	; 0x33333333
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	4b95      	ldr	r3, [pc, #596]	; (800c83c <init+0xcb4>)
 800c5e8:	601a      	str	r2, [r3, #0]
 800c5ea:	e000      	b.n	800c5ee <init+0xa66>
    		if (! ch.items.ASIC_map_testing_on)		goto ASIC_SKIP;
 800c5ec:	bf00      	nop
	if (ch.items.alt_bus_con_test_on) {
 800c5ee:	4b92      	ldr	r3, [pc, #584]	; (800c838 <init+0xcb0>)
 800c5f0:	89db      	ldrh	r3, [r3, #14]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d077      	beq.n	800c6e6 <init+0xb5e>
		CHR_234 (0x0001);	if (PPU_mirroring_test_2 (0x35, 0x6C) != 0x35)	goto MAXI_SKIP;
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	f7fd feae 	bl	800a358 <CHR_234>
 800c5fc:	216c      	movs	r1, #108	; 0x6c
 800c5fe:	2035      	movs	r0, #53	; 0x35
 800c600:	f7fe febc 	bl	800b37c <PPU_mirroring_test_2>
 800c604:	4603      	mov	r3, r0
 800c606:	2b35      	cmp	r3, #53	; 0x35
 800c608:	d143      	bne.n	800c692 <init+0xb0a>
		CHR_234 (0x8001);	if (PPU_mirroring_test_2 (0x35, 0x6C) != 0x6c)	goto MAXI_SKIP;
 800c60a:	f248 0001 	movw	r0, #32769	; 0x8001
 800c60e:	f7fd fea3 	bl	800a358 <CHR_234>
 800c612:	216c      	movs	r1, #108	; 0x6c
 800c614:	2035      	movs	r0, #53	; 0x35
 800c616:	f7fe feb1 	bl	800b37c <PPU_mirroring_test_2>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b6c      	cmp	r3, #108	; 0x6c
 800c61e:	d13a      	bne.n	800c696 <init+0xb0e>
		v.PRG_ROM_size		= 0x80000;
 800c620:	4b87      	ldr	r3, [pc, #540]	; (800c840 <init+0xcb8>)
 800c622:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c626:	601a      	str	r2, [r3, #0]
		v.CHR_ROM_size		= 0x80000;
 800c628:	4b85      	ldr	r3, [pc, #532]	; (800c840 <init+0xcb8>)
 800c62a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c62e:	60da      	str	r2, [r3, #12]
		v.PRG_mask			= 0x07fff;
 800c630:	4b83      	ldr	r3, [pc, #524]	; (800c840 <init+0xcb8>)
 800c632:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c636:	811a      	strh	r2, [r3, #8]
		v.CHR_mask			= 0x01fff;
 800c638:	4b81      	ldr	r3, [pc, #516]	; (800c840 <init+0xcb8>)
 800c63a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800c63e:	829a      	strh	r2, [r3, #20]
		v.PRG_bank_mask		= 0x78000 | b31;
 800c640:	4b7f      	ldr	r3, [pc, #508]	; (800c840 <init+0xcb8>)
 800c642:	4a80      	ldr	r2, [pc, #512]	; (800c844 <init+0xcbc>)
 800c644:	605a      	str	r2, [r3, #4]
		v.CHR_bank_mask		= 0x7e000 | b31;
 800c646:	4b7e      	ldr	r3, [pc, #504]	; (800c840 <init+0xcb8>)
 800c648:	4a7f      	ldr	r2, [pc, #508]	; (800c848 <init+0xcc0>)
 800c64a:	611a      	str	r2, [r3, #16]
		map.PRG_B			= PRG_234;
 800c64c:	4b7f      	ldr	r3, [pc, #508]	; (800c84c <init+0xcc4>)
 800c64e:	4a80      	ldr	r2, [pc, #512]	; (800c850 <init+0xcc8>)
 800c650:	625a      	str	r2, [r3, #36]	; 0x24
		map.CHR_B			= CHR_234;
 800c652:	4b7e      	ldr	r3, [pc, #504]	; (800c84c <init+0xcc4>)
 800c654:	4a7f      	ldr	r2, [pc, #508]	; (800c854 <init+0xccc>)
 800c656:	629a      	str	r2, [r3, #40]	; 0x28
		info.r.PRG_bank_ofs	= 0x08000;
 800c658:	4b7f      	ldr	r3, [pc, #508]	; (800c858 <init+0xcd0>)
 800c65a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c65e:	821a      	strh	r2, [r3, #16]
		info.r.CHR_bank_ofs	= 0x00000;
 800c660:	4b7d      	ldr	r3, [pc, #500]	; (800c858 <init+0xcd0>)
 800c662:	2200      	movs	r2, #0
 800c664:	825a      	strh	r2, [r3, #18]
		info.b [4]			=	 0x20;
 800c666:	4b7c      	ldr	r3, [pc, #496]	; (800c858 <init+0xcd0>)
 800c668:	2220      	movs	r2, #32
 800c66a:	711a      	strb	r2, [r3, #4]
		info.b [5]			=	 0x40;
 800c66c:	4b7a      	ldr	r3, [pc, #488]	; (800c858 <init+0xcd0>)
 800c66e:	2240      	movs	r2, #64	; 0x40
 800c670:	715a      	strb	r2, [r3, #5]
		info.b [6]			=	 0xa0;
 800c672:	4b79      	ldr	r3, [pc, #484]	; (800c858 <init+0xcd0>)
 800c674:	22a0      	movs	r2, #160	; 0xa0
 800c676:	719a      	strb	r2, [r3, #6]
		info.b [7]			=	 0xe0;
 800c678:	4b77      	ldr	r3, [pc, #476]	; (800c858 <init+0xcd0>)
 800c67a:	22e0      	movs	r2, #224	; 0xe0
 800c67c:	71da      	strb	r2, [r3, #7]
		memcpy (& map.text, "AVE MAXI 15 in 1", 16);
 800c67e:	4b73      	ldr	r3, [pc, #460]	; (800c84c <init+0xcc4>)
 800c680:	4a76      	ldr	r2, [pc, #472]	; (800c85c <init+0xcd4>)
 800c682:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800c686:	4613      	mov	r3, r2
 800c688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c68a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		goto DONE;
 800c68e:	f000 bcae 	b.w	800cfee <init+0x1466>
		CHR_234 (0x0001);	if (PPU_mirroring_test_2 (0x35, 0x6C) != 0x35)	goto MAXI_SKIP;
 800c692:	bf00      	nop
 800c694:	e000      	b.n	800c698 <init+0xb10>
		CHR_234 (0x8001);	if (PPU_mirroring_test_2 (0x35, 0x6C) != 0x6c)	goto MAXI_SKIP;
 800c696:	bf00      	nop
		q = NINA_SLOT;
 800c698:	2417      	movs	r4, #23
		map = ASIC_types [q];
 800c69a:	496c      	ldr	r1, [pc, #432]	; (800c84c <init+0xcc4>)
 800c69c:	4a70      	ldr	r2, [pc, #448]	; (800c860 <init+0xcd8>)
 800c69e:	01a3      	lsls	r3, r4, #6
 800c6a0:	4413      	add	r3, r2
 800c6a2:	460d      	mov	r5, r1
 800c6a4:	461e      	mov	r6, r3
 800c6a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c6a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c6ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c6b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800c6b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		scan_PRG ();
 800c6ba:	f7fe ff69 	bl	800b590 <scan_PRG>
		scan_CHR ();
 800c6be:	f7fe fe91 	bl	800b3e4 <scan_CHR>
		if ((info.b [4] & info_4_mask) | (info.b [5] & info_5_mask)) goto ASIC_SETUP_2;
 800c6c2:	4b65      	ldr	r3, [pc, #404]	; (800c858 <init+0xcd0>)
 800c6c4:	791a      	ldrb	r2, [r3, #4]
 800c6c6:	4b67      	ldr	r3, [pc, #412]	; (800c864 <init+0xcdc>)
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	4b62      	ldr	r3, [pc, #392]	; (800c858 <init+0xcd0>)
 800c6d0:	7959      	ldrb	r1, [r3, #5]
 800c6d2:	4b65      	ldr	r3, [pc, #404]	; (800c868 <init+0xce0>)
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	400b      	ands	r3, r1
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f47f acc4 	bne.w	800c06c <init+0x4e4>
		q ++;
 800c6e4:	3401      	adds	r4, #1

	}
	// simple_mapper class tests ------------------------------------------------------------

	// skip the bus conflict test section completely
	map = map_init;
 800c6e6:	4a59      	ldr	r2, [pc, #356]	; (800c84c <init+0xcc4>)
 800c6e8:	4b60      	ldr	r3, [pc, #384]	; (800c86c <init+0xce4>)
 800c6ea:	4614      	mov	r4, r2
 800c6ec:	461d      	mov	r5, r3
 800c6ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c6fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (! ch.items.conflict_testing_on) goto ALTERNATE;
 800c702:	4b4d      	ldr	r3, [pc, #308]	; (800c838 <init+0xcb0>)
 800c704:	8a1b      	ldrh	r3, [r3, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 8442 	beq.w	800cf90 <init+0x1408>
    //	advantage to this is the ability to probe bits and get a response for multiple types of mappers
    //	simultaneously.


    // navigate to bank 0
	cur_bank = 1;
 800c70c:	4b58      	ldr	r3, [pc, #352]	; (800c870 <init+0xce8>)
 800c70e:	2201      	movs	r2, #1
 800c710:	701a      	strb	r2, [r3, #0]
	goto_root ();
 800c712:	f7ff f911 	bl	800b938 <goto_root>
	if (cur_bank) {
 800c716:	4b56      	ldr	r3, [pc, #344]	; (800c870 <init+0xce8>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00c      	beq.n	800c738 <init+0xbb0>
		
		// search for 0x00 failed, so file a report and move on with life.
		strcpy (report_txt, "unsupported PRG ROM");
 800c71e:	4a55      	ldr	r2, [pc, #340]	; (800c874 <init+0xcec>)
 800c720:	4b55      	ldr	r3, [pc, #340]	; (800c878 <init+0xcf0>)
 800c722:	4615      	mov	r5, r2
 800c724:	461c      	mov	r4, r3
 800c726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c728:	6028      	str	r0, [r5, #0]
 800c72a:	6069      	str	r1, [r5, #4]
 800c72c:	60aa      	str	r2, [r5, #8]
 800c72e:	60eb      	str	r3, [r5, #12]
 800c730:	6820      	ldr	r0, [r4, #0]
 800c732:	6128      	str	r0, [r5, #16]
		goto DEMO;
 800c734:	f7ff bbec 	b.w	800bf10 <init+0x388>
	
	}
	// try and build an 8-bit banking table
	int ctr = 256;
 800c738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c73c:	673b      	str	r3, [r7, #112]	; 0x70
	for (int i = 0xC000; i < 0x14000; i++) {	//	start the scan at $C000 because it helps out the UNROM games
 800c73e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c742:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c744:	e025      	b.n	800c792 <init+0xc0a>

		uint8_t d = CPU_R (i | 0x8000);
 800c746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fb ff0b 	bl	8008568 <CPU_R>
 800c752:	4603      	mov	r3, r0
 800c754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!data_table [d]) {
 800c758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c75c:	4a47      	ldr	r2, [pc, #284]	; (800c87c <init+0xcf4>)
 800c75e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d112      	bne.n	800c78c <init+0xc04>

			data_table [d] = i | 0x8000;
 800c766:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c76a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c76c:	b21b      	sxth	r3, r3
 800c76e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c776:	b21b      	sxth	r3, r3
 800c778:	b299      	uxth	r1, r3
 800c77a:	4b40      	ldr	r3, [pc, #256]	; (800c87c <init+0xcf4>)
 800c77c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ctr --;
 800c780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c782:	3b01      	subs	r3, #1
 800c784:	673b      	str	r3, [r7, #112]	; 0x70
			if (! ctr) break;
 800c786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d007      	beq.n	800c79c <init+0xc14>
	for (int i = 0xC000; i < 0x14000; i++) {	//	start the scan at $C000 because it helps out the UNROM games
 800c78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c78e:	3301      	adds	r3, #1
 800c790:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c794:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
 800c798:	dbd5      	blt.n	800c746 <init+0xbbe>
 800c79a:	e000      	b.n	800c79e <init+0xc16>
			if (! ctr) break;
 800c79c:	bf00      	nop
		}
	}
	// allocate the root bank entry
//	root_table [0]	= data_table [0];
//	map				= map_init;
	map.INIT_		= goto_root;		// ensure the root bank is set every time the cart starts
 800c79e:	4b2b      	ldr	r3, [pc, #172]	; (800c84c <init+0xcc4>)
 800c7a0:	4a37      	ldr	r2, [pc, #220]	; (800c880 <init+0xcf8>)
 800c7a2:	615a      	str	r2, [r3, #20]

// conduct the bit-banging tests -------------------------------------------------------------------

	// iterate the PRG banks 0 - 3
	for (register int l = 0; l < 4; l ++)
 800c7a4:	2400      	movs	r4, #0
 800c7a6:	e014      	b.n	800c7d2 <init+0xc4a>

		// iterate the PRG key address
		for (register int k = 0; k < PRG_KEYS; k += 4)
 800c7a8:	2500      	movs	r5, #0
 800c7aa:	e00f      	b.n	800c7cc <init+0xc44>

			get_bank_score (& score [l + 4], CPU_R, & PRG_keys [0][k], (l << 13) + 0x8000);
 800c7ac:	1d23      	adds	r3, r4, #4
 800c7ae:	4a35      	ldr	r2, [pc, #212]	; (800c884 <init+0xcfc>)
 800c7b0:	1898      	adds	r0, r3, r2
 800c7b2:	006b      	lsls	r3, r5, #1
 800c7b4:	4a34      	ldr	r2, [pc, #208]	; (800c888 <init+0xd00>)
 800c7b6:	441a      	add	r2, r3
 800c7b8:	b2a3      	uxth	r3, r4
 800c7ba:	035b      	lsls	r3, r3, #13
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	4931      	ldr	r1, [pc, #196]	; (800c88c <init+0xd04>)
 800c7c6:	f7ff f92d 	bl	800ba24 <get_bank_score>
		for (register int k = 0; k < PRG_KEYS; k += 4)
 800c7ca:	3504      	adds	r5, #4
 800c7cc:	2d07      	cmp	r5, #7
 800c7ce:	dded      	ble.n	800c7ac <init+0xc24>
	for (register int l = 0; l < 4; l ++)
 800c7d0:	3401      	adds	r4, #1
 800c7d2:	2c03      	cmp	r4, #3
 800c7d4:	dde8      	ble.n	800c7a8 <init+0xc20>

	// iterate the CHR banks 0 - 7
	for (register int l = 0; l < 8; l ++)
 800c7d6:	2400      	movs	r4, #0
 800c7d8:	e012      	b.n	800c800 <init+0xc78>

		// iterate the CHR key address
		for (register int k = 0; k < (CHR_KEYS - 4); k += 4)
 800c7da:	2500      	movs	r5, #0
 800c7dc:	e00d      	b.n	800c7fa <init+0xc72>

			get_bank_score (& score [l + 8], PPU_R, & CHR_keys [0][k], (l << 10));
 800c7de:	f104 0308 	add.w	r3, r4, #8
 800c7e2:	4a28      	ldr	r2, [pc, #160]	; (800c884 <init+0xcfc>)
 800c7e4:	1898      	adds	r0, r3, r2
 800c7e6:	006b      	lsls	r3, r5, #1
 800c7e8:	4a29      	ldr	r2, [pc, #164]	; (800c890 <init+0xd08>)
 800c7ea:	441a      	add	r2, r3
 800c7ec:	b2a3      	uxth	r3, r4
 800c7ee:	029b      	lsls	r3, r3, #10
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	4928      	ldr	r1, [pc, #160]	; (800c894 <init+0xd0c>)
 800c7f4:	f7ff f916 	bl	800ba24 <get_bank_score>
		for (register int k = 0; k < (CHR_KEYS - 4); k += 4)
 800c7f8:	3504      	adds	r5, #4
 800c7fa:	2d0b      	cmp	r5, #11
 800c7fc:	ddef      	ble.n	800c7de <init+0xc56>
	for (register int l = 0; l < 8; l ++)
 800c7fe:	3401      	adds	r4, #1
 800c800:	2c07      	cmp	r4, #7
 800c802:	ddea      	ble.n	800c7da <init+0xc52>

	// get the mirroring control score
	get_bank_score (& score [3], MIR_R, & PRG_keys [0][0], 0);
 800c804:	2300      	movs	r3, #0
 800c806:	4a20      	ldr	r2, [pc, #128]	; (800c888 <init+0xd00>)
 800c808:	4923      	ldr	r1, [pc, #140]	; (800c898 <init+0xd10>)
 800c80a:	4824      	ldr	r0, [pc, #144]	; (800c89c <init+0xd14>)
 800c80c:	f7ff f90a 	bl	800ba24 <get_bank_score>

// identify mapper type based on score results --------------------------------------------------

	int old_size = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	66bb      	str	r3, [r7, #104]	; 0x68
	for (register uint32_t i = 0; i < simple_cnt; i++) {
 800c814:	2400      	movs	r4, #0
 800c816:	e30e      	b.n	800ce36 <init+0x12ae>

		if (simple_types [i].byte [0][3] != score [3]) {		//	mirroring bits must match exactly
 800c818:	0163      	lsls	r3, r4, #5
 800c81a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c81e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800c822:	78da      	ldrb	r2, [r3, #3]
 800c824:	4b17      	ldr	r3, [pc, #92]	; (800c884 <init+0xcfc>)
 800c826:	78db      	ldrb	r3, [r3, #3]
 800c828:	429a      	cmp	r2, r3
 800c82a:	f040 82fc 	bne.w	800ce26 <init+0x129e>
//			error_info [i].byte [1] = score [3];
//			error_info [i].byte [2] = simple_types [i].byte [0][3];
			goto FAIL;

		}
		for (register uint32_t j = 4; j < 16; j++)
 800c82e:	2504      	movs	r5, #4
 800c830:	e051      	b.n	800c8d6 <init+0xd4e>
 800c832:	bf00      	nop
 800c834:	20002ca0 	.word	0x20002ca0
 800c838:	20003638 	.word	0x20003638
 800c83c:	20002c98 	.word	0x20002c98
 800c840:	200034cc 	.word	0x200034cc
 800c844:	80078000 	.word	0x80078000
 800c848:	8007e000 	.word	0x8007e000
 800c84c:	20002aac 	.word	0x20002aac
 800c850:	0800a3c9 	.word	0x0800a3c9
 800c854:	0800a359 	.word	0x0800a359
 800c858:	2000288c 	.word	0x2000288c
 800c85c:	0800dde4 	.word	0x0800dde4
 800c860:	0800e098 	.word	0x0800e098
 800c864:	200036ea 	.word	0x200036ea
 800c868:	20002c78 	.word	0x20002c78
 800c86c:	0800e048 	.word	0x0800e048
 800c870:	200034c9 	.word	0x200034c9
 800c874:	200032c8 	.word	0x200032c8
 800c878:	0800ddf8 	.word	0x0800ddf8
 800c87c:	200030c8 	.word	0x200030c8
 800c880:	0800b939 	.word	0x0800b939
 800c884:	200030b8 	.word	0x200030b8
 800c888:	0800dff8 	.word	0x0800dff8
 800c88c:	08008569 	.word	0x08008569
 800c890:	0800df78 	.word	0x0800df78
 800c894:	08008665 	.word	0x08008665
 800c898:	0800b9fd 	.word	0x0800b9fd
 800c89c:	200030bb 	.word	0x200030bb
			if ((~simple_types [i].byte [0][j] &   score [j])		//	if any score bits are not part of the mapper mask
 800c8a0:	0163      	lsls	r3, r4, #5
 800c8a2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c8a6:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800c8aa:	5d5b      	ldrb	r3, [r3, r5]
 800c8ac:	43db      	mvns	r3, r3
 800c8ae:	4ab8      	ldr	r2, [pc, #736]	; (800cb90 <init+0x1008>)
 800c8b0:	5d52      	ldrb	r2, [r2, r5]
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f040 82bd 	bne.w	800ce34 <init+0x12ac>
			||  ( simple_types [i].byte [0][j] && !score [j])) {	//	if the score is zero where the mapper mask has any bits set
 800c8ba:	0163      	lsls	r3, r4, #5
 800c8bc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c8c0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800c8c4:	5d5b      	ldrb	r3, [r3, r5]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d004      	beq.n	800c8d4 <init+0xd4c>
 800c8ca:	4bb1      	ldr	r3, [pc, #708]	; (800cb90 <init+0x1008>)
 800c8cc:	5d5b      	ldrb	r3, [r3, r5]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 82b0 	beq.w	800ce34 <init+0x12ac>
		for (register uint32_t j = 4; j < 16; j++)
 800c8d4:	3501      	adds	r5, #1
 800c8d6:	2d0f      	cmp	r5, #15
 800c8d8:	d9e2      	bls.n	800c8a0 <init+0xd18>
//				error_info [i].byte [2] = simple_types [i].byte [0][j];
				goto FAIL;

			}
		//	calculate final PRG mask from score
		uint8_t k = simple_types [i].byte [0][1];
 800c8da:	0163      	lsls	r3, r4, #5
 800c8dc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c8e0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800c8e4:	785b      	ldrb	r3, [r3, #1]
 800c8e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		uint8_t g = k & 3;
 800c8ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c8ee:	f003 0303 	and.w	r3, r3, #3
 800c8f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t l = g | 4;
 800c8f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8fa:	f043 0304 	orr.w	r3, r3, #4
 800c8fe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		uint8_t r, cs, ps;
		switch (k & 12) {
 800c902:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c906:	f003 030c 	and.w	r3, r3, #12
 800c90a:	2b04      	cmp	r3, #4
 800c90c:	d014      	beq.n	800c938 <init+0xdb0>
 800c90e:	2b0c      	cmp	r3, #12
 800c910:	d122      	bne.n	800c958 <init+0xdd0>
case 12:	ps = 15; r = score [4] | score [    5] | score [6] | score [7];	break;
 800c912:	230f      	movs	r3, #15
 800c914:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800c918:	4b9d      	ldr	r3, [pc, #628]	; (800cb90 <init+0x1008>)
 800c91a:	791a      	ldrb	r2, [r3, #4]
 800c91c:	4b9c      	ldr	r3, [pc, #624]	; (800cb90 <init+0x1008>)
 800c91e:	795b      	ldrb	r3, [r3, #5]
 800c920:	4313      	orrs	r3, r2
 800c922:	b2da      	uxtb	r2, r3
 800c924:	4b9a      	ldr	r3, [pc, #616]	; (800cb90 <init+0x1008>)
 800c926:	799b      	ldrb	r3, [r3, #6]
 800c928:	4313      	orrs	r3, r2
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	4b98      	ldr	r3, [pc, #608]	; (800cb90 <init+0x1008>)
 800c92e:	79db      	ldrb	r3, [r3, #7]
 800c930:	4313      	orrs	r3, r2
 800c932:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800c936:	e018      	b.n	800c96a <init+0xde2>
case  4:	ps = 14; r = score [l] | score [l + 1];							break;
 800c938:	230e      	movs	r3, #14
 800c93a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800c93e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800c942:	4a93      	ldr	r2, [pc, #588]	; (800cb90 <init+0x1008>)
 800c944:	5cd2      	ldrb	r2, [r2, r3]
 800c946:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800c94a:	3301      	adds	r3, #1
 800c94c:	4990      	ldr	r1, [pc, #576]	; (800cb90 <init+0x1008>)
 800c94e:	5ccb      	ldrb	r3, [r1, r3]
 800c950:	4313      	orrs	r3, r2
 800c952:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800c956:	e008      	b.n	800c96a <init+0xde2>
default:	ps = 13; r = score [l];
 800c958:	230d      	movs	r3, #13
 800c95a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800c95e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800c962:	4a8b      	ldr	r2, [pc, #556]	; (800cb90 <init+0x1008>)
 800c964:	5cd3      	ldrb	r3, [r2, r3]
 800c966:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		}

		// calculate actual PRG mask value
		uint8_t p = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
		uint8_t m = 0;
 800c970:	2300      	movs	r3, #0
 800c972:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		int  ctr0 = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	65fb      	str	r3, [r7, #92]	; 0x5c
		uint8_t id = simple_types [i].byte [0][l];	//	PRG ID mask
 800c97a:	0163      	lsls	r3, r4, #5
 800c97c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c980:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800c984:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800c988:	5c9b      	ldrb	r3, [r3, r2]
 800c98a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		if (id) {
 800c98e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c992:	2b00      	cmp	r3, #0
 800c994:	d073      	beq.n	800ca7e <init+0xef6>
			r = ~r & id;
 800c996:	f997 3065 	ldrsb.w	r3, [r7, #101]	; 0x65
 800c99a:	43db      	mvns	r3, r3
 800c99c:	b25a      	sxtb	r2, r3
 800c99e:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 800c9a2:	4013      	ands	r3, r2
 800c9a4:	b25b      	sxtb	r3, r3
 800c9a6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			int q = 1;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	657b      	str	r3, [r7, #84]	; 0x54
			do {
				if (q & r ) break;				//	LSB clear score bit against set type bit
 800c9ae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800c9b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d120      	bne.n	800c9fc <init+0xe74>
				if (1 & id) { p++; m |= q; }	//	mask bit COUNTS
 800c9ba:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00c      	beq.n	800c9e2 <init+0xe5a>
 800c9c8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800c9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9d4:	b25a      	sxtb	r2, r3
 800c9d6:	f997 3061 	ldrsb.w	r3, [r7, #97]	; 0x61
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	b25b      	sxtb	r3, r3
 800c9de:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				q  <<= 1;
 800c9e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	657b      	str	r3, [r7, #84]	; 0x54
				id >>= 1;
 800c9e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c9ec:	085b      	lsrs	r3, r3, #1
 800c9ee:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			} while (id);
 800c9f2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1d9      	bne.n	800c9ae <init+0xe26>
 800c9fa:	e000      	b.n	800c9fe <init+0xe76>
				if (q & r ) break;				//	LSB clear score bit against set type bit
 800c9fc:	bf00      	nop
			if (!p) {
 800c9fe:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f000 8211 	beq.w	800ce2a <init+0x12a2>
//				error_info [i].byte [7] = r;
				goto FAIL;						//	at least ONE of the mapper bits has to be implemented!

			}
			// build the PRG bankswitching table based on mask
			memset (&report_txt [256], 0, 256);
 800ca08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	4861      	ldr	r0, [pc, #388]	; (800cb94 <init+0x100c>)
 800ca10:	f000 fc37 	bl	800d282 <memset>
			for (int n = 0; n < 256; n++)
 800ca14:	2300      	movs	r3, #0
 800ca16:	653b      	str	r3, [r7, #80]	; 0x50
 800ca18:	e02c      	b.n	800ca74 <init+0xeec>
				if (!report_txt [(m & n) + 256] && data_table [n]) {
 800ca1a:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ca1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca20:	4013      	ands	r3, r2
 800ca22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ca26:	4a5c      	ldr	r2, [pc, #368]	; (800cb98 <init+0x1010>)
 800ca28:	5cd3      	ldrb	r3, [r2, r3]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d11f      	bne.n	800ca6e <init+0xee6>
 800ca2e:	4a5b      	ldr	r2, [pc, #364]	; (800cb9c <init+0x1014>)
 800ca30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d019      	beq.n	800ca6e <init+0xee6>
					report_txt [(m & n) + 256] = 1;
 800ca3a:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ca3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca40:	4013      	ands	r3, r2
 800ca42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ca46:	4a54      	ldr	r2, [pc, #336]	; (800cb98 <init+0x1010>)
 800ca48:	2101      	movs	r1, #1
 800ca4a:	54d1      	strb	r1, [r2, r3]
					PRG_bank_tbl [ctr0] = n;
 800ca4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca4e:	b2d9      	uxtb	r1, r3
 800ca50:	4a53      	ldr	r2, [pc, #332]	; (800cba0 <init+0x1018>)
 800ca52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca54:	4413      	add	r3, r2
 800ca56:	460a      	mov	r2, r1
 800ca58:	701a      	strb	r2, [r3, #0]
					ctr0++;
 800ca5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	65fb      	str	r3, [r7, #92]	; 0x5c
					if (ctr0 >= 1 << p) break;
 800ca60:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800ca64:	2201      	movs	r2, #1
 800ca66:	409a      	lsls	r2, r3
 800ca68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	dd06      	ble.n	800ca7c <init+0xef4>
			for (int n = 0; n < 256; n++)
 800ca6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca70:	3301      	adds	r3, #1
 800ca72:	653b      	str	r3, [r7, #80]	; 0x50
 800ca74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca76:	2bff      	cmp	r3, #255	; 0xff
 800ca78:	ddcf      	ble.n	800ca1a <init+0xe92>
 800ca7a:	e000      	b.n	800ca7e <init+0xef6>
					if (ctr0 >= 1 << p) break;
 800ca7c:	bf00      	nop
				}
		}

		//	calculate final CHR mask from score
//		uint8_t s = 0xFF;
		uint8_t s = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		k >>= 4;
 800ca84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca88:	091b      	lsrs	r3, r3, #4
 800ca8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (k > 7) { 								  s  = score [k	   ]; cs = 10; }
 800ca8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca92:	2b07      	cmp	r3, #7
 800ca94:	d909      	bls.n	800caaa <init+0xf22>
 800ca96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca9a:	4a3d      	ldr	r2, [pc, #244]	; (800cb90 <init+0x1008>)
 800ca9c:	5cd3      	ldrb	r3, [r2, r3]
 800ca9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800caa2:	230a      	movs	r3, #10
 800caa4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800caa8:	e085      	b.n	800cbb6 <init+0x102e>
else	if (k > 3) { k <<= 1; for (l = 0; l < 2; l++) s |= score [k + l]; cs = 11; }
 800caaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d921      	bls.n	800caf6 <init+0xf6e>
 800cab2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cabc:	2300      	movs	r3, #0
 800cabe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800cac2:	e010      	b.n	800cae6 <init+0xf5e>
 800cac4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800cac8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cacc:	4413      	add	r3, r2
 800cace:	4a30      	ldr	r2, [pc, #192]	; (800cb90 <init+0x1008>)
 800cad0:	5cd2      	ldrb	r2, [r2, r3]
 800cad2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cad6:	4313      	orrs	r3, r2
 800cad8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cadc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cae0:	3301      	adds	r3, #1
 800cae2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800cae6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800caea:	2b01      	cmp	r3, #1
 800caec:	d9ea      	bls.n	800cac4 <init+0xf3c>
 800caee:	230b      	movs	r3, #11
 800caf0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800caf4:	e05f      	b.n	800cbb6 <init+0x102e>
else	if (k > 1) { k <<= 2; for (l = 0; l < 4; l++) s |= score [k + l]; cs = 12; }
 800caf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d921      	bls.n	800cb42 <init+0xfba>
 800cafe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800cb0e:	e010      	b.n	800cb32 <init+0xfaa>
 800cb10:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800cb14:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cb18:	4413      	add	r3, r2
 800cb1a:	4a1d      	ldr	r2, [pc, #116]	; (800cb90 <init+0x1008>)
 800cb1c:	5cd2      	ldrb	r2, [r2, r3]
 800cb1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb22:	4313      	orrs	r3, r2
 800cb24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cb28:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800cb32:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cb36:	2b03      	cmp	r3, #3
 800cb38:	d9ea      	bls.n	800cb10 <init+0xf88>
 800cb3a:	230c      	movs	r3, #12
 800cb3c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800cb40:	e039      	b.n	800cbb6 <init+0x102e>
else	if (k    ) { k <<= 3; for (l = 0; l < 8; l++) s |= score [k + l]; cs = 13; }
 800cb42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d02c      	beq.n	800cba4 <init+0x101c>
 800cb4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb4e:	00db      	lsls	r3, r3, #3
 800cb50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cb54:	2300      	movs	r3, #0
 800cb56:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800cb5a:	e010      	b.n	800cb7e <init+0xff6>
 800cb5c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800cb60:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cb64:	4413      	add	r3, r2
 800cb66:	4a0a      	ldr	r2, [pc, #40]	; (800cb90 <init+0x1008>)
 800cb68:	5cd2      	ldrb	r2, [r2, r3]
 800cb6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cb74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cb78:	3301      	adds	r3, #1
 800cb7a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800cb7e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cb82:	2b07      	cmp	r3, #7
 800cb84:	d9ea      	bls.n	800cb5c <init+0xfd4>
 800cb86:	230d      	movs	r3, #13
 800cb88:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800cb8c:	e013      	b.n	800cbb6 <init+0x102e>
 800cb8e:	bf00      	nop
 800cb90:	200030b8 	.word	0x200030b8
 800cb94:	200033c8 	.word	0x200033c8
 800cb98:	200032c8 	.word	0x200032c8
 800cb9c:	200030c8 	.word	0x200030c8
 800cba0:	20002b78 	.word	0x20002b78
else			   { k   = 8;						  s  = 			   0; cs = 13; }
 800cba4:	2308      	movs	r3, #8
 800cba6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cbb0:	230d      	movs	r3, #13
 800cbb2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

		// calculate actual CHR mask value
		uint8_t c = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		uint8_t w = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		int  ctr1 = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	64bb      	str	r3, [r7, #72]	; 0x48
		id = simple_types [i].byte [0][k];			//	CHR ID mask
 800cbc6:	0163      	lsls	r3, r4, #5
 800cbc8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800cbcc:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800cbd0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800cbd4:	5c9b      	ldrb	r3, [r3, r2]
 800cbd6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		if (id) {
 800cbda:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d073      	beq.n	800ccca <init+0x1142>
			s = ~s & id;
 800cbe2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800cbe6:	43db      	mvns	r3, r3
 800cbe8:	b25a      	sxtb	r2, r3
 800cbea:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 800cbee:	4013      	ands	r3, r2
 800cbf0:	b25b      	sxtb	r3, r3
 800cbf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			int q = 1;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	647b      	str	r3, [r7, #68]	; 0x44
			do {
				if (q & s ) break;				//	LSB clear score bit against set type bit
 800cbfa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800cbfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc00:	4013      	ands	r3, r2
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d120      	bne.n	800cc48 <init+0x10c0>
				if (1 & id) { c++; w |= q; }	//	mask bit COUNTS
 800cc06:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc0a:	f003 0301 	and.w	r3, r3, #1
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00c      	beq.n	800cc2e <init+0x10a6>
 800cc14:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cc18:	3301      	adds	r3, #1
 800cc1a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cc1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc20:	b25a      	sxtb	r2, r3
 800cc22:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800cc26:	4313      	orrs	r3, r2
 800cc28:	b25b      	sxtb	r3, r3
 800cc2a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				q  <<= 1;
 800cc2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	647b      	str	r3, [r7, #68]	; 0x44
				id >>= 1;
 800cc34:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc38:	085b      	lsrs	r3, r3, #1
 800cc3a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			} while (id);
 800cc3e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d1d9      	bne.n	800cbfa <init+0x1072>
 800cc46:	e000      	b.n	800cc4a <init+0x10c2>
				if (q & s ) break;				//	LSB clear score bit against set type bit
 800cc48:	bf00      	nop
			if (!c) {
 800cc4a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f000 80ed 	beq.w	800ce2e <init+0x12a6>
//				error_info [i].byte [7] = s;
				goto FAIL;						//	at least ONE of the mapper bits has to be implemented!

			}
			//	build the CHR bankswitching table based on mask
			memset (&report_txt [256], 0, 256);
 800cc54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc58:	2100      	movs	r1, #0
 800cc5a:	48b1      	ldr	r0, [pc, #708]	; (800cf20 <init+0x1398>)
 800cc5c:	f000 fb11 	bl	800d282 <memset>
			for (int n = 0; n < 256; n++)
 800cc60:	2300      	movs	r3, #0
 800cc62:	643b      	str	r3, [r7, #64]	; 0x40
 800cc64:	e02c      	b.n	800ccc0 <init+0x1138>
				if (!report_txt [(w & n) + 256] && data_table [n]) {
 800cc66:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800cc6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cc72:	4aac      	ldr	r2, [pc, #688]	; (800cf24 <init+0x139c>)
 800cc74:	5cd3      	ldrb	r3, [r2, r3]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d11f      	bne.n	800ccba <init+0x1132>
 800cc7a:	4aab      	ldr	r2, [pc, #684]	; (800cf28 <init+0x13a0>)
 800cc7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d019      	beq.n	800ccba <init+0x1132>
					report_txt [(w & n) + 256] = 1;
 800cc86:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800cc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cc92:	4aa4      	ldr	r2, [pc, #656]	; (800cf24 <init+0x139c>)
 800cc94:	2101      	movs	r1, #1
 800cc96:	54d1      	strb	r1, [r2, r3]
					CHR_bank_tbl [ctr1] = n;
 800cc98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc9a:	b2d9      	uxtb	r1, r3
 800cc9c:	4aa3      	ldr	r2, [pc, #652]	; (800cf2c <init+0x13a4>)
 800cc9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca0:	4413      	add	r3, r2
 800cca2:	460a      	mov	r2, r1
 800cca4:	701a      	strb	r2, [r3, #0]
					ctr1++;
 800cca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca8:	3301      	adds	r3, #1
 800ccaa:	64bb      	str	r3, [r7, #72]	; 0x48
					if (ctr1 >= 1 << c) break;
 800ccac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	409a      	lsls	r2, r3
 800ccb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	dd06      	ble.n	800ccc8 <init+0x1140>
			for (int n = 0; n < 256; n++)
 800ccba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	643b      	str	r3, [r7, #64]	; 0x40
 800ccc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccc2:	2bff      	cmp	r3, #255	; 0xff
 800ccc4:	ddcf      	ble.n	800cc66 <init+0x10de>
 800ccc6:	e000      	b.n	800ccca <init+0x1142>
					if (ctr1 >= 1 << c) break;
 800ccc8:	bf00      	nop
				}
		}

		//	if the PRG_SIZE + CHR_SIZE <= OLD_SIZE the mapper is a FAIL
		int PRGsize = ctr0 << ps;
 800ccca:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ccce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd4:	623b      	str	r3, [r7, #32]
		int CHRsize = ctr1 << cs;
 800ccd6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ccda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cce0:	61fb      	str	r3, [r7, #28]
		if (old_size >= PRGsize + CHRsize) {
 800cce2:	6a3a      	ldr	r2, [r7, #32]
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	441a      	add	r2, r3
 800cce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccea:	429a      	cmp	r2, r3
 800ccec:	f340 80a1 	ble.w	800ce32 <init+0x12aa>
//			error_info [i].byte  [5] = ctr1;
//			error_info [i].hword [3] = old_size >> 8;
			goto FAIL; 										//	only the largest PRG + CHR results are kept

		}
		old_size = PRGsize + CHRsize;
 800ccf0:	6a3a      	ldr	r2, [r7, #32]
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	66bb      	str	r3, [r7, #104]	; 0x68

		//	set the mapper up as a PASS
//		error_info [i].byte [0] = 0;
		memcpy (&map.text, &simple_types [i].byte [1], 16);		//	copy out mapper text
 800ccf8:	0163      	lsls	r3, r4, #5
 800ccfa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800ccfe:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800cd02:	f103 0210 	add.w	r2, r3, #16
 800cd06:	4b8a      	ldr	r3, [pc, #552]	; (800cf30 <init+0x13a8>)
 800cd08:	f103 0530 	add.w	r5, r3, #48	; 0x30
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	6818      	ldr	r0, [r3, #0]
 800cd10:	6859      	ldr	r1, [r3, #4]
 800cd12:	689a      	ldr	r2, [r3, #8]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		info.b [6] = simple_types [i].byte [0][0] << 4;				//	low mapper nibble
 800cd18:	0163      	lsls	r3, r4, #5
 800cd1a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800cd1e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	011b      	lsls	r3, r3, #4
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	4b82      	ldr	r3, [pc, #520]	; (800cf34 <init+0x13ac>)
 800cd2a:	719a      	strb	r2, [r3, #6]
		info.b [7] = simple_types [i].byte [0][0] & 0xF0;			//	high mapper nibble
 800cd2c:	0163      	lsls	r3, r4, #5
 800cd2e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800cd32:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	f023 030f 	bic.w	r3, r3, #15
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	4b7d      	ldr	r3, [pc, #500]	; (800cf34 <init+0x13ac>)
 800cd40:	71da      	strb	r2, [r3, #7]

		//	calculate PRG stuff
		if (ctr0) {
 800cd42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d031      	beq.n	800cdac <init+0x1224>
			info.b [4]			= PRGsize >> 14;				//	16KB PRG units
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	139b      	asrs	r3, r3, #14
 800cd4c:	b2da      	uxtb	r2, r3
 800cd4e:	4b79      	ldr	r3, [pc, #484]	; (800cf34 <init+0x13ac>)
 800cd50:	711a      	strb	r2, [r3, #4]
			v.PRG_bank_mask		= (PRGsize - (1 << ps)) | b31;	//	used for caching current bank
 800cd52:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800cd56:	2201      	movs	r2, #1
 800cd58:	fa02 f303 	lsl.w	r3, r2, r3
 800cd5c:	6a3a      	ldr	r2, [r7, #32]
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd64:	4a74      	ldr	r2, [pc, #464]	; (800cf38 <init+0x13b0>)
 800cd66:	6053      	str	r3, [r2, #4]
			v.PRG_mask			= (1 << ps) - 1;				//	mask off the low address bits
 800cd68:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	3b01      	subs	r3, #1
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	4b6f      	ldr	r3, [pc, #444]	; (800cf38 <init+0x13b0>)
 800cd7a:	811a      	strh	r2, [r3, #8]
			info.r.PRG_bank_ofs	= (g + 4) << 13;				//	offset into CPU map
 800cd7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	3304      	adds	r3, #4
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	035b      	lsls	r3, r3, #13
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	4b6a      	ldr	r3, [pc, #424]	; (800cf34 <init+0x13ac>)
 800cd8c:	821a      	strh	r2, [r3, #16]
			info.r.PRG_bank_bits= ps;							//	shift right amount for bank table lookup
 800cd8e:	4a69      	ldr	r2, [pc, #420]	; (800cf34 <init+0x13ac>)
 800cd90:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800cd94:	7613      	strb	r3, [r2, #24]
			v.PRG_B_mask		= (1 << p) - 1;					//	bank table mask
 800cd96:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	3b01      	subs	r3, #1
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	4b64      	ldr	r3, [pc, #400]	; (800cf38 <init+0x13b0>)
 800cda8:	729a      	strb	r2, [r3, #10]
 800cdaa:	e002      	b.n	800cdb2 <init+0x122a>
		}
		else
			info.b [4]			= 2;
 800cdac:	4b61      	ldr	r3, [pc, #388]	; (800cf34 <init+0x13ac>)
 800cdae:	2202      	movs	r2, #2
 800cdb0:	711a      	strb	r2, [r3, #4]

		//	calculate CHR stuff
		if (k) {
 800cdb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d031      	beq.n	800ce1e <init+0x1296>
			info.b [5] 			= CHRsize >> 13;
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	135b      	asrs	r3, r3, #13
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	4b5c      	ldr	r3, [pc, #368]	; (800cf34 <init+0x13ac>)
 800cdc2:	715a      	strb	r2, [r3, #5]
			v.CHR_bank_mask		= (CHRsize - (1 << cs)) | b31;
 800cdc4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800cdc8:	2201      	movs	r2, #1
 800cdca:	fa02 f303 	lsl.w	r3, r2, r3
 800cdce:	69fa      	ldr	r2, [r7, #28]
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdd6:	4a58      	ldr	r2, [pc, #352]	; (800cf38 <init+0x13b0>)
 800cdd8:	6113      	str	r3, [r2, #16]
			v.CHR_mask			= (1 << cs) - 1;
 800cdda:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800cdde:	2201      	movs	r2, #1
 800cde0:	fa02 f303 	lsl.w	r3, r2, r3
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	3b01      	subs	r3, #1
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	4b53      	ldr	r3, [pc, #332]	; (800cf38 <init+0x13b0>)
 800cdec:	829a      	strh	r2, [r3, #20]
			info.r.CHR_bank_ofs	= (k - 8) << 10;
 800cdee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	3b08      	subs	r3, #8
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	029b      	lsls	r3, r3, #10
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	4b4d      	ldr	r3, [pc, #308]	; (800cf34 <init+0x13ac>)
 800cdfe:	825a      	strh	r2, [r3, #18]
			info.r.CHR_bank_bits= cs;
 800ce00:	4a4c      	ldr	r2, [pc, #304]	; (800cf34 <init+0x13ac>)
 800ce02:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ce06:	7653      	strb	r3, [r2, #25]
			v.CHR_B_mask		= (1 << c) -1;
 800ce08:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	3b01      	subs	r3, #1
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	4b47      	ldr	r3, [pc, #284]	; (800cf38 <init+0x13b0>)
 800ce1a:	759a      	strb	r2, [r3, #22]
 800ce1c:	e00a      	b.n	800ce34 <init+0x12ac>
		}
		else
			info.b [5]		= 0;		//	0: 8K CHR-RAM is present
 800ce1e:	4b45      	ldr	r3, [pc, #276]	; (800cf34 <init+0x13ac>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	715a      	strb	r2, [r3, #5]
 800ce24:	e006      	b.n	800ce34 <init+0x12ac>
			goto FAIL;
 800ce26:	bf00      	nop
 800ce28:	e004      	b.n	800ce34 <init+0x12ac>
				goto FAIL;						//	at least ONE of the mapper bits has to be implemented!
 800ce2a:	bf00      	nop
 800ce2c:	e002      	b.n	800ce34 <init+0x12ac>
				goto FAIL;						//	at least ONE of the mapper bits has to be implemented!
 800ce2e:	bf00      	nop
 800ce30:	e000      	b.n	800ce34 <init+0x12ac>
			goto FAIL; 										//	only the largest PRG + CHR results are kept
 800ce32:	bf00      	nop
	for (register uint32_t i = 0; i < simple_cnt; i++) {
 800ce34:	3401      	adds	r4, #1
 800ce36:	4b41      	ldr	r3, [pc, #260]	; (800cf3c <init+0x13b4>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	42a3      	cmp	r3, r4
 800ce3c:	f63f acec 	bhi.w	800c818 <init+0xc90>
FAIL:;
	}

	//---------------------------------------------------------------------------------------------------
	// initialization for special bus-conflict mapper types
	switch ((info.b [6] >> 4 & 15) | (info.b [7] & 240)) {
 800ce40:	4b3c      	ldr	r3, [pc, #240]	; (800cf34 <init+0x13ac>)
 800ce42:	799b      	ldrb	r3, [r3, #6]
 800ce44:	091b      	lsrs	r3, r3, #4
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	f003 020f 	and.w	r2, r3, #15
 800ce4c:	4b39      	ldr	r3, [pc, #228]	; (800cf34 <init+0x13ac>)
 800ce4e:	79db      	ldrb	r3, [r3, #7]
 800ce50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce54:	4313      	orrs	r3, r2
 800ce56:	2b0d      	cmp	r3, #13
 800ce58:	f000 8096 	beq.w	800cf88 <init+0x1400>
 800ce5c:	2b1e      	cmp	r3, #30
 800ce5e:	f040 8098 	bne.w	800cf92 <init+0x140a>

// UNROM-512
case 30:

		// check if any save RAM present
		scan_SAV ();
 800ce62:	f7fe fc1f 	bl	800b6a4 <scan_SAV>
		if (info.b [6] & 2) {
 800ce66:	4b33      	ldr	r3, [pc, #204]	; (800cf34 <init+0x13ac>)
 800ce68:	799b      	ldrb	r3, [r3, #6]
 800ce6a:	f003 0302 	and.w	r3, r3, #2
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00d      	beq.n	800ce8e <init+0x1306>

			// force the mapper to type 2
			info.b [6] &= 0x2f;
 800ce72:	4b30      	ldr	r3, [pc, #192]	; (800cf34 <init+0x13ac>)
 800ce74:	799b      	ldrb	r3, [r3, #6]
 800ce76:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 800ce7a:	b2da      	uxtb	r2, r3
 800ce7c:	4b2d      	ldr	r3, [pc, #180]	; (800cf34 <init+0x13ac>)
 800ce7e:	719a      	strb	r2, [r3, #6]
			info.b [7] &= 0x0f;
 800ce80:	4b2c      	ldr	r3, [pc, #176]	; (800cf34 <init+0x13ac>)
 800ce82:	79db      	ldrb	r3, [r3, #7]
 800ce84:	f003 030f 	and.w	r3, r3, #15
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	4b2a      	ldr	r3, [pc, #168]	; (800cf34 <init+0x13ac>)
 800ce8c:	71da      	strb	r2, [r3, #7]

		}
		// check if the 32KB CHR-RAM variant present
		if (map.text [10] == '3')		info.b [11] = 9;		//	set the volatile CHR-RAM size to 32K in NES 2.0 flags
 800ce8e:	4b28      	ldr	r3, [pc, #160]	; (800cf30 <init+0x13a8>)
 800ce90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ce94:	2b33      	cmp	r3, #51	; 0x33
 800ce96:	d103      	bne.n	800cea0 <init+0x1318>
 800ce98:	4b26      	ldr	r3, [pc, #152]	; (800cf34 <init+0x13ac>)
 800ce9a:	2209      	movs	r2, #9
 800ce9c:	72da      	strb	r2, [r3, #11]
 800ce9e:	e002      	b.n	800cea6 <init+0x131e>
		else							info.b [11] = 7;
 800cea0:	4b24      	ldr	r3, [pc, #144]	; (800cf34 <init+0x13ac>)
 800cea2:	2207      	movs	r2, #7
 800cea4:	72da      	strb	r2, [r3, #11]

		// detect if 4-screen mirroring present
		PPU_W (0x2000,	  0xe1);	PPU_W (0x2400,	  0x96);	PPU_W (0x2800,	  0x4b);	PPU_W (0x2c00,	  0x3c); if ((
 800cea6:	21e1      	movs	r1, #225	; 0xe1
 800cea8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ceac:	f7fb fc0a 	bl	80086c4 <PPU_W>
 800ceb0:	2196      	movs	r1, #150	; 0x96
 800ceb2:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800ceb6:	f7fb fc05 	bl	80086c4 <PPU_W>
 800ceba:	214b      	movs	r1, #75	; 0x4b
 800cebc:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800cec0:	f7fb fc00 	bl	80086c4 <PPU_W>
 800cec4:	213c      	movs	r1, #60	; 0x3c
 800cec6:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800ceca:	f7fb fbfb 	bl	80086c4 <PPU_W>
		PPU_R (0x2000) == 0xe1) && (PPU_R (0x2400) == 0x96) && (PPU_R (0x2800) == 0x4b) && (PPU_R (0x2c00) == 0x3c)) {
 800cece:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ced2:	f7fb fbc7 	bl	8008664 <PPU_R>
 800ced6:	4603      	mov	r3, r0
		PPU_W (0x2000,	  0xe1);	PPU_W (0x2400,	  0x96);	PPU_W (0x2800,	  0x4b);	PPU_W (0x2c00,	  0x3c); if ((
 800ced8:	2be1      	cmp	r3, #225	; 0xe1
 800ceda:	d131      	bne.n	800cf40 <init+0x13b8>
		PPU_R (0x2000) == 0xe1) && (PPU_R (0x2400) == 0x96) && (PPU_R (0x2800) == 0x4b) && (PPU_R (0x2c00) == 0x3c)) {
 800cedc:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800cee0:	f7fb fbc0 	bl	8008664 <PPU_R>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b96      	cmp	r3, #150	; 0x96
 800cee8:	d12a      	bne.n	800cf40 <init+0x13b8>
 800ceea:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800ceee:	f7fb fbb9 	bl	8008664 <PPU_R>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b4b      	cmp	r3, #75	; 0x4b
 800cef6:	d123      	bne.n	800cf40 <init+0x13b8>
 800cef8:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800cefc:	f7fb fbb2 	bl	8008664 <PPU_R>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b3c      	cmp	r3, #60	; 0x3c
 800cf04:	d11c      	bne.n	800cf40 <init+0x13b8>

		   map.text [14] =  '4';			info.b [6] |= 9;
 800cf06:	4b0a      	ldr	r3, [pc, #40]	; (800cf30 <init+0x13a8>)
 800cf08:	2234      	movs	r2, #52	; 0x34
 800cf0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf0e:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <init+0x13ac>)
 800cf10:	799b      	ldrb	r3, [r3, #6]
 800cf12:	f043 0309 	orr.w	r3, r3, #9
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	4b06      	ldr	r3, [pc, #24]	; (800cf34 <init+0x13ac>)
 800cf1a:	719a      	strb	r2, [r3, #6]
 800cf1c:	e021      	b.n	800cf62 <init+0x13da>
 800cf1e:	bf00      	nop
 800cf20:	200033c8 	.word	0x200033c8
 800cf24:	200032c8 	.word	0x200032c8
 800cf28:	200030c8 	.word	0x200030c8
 800cf2c:	20003530 	.word	0x20003530
 800cf30:	20002aac 	.word	0x20002aac
 800cf34:	2000288c 	.word	0x2000288c
 800cf38:	200034cc 	.word	0x200034cc
 800cf3c:	20003508 	.word	0x20003508

		} else if (map.text [14] == 'M')	info.b [6] = (info.b [6] & 254) | 8;
 800cf40:	4ba8      	ldr	r3, [pc, #672]	; (800d1e4 <init+0x165c>)
 800cf42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf46:	2b4d      	cmp	r3, #77	; 0x4d
 800cf48:	d10b      	bne.n	800cf62 <init+0x13da>
 800cf4a:	4ba7      	ldr	r3, [pc, #668]	; (800d1e8 <init+0x1660>)
 800cf4c:	799b      	ldrb	r3, [r3, #6]
 800cf4e:	b25b      	sxtb	r3, r3
 800cf50:	f023 0309 	bic.w	r3, r3, #9
 800cf54:	b25b      	sxtb	r3, r3
 800cf56:	f043 0308 	orr.w	r3, r3, #8
 800cf5a:	b25b      	sxtb	r3, r3
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	4ba2      	ldr	r3, [pc, #648]	; (800d1e8 <init+0x1660>)
 800cf60:	719a      	strb	r2, [r3, #6]

		// this counteracts the mirroring test later on
		if ((info.b [6] & 8) && PPU_mirroring_test_2 (0x35, 0x6C) == 0x35) info.b [6] --;
 800cf62:	4ba1      	ldr	r3, [pc, #644]	; (800d1e8 <init+0x1660>)
 800cf64:	799b      	ldrb	r3, [r3, #6]
 800cf66:	f003 0308 	and.w	r3, r3, #8
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00c      	beq.n	800cf88 <init+0x1400>
 800cf6e:	216c      	movs	r1, #108	; 0x6c
 800cf70:	2035      	movs	r0, #53	; 0x35
 800cf72:	f7fe fa03 	bl	800b37c <PPU_mirroring_test_2>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b35      	cmp	r3, #53	; 0x35
 800cf7a:	d105      	bne.n	800cf88 <init+0x1400>
 800cf7c:	4b9a      	ldr	r3, [pc, #616]	; (800d1e8 <init+0x1660>)
 800cf7e:	799b      	ldrb	r3, [r3, #6]
 800cf80:	3b01      	subs	r3, #1
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	4b98      	ldr	r3, [pc, #608]	; (800d1e8 <init+0x1660>)
 800cf86:	719a      	strb	r2, [r3, #6]

//	CPROM
case 13:
		info.b [5] = 0;	//	no CHR-ROM on CPROM or UNROM-512
 800cf88:	4b97      	ldr	r3, [pc, #604]	; (800d1e8 <init+0x1660>)
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	715a      	strb	r2, [r3, #5]
		break;
 800cf8e:	e000      	b.n	800cf92 <init+0x140a>
	if (! ch.items.conflict_testing_on) goto ALTERNATE;
 800cf90:	bf00      	nop

//---------------------------------------------------------------------------------------------------
ALTERNATE:

	// if default PRG-ROM size found, test for 16KB PRG-ROM
	if ((info.b [4] == 2) && ch.items._16KB_PRG_ROM_test) {
 800cf92:	4b95      	ldr	r3, [pc, #596]	; (800d1e8 <init+0x1660>)
 800cf94:	791b      	ldrb	r3, [r3, #4]
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d129      	bne.n	800cfee <init+0x1466>
 800cf9a:	4b94      	ldr	r3, [pc, #592]	; (800d1ec <init+0x1664>)
 800cf9c:	8a5b      	ldrh	r3, [r3, #18]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d025      	beq.n	800cfee <init+0x1466>

		for (int n = 0; n < PRG_KEYS; n ++)
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfa6:	e01a      	b.n	800cfde <init+0x1456>

			if (CPU_R (PRG_keys [1][n] + 0x8000) != CPU_R (PRG_keys [1][n] + 0xC000))	goto NROM_256;
 800cfa8:	4a91      	ldr	r2, [pc, #580]	; (800d1f0 <init+0x1668>)
 800cfaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfac:	3308      	adds	r3, #8
 800cfae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfb2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fb fad6 	bl	8008568 <CPU_R>
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	4a8c      	ldr	r2, [pc, #560]	; (800d1f0 <init+0x1668>)
 800cfc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfc2:	3308      	adds	r3, #8
 800cfc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfc8:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fb facb 	bl	8008568 <CPU_R>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	429c      	cmp	r4, r3
 800cfd6:	d109      	bne.n	800cfec <init+0x1464>
		for (int n = 0; n < PRG_KEYS; n ++)
 800cfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfda:	3301      	adds	r3, #1
 800cfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe0:	2b07      	cmp	r3, #7
 800cfe2:	dde1      	ble.n	800cfa8 <init+0x1420>

		info.b [4] = 1;
 800cfe4:	4b80      	ldr	r3, [pc, #512]	; (800d1e8 <init+0x1660>)
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	711a      	strb	r2, [r3, #4]
 800cfea:	e000      	b.n	800cfee <init+0x1466>
			if (CPU_R (PRG_keys [1][n] + 0x8000) != CPU_R (PRG_keys [1][n] + 0xC000))	goto NROM_256;
 800cfec:	bf00      	nop

//---------------------------------------------------------------------------------------------------
NROM_256:
DONE:
	//
	v.PRG_ROM_size = info.b [4] << 14;		//	PRG 16KB bank count
 800cfee:	4b7e      	ldr	r3, [pc, #504]	; (800d1e8 <init+0x1660>)
 800cff0:	791b      	ldrb	r3, [r3, #4]
 800cff2:	039b      	lsls	r3, r3, #14
 800cff4:	461a      	mov	r2, r3
 800cff6:	4b7f      	ldr	r3, [pc, #508]	; (800d1f4 <init+0x166c>)
 800cff8:	601a      	str	r2, [r3, #0]
	v.CHR_ROM_size = info.b [5] << 13;		//	CHR  8KB bank count
 800cffa:	4b7b      	ldr	r3, [pc, #492]	; (800d1e8 <init+0x1660>)
 800cffc:	795b      	ldrb	r3, [r3, #5]
 800cffe:	035b      	lsls	r3, r3, #13
 800d000:	461a      	mov	r2, r3
 800d002:	4b7c      	ldr	r3, [pc, #496]	; (800d1f4 <init+0x166c>)
 800d004:	60da      	str	r2, [r3, #12]

	//	generate a mirroring setting
	if (PPU_mirroring_test_2 (0x35, 0x6C) == 0x35) info.b [6] ++;
 800d006:	216c      	movs	r1, #108	; 0x6c
 800d008:	2035      	movs	r0, #53	; 0x35
 800d00a:	f7fe f9b7 	bl	800b37c <PPU_mirroring_test_2>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b35      	cmp	r3, #53	; 0x35
 800d012:	d105      	bne.n	800d020 <init+0x1498>
 800d014:	4b74      	ldr	r3, [pc, #464]	; (800d1e8 <init+0x1660>)
 800d016:	799b      	ldrb	r3, [r3, #6]
 800d018:	3301      	adds	r3, #1
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	4b72      	ldr	r3, [pc, #456]	; (800d1e8 <init+0x1660>)
 800d01e:	719a      	strb	r2, [r3, #6]
//////////////////////////////////////////////////////////////////////////////////////////
//////// Mapper Override Auto-detect tests ///////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

	// find and test auto-detection sequences in OVERRIDE.BIN
	if (ch.items.override_testing_on) {
 800d020:	4b72      	ldr	r3, [pc, #456]	; (800d1ec <init+0x1664>)
 800d022:	8a9b      	ldrh	r3, [r3, #20]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d021      	beq.n	800d06c <init+0x14e4>

		// run list of manual mappers with TEST sequences
		for (unsigned int i = 0; find_map_header (& i, -1); ) {
 800d028:	2300      	movs	r3, #0
 800d02a:	60fb      	str	r3, [r7, #12]
 800d02c:	e014      	b.n	800d058 <init+0x14d0>

			if (! check_map_abstract (& i)) {
 800d02e:	f107 030c 	add.w	r3, r7, #12
 800d032:	4618      	mov	r0, r3
 800d034:	f7fb fe9c 	bl	8008d70 <check_map_abstract>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10c      	bne.n	800d058 <init+0x14d0>

				if (! manual_bankswitch (v.TEST_override_index, 0)) {
 800d03e:	4b6d      	ldr	r3, [pc, #436]	; (800d1f4 <init+0x166c>)
 800d040:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d044:	2100      	movs	r1, #0
 800d046:	4618      	mov	r0, r3
 800d048:	f7fb fc1e 	bl	8008888 <manual_bankswitch>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d102      	bne.n	800d058 <init+0x14d0>

					setup_override ();
 800d052:	f7fb ff61 	bl	8008f18 <setup_override>
					break;
 800d056:	e009      	b.n	800d06c <init+0x14e4>
		for (unsigned int i = 0; find_map_header (& i, -1); ) {
 800d058:	f107 030c 	add.w	r3, r7, #12
 800d05c:	f04f 31ff 	mov.w	r1, #4294967295
 800d060:	4618      	mov	r0, r3
 800d062:	f7fb fe57 	bl	8008d14 <find_map_header>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1e0      	bne.n	800d02e <init+0x14a6>
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
MAKE_NES:

	// write out the header in hex for easy override transition
	seq_ctr = 0;
 800d06c:	4b62      	ldr	r3, [pc, #392]	; (800d1f8 <init+0x1670>)
 800d06e:	2200      	movs	r2, #0
 800d070:	801a      	strh	r2, [r3, #0]
	src_pos = & info.b [0];
 800d072:	4b62      	ldr	r3, [pc, #392]	; (800d1fc <init+0x1674>)
 800d074:	4a5c      	ldr	r2, [pc, #368]	; (800d1e8 <init+0x1660>)
 800d076:	601a      	str	r2, [r3, #0]
	override_txt_R ((ptr_all_types) { (unsigned char *) & report_txt [0] }, 1);
 800d078:	4b61      	ldr	r3, [pc, #388]	; (800d200 <init+0x1678>)
 800d07a:	61bb      	str	r3, [r7, #24]
 800d07c:	2101      	movs	r1, #1
 800d07e:	69b8      	ldr	r0, [r7, #24]
 800d080:	f7fd fb94 	bl	800a7ac <override_txt_R>

	//	calculate NES_2.0 header stuff or not
	if (!(info.r.flags_7 & 8)) for (register int n = 8; n < 16; n ++)	if (info.b [n])
 800d084:	4b58      	ldr	r3, [pc, #352]	; (800d1e8 <init+0x1660>)
 800d086:	79db      	ldrb	r3, [r3, #7]
 800d088:	f003 0308 	and.w	r3, r3, #8
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d117      	bne.n	800d0c0 <init+0x1538>
 800d090:	2408      	movs	r4, #8
 800d092:	e013      	b.n	800d0bc <init+0x1534>
 800d094:	4b54      	ldr	r3, [pc, #336]	; (800d1e8 <init+0x1660>)
 800d096:	5d1b      	ldrb	r3, [r3, r4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00e      	beq.n	800d0ba <init+0x1532>
	{
		if (ch.items.NES_2_0_enable)	info.b [7] |= 8;	//	set the NES 2.0 signature
 800d09c:	4b53      	ldr	r3, [pc, #332]	; (800d1ec <init+0x1664>)
 800d09e:	8b1b      	ldrh	r3, [r3, #24]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d007      	beq.n	800d0b4 <init+0x152c>
 800d0a4:	4b50      	ldr	r3, [pc, #320]	; (800d1e8 <init+0x1660>)
 800d0a6:	79db      	ldrb	r3, [r3, #7]
 800d0a8:	f043 0308 	orr.w	r3, r3, #8
 800d0ac:	b2da      	uxtb	r2, r3
 800d0ae:	4b4e      	ldr	r3, [pc, #312]	; (800d1e8 <init+0x1660>)
 800d0b0:	71da      	strb	r2, [r3, #7]
 800d0b2:	e002      	b.n	800d0ba <init+0x1532>
		else							info.b [n]  = 0;	//	clear the NES 2.0 flags
 800d0b4:	4b4c      	ldr	r3, [pc, #304]	; (800d1e8 <init+0x1660>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	551a      	strb	r2, [r3, r4]
	if (!(info.r.flags_7 & 8)) for (register int n = 8; n < 16; n ++)	if (info.b [n])
 800d0ba:	3401      	adds	r4, #1
 800d0bc:	2c0f      	cmp	r4, #15
 800d0be:	dde9      	ble.n	800d094 <init+0x150c>
	}

	// write out the ROM parameters
	memcpy (& report_txt [128], &map.text, 16);
 800d0c0:	4a4f      	ldr	r2, [pc, #316]	; (800d200 <init+0x1678>)
 800d0c2:	4b48      	ldr	r3, [pc, #288]	; (800d1e4 <init+0x165c>)
 800d0c4:	f102 0480 	add.w	r4, r2, #128	; 0x80
 800d0c8:	f103 0530 	add.w	r5, r3, #48	; 0x30
 800d0cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0ce:	6020      	str	r0, [r4, #0]
 800d0d0:	6061      	str	r1, [r4, #4]
 800d0d2:	60a2      	str	r2, [r4, #8]
 800d0d4:	60e3      	str	r3, [r4, #12]
	memset (& report_txt [144], ' ', 12);
 800d0d6:	220c      	movs	r2, #12
 800d0d8:	2120      	movs	r1, #32
 800d0da:	484a      	ldr	r0, [pc, #296]	; (800d204 <init+0x167c>)
 800d0dc:	f000 f8d1 	bl	800d282 <memset>
	report_txt [156] = '@';
 800d0e0:	4b47      	ldr	r3, [pc, #284]	; (800d200 <init+0x1678>)
 800d0e2:	2240      	movs	r2, #64	; 0x40
 800d0e4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	report_txt [157] = '!';
 800d0e8:	4b45      	ldr	r3, [pc, #276]	; (800d200 <init+0x1678>)
 800d0ea:	2221      	movs	r2, #33	; 0x21
 800d0ec:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	register int p = 158;
 800d0f0:	249e      	movs	r4, #158	; 0x9e
    p += sprintf (& report_txt [p], "\r\n\r\nMapper  :%13u\r\nPRG-ROM : %12u\r\nCHR-ROM :%13u\r\n",
 800d0f2:	4b43      	ldr	r3, [pc, #268]	; (800d200 <init+0x1678>)
 800d0f4:	18e0      	adds	r0, r4, r3
    		(info.b [6] >> 4) | (info.b [7] & 240) | ((info.r.submapper & 15) << 8),
 800d0f6:	4b3c      	ldr	r3, [pc, #240]	; (800d1e8 <init+0x1660>)
 800d0f8:	799b      	ldrb	r3, [r3, #6]
 800d0fa:	091b      	lsrs	r3, r3, #4
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	461a      	mov	r2, r3
 800d100:	4b39      	ldr	r3, [pc, #228]	; (800d1e8 <init+0x1660>)
 800d102:	79db      	ldrb	r3, [r3, #7]
 800d104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d108:	431a      	orrs	r2, r3
 800d10a:	4b37      	ldr	r3, [pc, #220]	; (800d1e8 <init+0x1660>)
 800d10c:	7a1b      	ldrb	r3, [r3, #8]
 800d10e:	021b      	lsls	r3, r3, #8
 800d110:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    p += sprintf (& report_txt [p], "\r\n\r\nMapper  :%13u\r\nPRG-ROM : %12u\r\nCHR-ROM :%13u\r\n",
 800d114:	431a      	orrs	r2, r3
 800d116:	4b37      	ldr	r3, [pc, #220]	; (800d1f4 <init+0x166c>)
 800d118:	6819      	ldr	r1, [r3, #0]
 800d11a:	4b36      	ldr	r3, [pc, #216]	; (800d1f4 <init+0x166c>)
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	460b      	mov	r3, r1
 800d122:	4939      	ldr	r1, [pc, #228]	; (800d208 <init+0x1680>)
 800d124:	f000 f8b6 	bl	800d294 <siprintf>
 800d128:	4603      	mov	r3, r0
 800d12a:	441c      	add	r4, r3
			v.PRG_ROM_size,
			v.CHR_ROM_size);

    // write out the SRAM info
	memset (& report_txt [p], ' ', 512 - p);
 800d12c:	4b34      	ldr	r3, [pc, #208]	; (800d200 <init+0x1678>)
 800d12e:	4423      	add	r3, r4
 800d130:	f5c4 7200 	rsb	r2, r4, #512	; 0x200
 800d134:	2120      	movs	r1, #32
 800d136:	4618      	mov	r0, r3
 800d138:	f000 f8a3 	bl	800d282 <memset>
	if (info.b [6] & 2) p += sprintf (& report_txt [p], "SAVE-RAM:%13u", (int) 1 << SAV_size);
 800d13c:	4b2a      	ldr	r3, [pc, #168]	; (800d1e8 <init+0x1660>)
 800d13e:	799b      	ldrb	r3, [r3, #6]
 800d140:	f003 0302 	and.w	r3, r3, #2
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00c      	beq.n	800d162 <init+0x15da>
 800d148:	4b2d      	ldr	r3, [pc, #180]	; (800d200 <init+0x1678>)
 800d14a:	18e0      	adds	r0, r4, r3
 800d14c:	4b2f      	ldr	r3, [pc, #188]	; (800d20c <init+0x1684>)
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	461a      	mov	r2, r3
 800d152:	2301      	movs	r3, #1
 800d154:	4093      	lsls	r3, r2
 800d156:	461a      	mov	r2, r3
 800d158:	492d      	ldr	r1, [pc, #180]	; (800d210 <init+0x1688>)
 800d15a:	f000 f89b 	bl	800d294 <siprintf>
 800d15e:	4603      	mov	r3, r0
 800d160:	441c      	add	r4, r3
//	if (v.SRAM_err	) p += sprintf (& report_txt [p], "SRAM write-back error count: %i\r\n", v.SRAM_err);

	// create the main NES ROM abstracts
	ptr_krnl -> make_file_handler ("ROM     NES ", v.PRG_ROM_size + v.CHR_ROM_size + 16, ROM_NES_R, null_io);
 800d162:	4b2c      	ldr	r3, [pc, #176]	; (800d214 <init+0x168c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	685c      	ldr	r4, [r3, #4]
 800d168:	4b22      	ldr	r3, [pc, #136]	; (800d1f4 <init+0x166c>)
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	4b21      	ldr	r3, [pc, #132]	; (800d1f4 <init+0x166c>)
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	4413      	add	r3, r2
 800d172:	f103 0110 	add.w	r1, r3, #16
 800d176:	4b28      	ldr	r3, [pc, #160]	; (800d218 <init+0x1690>)
 800d178:	4a28      	ldr	r2, [pc, #160]	; (800d21c <init+0x1694>)
 800d17a:	4829      	ldr	r0, [pc, #164]	; (800d220 <init+0x1698>)
 800d17c:	47a0      	blx	r4

	// create any SRAM abstracts
	if (info.b [6] & 2)	ptr_krnl -> make_file_handler ("ROM     SAV ", v.SRAM_size, ROM_SAV_R, ROM_SAV_W);
 800d17e:	4b1a      	ldr	r3, [pc, #104]	; (800d1e8 <init+0x1660>)
 800d180:	799b      	ldrb	r3, [r3, #6]
 800d182:	f003 0302 	and.w	r3, r3, #2
 800d186:	2b00      	cmp	r3, #0
 800d188:	d008      	beq.n	800d19c <init+0x1614>
 800d18a:	4b22      	ldr	r3, [pc, #136]	; (800d214 <init+0x168c>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	685c      	ldr	r4, [r3, #4]
 800d190:	4b18      	ldr	r3, [pc, #96]	; (800d1f4 <init+0x166c>)
 800d192:	6999      	ldr	r1, [r3, #24]
 800d194:	4b23      	ldr	r3, [pc, #140]	; (800d224 <init+0x169c>)
 800d196:	4a24      	ldr	r2, [pc, #144]	; (800d228 <init+0x16a0>)
 800d198:	4824      	ldr	r0, [pc, #144]	; (800d22c <init+0x16a4>)
 800d19a:	47a0      	blx	r4

	// create any flash abstractions
	if (v.mode & 1) ptr_krnl -> make_file_handler ("PRG     BIN ", v.PRG_ROM_size, null_io, PRG_BIN_W);
 800d19c:	4b15      	ldr	r3, [pc, #84]	; (800d1f4 <init+0x166c>)
 800d19e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d008      	beq.n	800d1bc <init+0x1634>
 800d1aa:	4b1a      	ldr	r3, [pc, #104]	; (800d214 <init+0x168c>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	685c      	ldr	r4, [r3, #4]
 800d1b0:	4b10      	ldr	r3, [pc, #64]	; (800d1f4 <init+0x166c>)
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	4b1e      	ldr	r3, [pc, #120]	; (800d230 <init+0x16a8>)
 800d1b6:	4a18      	ldr	r2, [pc, #96]	; (800d218 <init+0x1690>)
 800d1b8:	481e      	ldr	r0, [pc, #120]	; (800d234 <init+0x16ac>)
 800d1ba:	47a0      	blx	r4
	if (v.mode & 2) ptr_krnl -> make_file_handler ("CHR     BIN ", v.CHR_ROM_size, null_io, CHR_BIN_W);
 800d1bc:	4b0d      	ldr	r3, [pc, #52]	; (800d1f4 <init+0x166c>)
 800d1be:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800d1c2:	f003 0302 	and.w	r3, r3, #2
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d008      	beq.n	800d1dc <init+0x1654>
 800d1ca:	4b12      	ldr	r3, [pc, #72]	; (800d214 <init+0x168c>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	685c      	ldr	r4, [r3, #4]
 800d1d0:	4b08      	ldr	r3, [pc, #32]	; (800d1f4 <init+0x166c>)
 800d1d2:	68d9      	ldr	r1, [r3, #12]
 800d1d4:	4b18      	ldr	r3, [pc, #96]	; (800d238 <init+0x16b0>)
 800d1d6:	4a10      	ldr	r2, [pc, #64]	; (800d218 <init+0x1690>)
 800d1d8:	4818      	ldr	r0, [pc, #96]	; (800d23c <init+0x16b4>)
 800d1da:	47a0      	blx	r4

}
 800d1dc:	377c      	adds	r7, #124	; 0x7c
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	20002aac 	.word	0x20002aac
 800d1e8:	2000288c 	.word	0x2000288c
 800d1ec:	20003638 	.word	0x20003638
 800d1f0:	0800dff8 	.word	0x0800dff8
 800d1f4:	200034cc 	.word	0x200034cc
 800d1f8:	200036e8 	.word	0x200036e8
 800d1fc:	20003630 	.word	0x20003630
 800d200:	200032c8 	.word	0x200032c8
 800d204:	20003358 	.word	0x20003358
 800d208:	0800de0c 	.word	0x0800de0c
 800d20c:	200034c8 	.word	0x200034c8
 800d210:	0800de40 	.word	0x0800de40
 800d214:	20003634 	.word	0x20003634
 800d218:	0800835b 	.word	0x0800835b
 800d21c:	0800ad85 	.word	0x0800ad85
 800d220:	0800ddd4 	.word	0x0800ddd4
 800d224:	0800af2d 	.word	0x0800af2d
 800d228:	0800aec1 	.word	0x0800aec1
 800d22c:	0800de50 	.word	0x0800de50
 800d230:	0800b025 	.word	0x0800b025
 800d234:	0800de60 	.word	0x0800de60
 800d238:	0800b1e5 	.word	0x0800b1e5
 800d23c:	0800de70 	.word	0x0800de70

0800d240 <main>:

//---------------------------------------------------------------------------------------------------------
// not used for application

int main () { return 0; }
 800d240:	b480      	push	{r7}
 800d242:	af00      	add	r7, sp, #0
 800d244:	2300      	movs	r3, #0
 800d246:	4618      	mov	r0, r3
 800d248:	46bd      	mov	sp, r7
 800d24a:	bc80      	pop	{r7}
 800d24c:	4770      	bx	lr

0800d24e <memcmp>:
 800d24e:	b510      	push	{r4, lr}
 800d250:	3901      	subs	r1, #1
 800d252:	4402      	add	r2, r0
 800d254:	4290      	cmp	r0, r2
 800d256:	d101      	bne.n	800d25c <memcmp+0xe>
 800d258:	2000      	movs	r0, #0
 800d25a:	bd10      	pop	{r4, pc}
 800d25c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d260:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d264:	42a3      	cmp	r3, r4
 800d266:	d0f5      	beq.n	800d254 <memcmp+0x6>
 800d268:	1b18      	subs	r0, r3, r4
 800d26a:	bd10      	pop	{r4, pc}

0800d26c <memcpy>:
 800d26c:	b510      	push	{r4, lr}
 800d26e:	1e43      	subs	r3, r0, #1
 800d270:	440a      	add	r2, r1
 800d272:	4291      	cmp	r1, r2
 800d274:	d100      	bne.n	800d278 <memcpy+0xc>
 800d276:	bd10      	pop	{r4, pc}
 800d278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d27c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d280:	e7f7      	b.n	800d272 <memcpy+0x6>

0800d282 <memset>:
 800d282:	4603      	mov	r3, r0
 800d284:	4402      	add	r2, r0
 800d286:	4293      	cmp	r3, r2
 800d288:	d100      	bne.n	800d28c <memset+0xa>
 800d28a:	4770      	bx	lr
 800d28c:	f803 1b01 	strb.w	r1, [r3], #1
 800d290:	e7f9      	b.n	800d286 <memset+0x4>
	...

0800d294 <siprintf>:
 800d294:	b40e      	push	{r1, r2, r3}
 800d296:	f44f 7102 	mov.w	r1, #520	; 0x208
 800d29a:	b500      	push	{lr}
 800d29c:	b09c      	sub	sp, #112	; 0x70
 800d29e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d2a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d2a6:	9104      	str	r1, [sp, #16]
 800d2a8:	9107      	str	r1, [sp, #28]
 800d2aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d2ae:	ab1d      	add	r3, sp, #116	; 0x74
 800d2b0:	9002      	str	r0, [sp, #8]
 800d2b2:	9006      	str	r0, [sp, #24]
 800d2b4:	4808      	ldr	r0, [pc, #32]	; (800d2d8 <siprintf+0x44>)
 800d2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ba:	f8ad 1016 	strh.w	r1, [sp, #22]
 800d2be:	6800      	ldr	r0, [r0, #0]
 800d2c0:	a902      	add	r1, sp, #8
 800d2c2:	9301      	str	r3, [sp, #4]
 800d2c4:	f000 f880 	bl	800d3c8 <_svfiprintf_r>
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	9b02      	ldr	r3, [sp, #8]
 800d2cc:	701a      	strb	r2, [r3, #0]
 800d2ce:	b01c      	add	sp, #112	; 0x70
 800d2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d4:	b003      	add	sp, #12
 800d2d6:	4770      	bx	lr
 800d2d8:	20002800 	.word	0x20002800

0800d2dc <strstr>:
 800d2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2de:	7803      	ldrb	r3, [r0, #0]
 800d2e0:	b133      	cbz	r3, 800d2f0 <strstr+0x14>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	1c5e      	adds	r6, r3, #1
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	b933      	cbnz	r3, 800d2fa <strstr+0x1e>
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f0:	780b      	ldrb	r3, [r1, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bf18      	it	ne
 800d2f6:	2000      	movne	r0, #0
 800d2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2fa:	1e4d      	subs	r5, r1, #1
 800d2fc:	1e44      	subs	r4, r0, #1
 800d2fe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800d302:	2a00      	cmp	r2, #0
 800d304:	d0f3      	beq.n	800d2ee <strstr+0x12>
 800d306:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800d30a:	4633      	mov	r3, r6
 800d30c:	4297      	cmp	r7, r2
 800d30e:	d0f6      	beq.n	800d2fe <strstr+0x22>
 800d310:	e7e8      	b.n	800d2e4 <strstr+0x8>

0800d312 <__ssputs_r>:
 800d312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d316:	688e      	ldr	r6, [r1, #8]
 800d318:	4682      	mov	sl, r0
 800d31a:	429e      	cmp	r6, r3
 800d31c:	460c      	mov	r4, r1
 800d31e:	4691      	mov	r9, r2
 800d320:	4698      	mov	r8, r3
 800d322:	d835      	bhi.n	800d390 <__ssputs_r+0x7e>
 800d324:	898a      	ldrh	r2, [r1, #12]
 800d326:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d32a:	d031      	beq.n	800d390 <__ssputs_r+0x7e>
 800d32c:	2302      	movs	r3, #2
 800d32e:	6825      	ldr	r5, [r4, #0]
 800d330:	6909      	ldr	r1, [r1, #16]
 800d332:	1a6f      	subs	r7, r5, r1
 800d334:	6965      	ldr	r5, [r4, #20]
 800d336:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d33a:	fb95 f5f3 	sdiv	r5, r5, r3
 800d33e:	f108 0301 	add.w	r3, r8, #1
 800d342:	443b      	add	r3, r7
 800d344:	429d      	cmp	r5, r3
 800d346:	bf38      	it	cc
 800d348:	461d      	movcc	r5, r3
 800d34a:	0553      	lsls	r3, r2, #21
 800d34c:	d531      	bpl.n	800d3b2 <__ssputs_r+0xa0>
 800d34e:	4629      	mov	r1, r5
 800d350:	f000 fb3a 	bl	800d9c8 <_malloc_r>
 800d354:	4606      	mov	r6, r0
 800d356:	b950      	cbnz	r0, 800d36e <__ssputs_r+0x5c>
 800d358:	230c      	movs	r3, #12
 800d35a:	f8ca 3000 	str.w	r3, [sl]
 800d35e:	89a3      	ldrh	r3, [r4, #12]
 800d360:	f04f 30ff 	mov.w	r0, #4294967295
 800d364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d368:	81a3      	strh	r3, [r4, #12]
 800d36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d36e:	463a      	mov	r2, r7
 800d370:	6921      	ldr	r1, [r4, #16]
 800d372:	f7ff ff7b 	bl	800d26c <memcpy>
 800d376:	89a3      	ldrh	r3, [r4, #12]
 800d378:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d37c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d380:	81a3      	strh	r3, [r4, #12]
 800d382:	6126      	str	r6, [r4, #16]
 800d384:	443e      	add	r6, r7
 800d386:	6026      	str	r6, [r4, #0]
 800d388:	4646      	mov	r6, r8
 800d38a:	6165      	str	r5, [r4, #20]
 800d38c:	1bed      	subs	r5, r5, r7
 800d38e:	60a5      	str	r5, [r4, #8]
 800d390:	4546      	cmp	r6, r8
 800d392:	bf28      	it	cs
 800d394:	4646      	movcs	r6, r8
 800d396:	4649      	mov	r1, r9
 800d398:	4632      	mov	r2, r6
 800d39a:	6820      	ldr	r0, [r4, #0]
 800d39c:	f000 faae 	bl	800d8fc <memmove>
 800d3a0:	68a3      	ldr	r3, [r4, #8]
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	1b9b      	subs	r3, r3, r6
 800d3a6:	60a3      	str	r3, [r4, #8]
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	441e      	add	r6, r3
 800d3ac:	6026      	str	r6, [r4, #0]
 800d3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b2:	462a      	mov	r2, r5
 800d3b4:	f000 fb66 	bl	800da84 <_realloc_r>
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	d1e1      	bne.n	800d382 <__ssputs_r+0x70>
 800d3be:	6921      	ldr	r1, [r4, #16]
 800d3c0:	4650      	mov	r0, sl
 800d3c2:	f000 fab5 	bl	800d930 <_free_r>
 800d3c6:	e7c7      	b.n	800d358 <__ssputs_r+0x46>

0800d3c8 <_svfiprintf_r>:
 800d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3cc:	b09d      	sub	sp, #116	; 0x74
 800d3ce:	9303      	str	r3, [sp, #12]
 800d3d0:	898b      	ldrh	r3, [r1, #12]
 800d3d2:	4680      	mov	r8, r0
 800d3d4:	061c      	lsls	r4, r3, #24
 800d3d6:	460d      	mov	r5, r1
 800d3d8:	4616      	mov	r6, r2
 800d3da:	d50f      	bpl.n	800d3fc <_svfiprintf_r+0x34>
 800d3dc:	690b      	ldr	r3, [r1, #16]
 800d3de:	b96b      	cbnz	r3, 800d3fc <_svfiprintf_r+0x34>
 800d3e0:	2140      	movs	r1, #64	; 0x40
 800d3e2:	f000 faf1 	bl	800d9c8 <_malloc_r>
 800d3e6:	6028      	str	r0, [r5, #0]
 800d3e8:	6128      	str	r0, [r5, #16]
 800d3ea:	b928      	cbnz	r0, 800d3f8 <_svfiprintf_r+0x30>
 800d3ec:	230c      	movs	r3, #12
 800d3ee:	f8c8 3000 	str.w	r3, [r8]
 800d3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f6:	e0c4      	b.n	800d582 <_svfiprintf_r+0x1ba>
 800d3f8:	2340      	movs	r3, #64	; 0x40
 800d3fa:	616b      	str	r3, [r5, #20]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d400:	2320      	movs	r3, #32
 800d402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d406:	2330      	movs	r3, #48	; 0x30
 800d408:	f04f 0b01 	mov.w	fp, #1
 800d40c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d410:	4637      	mov	r7, r6
 800d412:	463c      	mov	r4, r7
 800d414:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d13c      	bne.n	800d496 <_svfiprintf_r+0xce>
 800d41c:	ebb7 0a06 	subs.w	sl, r7, r6
 800d420:	d00b      	beq.n	800d43a <_svfiprintf_r+0x72>
 800d422:	4653      	mov	r3, sl
 800d424:	4632      	mov	r2, r6
 800d426:	4629      	mov	r1, r5
 800d428:	4640      	mov	r0, r8
 800d42a:	f7ff ff72 	bl	800d312 <__ssputs_r>
 800d42e:	3001      	adds	r0, #1
 800d430:	f000 80a2 	beq.w	800d578 <_svfiprintf_r+0x1b0>
 800d434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d436:	4453      	add	r3, sl
 800d438:	9309      	str	r3, [sp, #36]	; 0x24
 800d43a:	783b      	ldrb	r3, [r7, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f000 809b 	beq.w	800d578 <_svfiprintf_r+0x1b0>
 800d442:	2300      	movs	r3, #0
 800d444:	f04f 32ff 	mov.w	r2, #4294967295
 800d448:	9304      	str	r3, [sp, #16]
 800d44a:	9307      	str	r3, [sp, #28]
 800d44c:	9205      	str	r2, [sp, #20]
 800d44e:	9306      	str	r3, [sp, #24]
 800d450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d454:	931a      	str	r3, [sp, #104]	; 0x68
 800d456:	2205      	movs	r2, #5
 800d458:	7821      	ldrb	r1, [r4, #0]
 800d45a:	4850      	ldr	r0, [pc, #320]	; (800d59c <_svfiprintf_r+0x1d4>)
 800d45c:	f000 fa40 	bl	800d8e0 <memchr>
 800d460:	1c67      	adds	r7, r4, #1
 800d462:	9b04      	ldr	r3, [sp, #16]
 800d464:	b9d8      	cbnz	r0, 800d49e <_svfiprintf_r+0xd6>
 800d466:	06d9      	lsls	r1, r3, #27
 800d468:	bf44      	itt	mi
 800d46a:	2220      	movmi	r2, #32
 800d46c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d470:	071a      	lsls	r2, r3, #28
 800d472:	bf44      	itt	mi
 800d474:	222b      	movmi	r2, #43	; 0x2b
 800d476:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d47a:	7822      	ldrb	r2, [r4, #0]
 800d47c:	2a2a      	cmp	r2, #42	; 0x2a
 800d47e:	d016      	beq.n	800d4ae <_svfiprintf_r+0xe6>
 800d480:	2100      	movs	r1, #0
 800d482:	200a      	movs	r0, #10
 800d484:	9a07      	ldr	r2, [sp, #28]
 800d486:	4627      	mov	r7, r4
 800d488:	783b      	ldrb	r3, [r7, #0]
 800d48a:	3401      	adds	r4, #1
 800d48c:	3b30      	subs	r3, #48	; 0x30
 800d48e:	2b09      	cmp	r3, #9
 800d490:	d950      	bls.n	800d534 <_svfiprintf_r+0x16c>
 800d492:	b1c9      	cbz	r1, 800d4c8 <_svfiprintf_r+0x100>
 800d494:	e011      	b.n	800d4ba <_svfiprintf_r+0xf2>
 800d496:	2b25      	cmp	r3, #37	; 0x25
 800d498:	d0c0      	beq.n	800d41c <_svfiprintf_r+0x54>
 800d49a:	4627      	mov	r7, r4
 800d49c:	e7b9      	b.n	800d412 <_svfiprintf_r+0x4a>
 800d49e:	4a3f      	ldr	r2, [pc, #252]	; (800d59c <_svfiprintf_r+0x1d4>)
 800d4a0:	463c      	mov	r4, r7
 800d4a2:	1a80      	subs	r0, r0, r2
 800d4a4:	fa0b f000 	lsl.w	r0, fp, r0
 800d4a8:	4318      	orrs	r0, r3
 800d4aa:	9004      	str	r0, [sp, #16]
 800d4ac:	e7d3      	b.n	800d456 <_svfiprintf_r+0x8e>
 800d4ae:	9a03      	ldr	r2, [sp, #12]
 800d4b0:	1d11      	adds	r1, r2, #4
 800d4b2:	6812      	ldr	r2, [r2, #0]
 800d4b4:	9103      	str	r1, [sp, #12]
 800d4b6:	2a00      	cmp	r2, #0
 800d4b8:	db01      	blt.n	800d4be <_svfiprintf_r+0xf6>
 800d4ba:	9207      	str	r2, [sp, #28]
 800d4bc:	e004      	b.n	800d4c8 <_svfiprintf_r+0x100>
 800d4be:	4252      	negs	r2, r2
 800d4c0:	f043 0302 	orr.w	r3, r3, #2
 800d4c4:	9207      	str	r2, [sp, #28]
 800d4c6:	9304      	str	r3, [sp, #16]
 800d4c8:	783b      	ldrb	r3, [r7, #0]
 800d4ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d4cc:	d10d      	bne.n	800d4ea <_svfiprintf_r+0x122>
 800d4ce:	787b      	ldrb	r3, [r7, #1]
 800d4d0:	1c79      	adds	r1, r7, #1
 800d4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4d4:	d132      	bne.n	800d53c <_svfiprintf_r+0x174>
 800d4d6:	9b03      	ldr	r3, [sp, #12]
 800d4d8:	3702      	adds	r7, #2
 800d4da:	1d1a      	adds	r2, r3, #4
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	9203      	str	r2, [sp, #12]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	bfb8      	it	lt
 800d4e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4e8:	9305      	str	r3, [sp, #20]
 800d4ea:	4c2d      	ldr	r4, [pc, #180]	; (800d5a0 <_svfiprintf_r+0x1d8>)
 800d4ec:	2203      	movs	r2, #3
 800d4ee:	7839      	ldrb	r1, [r7, #0]
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f000 f9f5 	bl	800d8e0 <memchr>
 800d4f6:	b138      	cbz	r0, 800d508 <_svfiprintf_r+0x140>
 800d4f8:	2340      	movs	r3, #64	; 0x40
 800d4fa:	1b00      	subs	r0, r0, r4
 800d4fc:	fa03 f000 	lsl.w	r0, r3, r0
 800d500:	9b04      	ldr	r3, [sp, #16]
 800d502:	3701      	adds	r7, #1
 800d504:	4303      	orrs	r3, r0
 800d506:	9304      	str	r3, [sp, #16]
 800d508:	7839      	ldrb	r1, [r7, #0]
 800d50a:	2206      	movs	r2, #6
 800d50c:	4825      	ldr	r0, [pc, #148]	; (800d5a4 <_svfiprintf_r+0x1dc>)
 800d50e:	1c7e      	adds	r6, r7, #1
 800d510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d514:	f000 f9e4 	bl	800d8e0 <memchr>
 800d518:	2800      	cmp	r0, #0
 800d51a:	d035      	beq.n	800d588 <_svfiprintf_r+0x1c0>
 800d51c:	4b22      	ldr	r3, [pc, #136]	; (800d5a8 <_svfiprintf_r+0x1e0>)
 800d51e:	b9fb      	cbnz	r3, 800d560 <_svfiprintf_r+0x198>
 800d520:	9b03      	ldr	r3, [sp, #12]
 800d522:	3307      	adds	r3, #7
 800d524:	f023 0307 	bic.w	r3, r3, #7
 800d528:	3308      	adds	r3, #8
 800d52a:	9303      	str	r3, [sp, #12]
 800d52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d52e:	444b      	add	r3, r9
 800d530:	9309      	str	r3, [sp, #36]	; 0x24
 800d532:	e76d      	b.n	800d410 <_svfiprintf_r+0x48>
 800d534:	fb00 3202 	mla	r2, r0, r2, r3
 800d538:	2101      	movs	r1, #1
 800d53a:	e7a4      	b.n	800d486 <_svfiprintf_r+0xbe>
 800d53c:	2300      	movs	r3, #0
 800d53e:	240a      	movs	r4, #10
 800d540:	4618      	mov	r0, r3
 800d542:	9305      	str	r3, [sp, #20]
 800d544:	460f      	mov	r7, r1
 800d546:	783a      	ldrb	r2, [r7, #0]
 800d548:	3101      	adds	r1, #1
 800d54a:	3a30      	subs	r2, #48	; 0x30
 800d54c:	2a09      	cmp	r2, #9
 800d54e:	d903      	bls.n	800d558 <_svfiprintf_r+0x190>
 800d550:	2b00      	cmp	r3, #0
 800d552:	d0ca      	beq.n	800d4ea <_svfiprintf_r+0x122>
 800d554:	9005      	str	r0, [sp, #20]
 800d556:	e7c8      	b.n	800d4ea <_svfiprintf_r+0x122>
 800d558:	fb04 2000 	mla	r0, r4, r0, r2
 800d55c:	2301      	movs	r3, #1
 800d55e:	e7f1      	b.n	800d544 <_svfiprintf_r+0x17c>
 800d560:	ab03      	add	r3, sp, #12
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	462a      	mov	r2, r5
 800d566:	4b11      	ldr	r3, [pc, #68]	; (800d5ac <_svfiprintf_r+0x1e4>)
 800d568:	a904      	add	r1, sp, #16
 800d56a:	4640      	mov	r0, r8
 800d56c:	f3af 8000 	nop.w
 800d570:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d574:	4681      	mov	r9, r0
 800d576:	d1d9      	bne.n	800d52c <_svfiprintf_r+0x164>
 800d578:	89ab      	ldrh	r3, [r5, #12]
 800d57a:	065b      	lsls	r3, r3, #25
 800d57c:	f53f af39 	bmi.w	800d3f2 <_svfiprintf_r+0x2a>
 800d580:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d582:	b01d      	add	sp, #116	; 0x74
 800d584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d588:	ab03      	add	r3, sp, #12
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	462a      	mov	r2, r5
 800d58e:	4b07      	ldr	r3, [pc, #28]	; (800d5ac <_svfiprintf_r+0x1e4>)
 800d590:	a904      	add	r1, sp, #16
 800d592:	4640      	mov	r0, r8
 800d594:	f000 f884 	bl	800d6a0 <_printf_i>
 800d598:	e7ea      	b.n	800d570 <_svfiprintf_r+0x1a8>
 800d59a:	bf00      	nop
 800d59c:	0800e698 	.word	0x0800e698
 800d5a0:	0800e69e 	.word	0x0800e69e
 800d5a4:	0800e6a2 	.word	0x0800e6a2
 800d5a8:	00000000 	.word	0x00000000
 800d5ac:	0800d313 	.word	0x0800d313

0800d5b0 <_printf_common>:
 800d5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b4:	4691      	mov	r9, r2
 800d5b6:	461f      	mov	r7, r3
 800d5b8:	688a      	ldr	r2, [r1, #8]
 800d5ba:	690b      	ldr	r3, [r1, #16]
 800d5bc:	4606      	mov	r6, r0
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	bfb8      	it	lt
 800d5c2:	4613      	movlt	r3, r2
 800d5c4:	f8c9 3000 	str.w	r3, [r9]
 800d5c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5d2:	b112      	cbz	r2, 800d5da <_printf_common+0x2a>
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	f8c9 3000 	str.w	r3, [r9]
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	0699      	lsls	r1, r3, #26
 800d5de:	bf42      	ittt	mi
 800d5e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d5e4:	3302      	addmi	r3, #2
 800d5e6:	f8c9 3000 	strmi.w	r3, [r9]
 800d5ea:	6825      	ldr	r5, [r4, #0]
 800d5ec:	f015 0506 	ands.w	r5, r5, #6
 800d5f0:	d107      	bne.n	800d602 <_printf_common+0x52>
 800d5f2:	f104 0a19 	add.w	sl, r4, #25
 800d5f6:	68e3      	ldr	r3, [r4, #12]
 800d5f8:	f8d9 2000 	ldr.w	r2, [r9]
 800d5fc:	1a9b      	subs	r3, r3, r2
 800d5fe:	429d      	cmp	r5, r3
 800d600:	db2a      	blt.n	800d658 <_printf_common+0xa8>
 800d602:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d606:	6822      	ldr	r2, [r4, #0]
 800d608:	3300      	adds	r3, #0
 800d60a:	bf18      	it	ne
 800d60c:	2301      	movne	r3, #1
 800d60e:	0692      	lsls	r2, r2, #26
 800d610:	d42f      	bmi.n	800d672 <_printf_common+0xc2>
 800d612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d616:	4639      	mov	r1, r7
 800d618:	4630      	mov	r0, r6
 800d61a:	47c0      	blx	r8
 800d61c:	3001      	adds	r0, #1
 800d61e:	d022      	beq.n	800d666 <_printf_common+0xb6>
 800d620:	6823      	ldr	r3, [r4, #0]
 800d622:	68e5      	ldr	r5, [r4, #12]
 800d624:	f003 0306 	and.w	r3, r3, #6
 800d628:	2b04      	cmp	r3, #4
 800d62a:	bf18      	it	ne
 800d62c:	2500      	movne	r5, #0
 800d62e:	f8d9 2000 	ldr.w	r2, [r9]
 800d632:	f04f 0900 	mov.w	r9, #0
 800d636:	bf08      	it	eq
 800d638:	1aad      	subeq	r5, r5, r2
 800d63a:	68a3      	ldr	r3, [r4, #8]
 800d63c:	6922      	ldr	r2, [r4, #16]
 800d63e:	bf08      	it	eq
 800d640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d644:	4293      	cmp	r3, r2
 800d646:	bfc4      	itt	gt
 800d648:	1a9b      	subgt	r3, r3, r2
 800d64a:	18ed      	addgt	r5, r5, r3
 800d64c:	341a      	adds	r4, #26
 800d64e:	454d      	cmp	r5, r9
 800d650:	d11b      	bne.n	800d68a <_printf_common+0xda>
 800d652:	2000      	movs	r0, #0
 800d654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d658:	2301      	movs	r3, #1
 800d65a:	4652      	mov	r2, sl
 800d65c:	4639      	mov	r1, r7
 800d65e:	4630      	mov	r0, r6
 800d660:	47c0      	blx	r8
 800d662:	3001      	adds	r0, #1
 800d664:	d103      	bne.n	800d66e <_printf_common+0xbe>
 800d666:	f04f 30ff 	mov.w	r0, #4294967295
 800d66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66e:	3501      	adds	r5, #1
 800d670:	e7c1      	b.n	800d5f6 <_printf_common+0x46>
 800d672:	2030      	movs	r0, #48	; 0x30
 800d674:	18e1      	adds	r1, r4, r3
 800d676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d67a:	1c5a      	adds	r2, r3, #1
 800d67c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d680:	4422      	add	r2, r4
 800d682:	3302      	adds	r3, #2
 800d684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d688:	e7c3      	b.n	800d612 <_printf_common+0x62>
 800d68a:	2301      	movs	r3, #1
 800d68c:	4622      	mov	r2, r4
 800d68e:	4639      	mov	r1, r7
 800d690:	4630      	mov	r0, r6
 800d692:	47c0      	blx	r8
 800d694:	3001      	adds	r0, #1
 800d696:	d0e6      	beq.n	800d666 <_printf_common+0xb6>
 800d698:	f109 0901 	add.w	r9, r9, #1
 800d69c:	e7d7      	b.n	800d64e <_printf_common+0x9e>
	...

0800d6a0 <_printf_i>:
 800d6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6a4:	4617      	mov	r7, r2
 800d6a6:	7e0a      	ldrb	r2, [r1, #24]
 800d6a8:	b085      	sub	sp, #20
 800d6aa:	2a6e      	cmp	r2, #110	; 0x6e
 800d6ac:	4698      	mov	r8, r3
 800d6ae:	4606      	mov	r6, r0
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6b4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800d6b8:	f000 80bc 	beq.w	800d834 <_printf_i+0x194>
 800d6bc:	d81a      	bhi.n	800d6f4 <_printf_i+0x54>
 800d6be:	2a63      	cmp	r2, #99	; 0x63
 800d6c0:	d02e      	beq.n	800d720 <_printf_i+0x80>
 800d6c2:	d80a      	bhi.n	800d6da <_printf_i+0x3a>
 800d6c4:	2a00      	cmp	r2, #0
 800d6c6:	f000 80c8 	beq.w	800d85a <_printf_i+0x1ba>
 800d6ca:	2a58      	cmp	r2, #88	; 0x58
 800d6cc:	f000 808a 	beq.w	800d7e4 <_printf_i+0x144>
 800d6d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800d6d8:	e02a      	b.n	800d730 <_printf_i+0x90>
 800d6da:	2a64      	cmp	r2, #100	; 0x64
 800d6dc:	d001      	beq.n	800d6e2 <_printf_i+0x42>
 800d6de:	2a69      	cmp	r2, #105	; 0x69
 800d6e0:	d1f6      	bne.n	800d6d0 <_printf_i+0x30>
 800d6e2:	6821      	ldr	r1, [r4, #0]
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d6ea:	d023      	beq.n	800d734 <_printf_i+0x94>
 800d6ec:	1d11      	adds	r1, r2, #4
 800d6ee:	6019      	str	r1, [r3, #0]
 800d6f0:	6813      	ldr	r3, [r2, #0]
 800d6f2:	e027      	b.n	800d744 <_printf_i+0xa4>
 800d6f4:	2a73      	cmp	r2, #115	; 0x73
 800d6f6:	f000 80b4 	beq.w	800d862 <_printf_i+0x1c2>
 800d6fa:	d808      	bhi.n	800d70e <_printf_i+0x6e>
 800d6fc:	2a6f      	cmp	r2, #111	; 0x6f
 800d6fe:	d02a      	beq.n	800d756 <_printf_i+0xb6>
 800d700:	2a70      	cmp	r2, #112	; 0x70
 800d702:	d1e5      	bne.n	800d6d0 <_printf_i+0x30>
 800d704:	680a      	ldr	r2, [r1, #0]
 800d706:	f042 0220 	orr.w	r2, r2, #32
 800d70a:	600a      	str	r2, [r1, #0]
 800d70c:	e003      	b.n	800d716 <_printf_i+0x76>
 800d70e:	2a75      	cmp	r2, #117	; 0x75
 800d710:	d021      	beq.n	800d756 <_printf_i+0xb6>
 800d712:	2a78      	cmp	r2, #120	; 0x78
 800d714:	d1dc      	bne.n	800d6d0 <_printf_i+0x30>
 800d716:	2278      	movs	r2, #120	; 0x78
 800d718:	496f      	ldr	r1, [pc, #444]	; (800d8d8 <_printf_i+0x238>)
 800d71a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800d71e:	e064      	b.n	800d7ea <_printf_i+0x14a>
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800d726:	1d11      	adds	r1, r2, #4
 800d728:	6019      	str	r1, [r3, #0]
 800d72a:	6813      	ldr	r3, [r2, #0]
 800d72c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d730:	2301      	movs	r3, #1
 800d732:	e0a3      	b.n	800d87c <_printf_i+0x1dc>
 800d734:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d738:	f102 0104 	add.w	r1, r2, #4
 800d73c:	6019      	str	r1, [r3, #0]
 800d73e:	d0d7      	beq.n	800d6f0 <_printf_i+0x50>
 800d740:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d744:	2b00      	cmp	r3, #0
 800d746:	da03      	bge.n	800d750 <_printf_i+0xb0>
 800d748:	222d      	movs	r2, #45	; 0x2d
 800d74a:	425b      	negs	r3, r3
 800d74c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d750:	4962      	ldr	r1, [pc, #392]	; (800d8dc <_printf_i+0x23c>)
 800d752:	220a      	movs	r2, #10
 800d754:	e017      	b.n	800d786 <_printf_i+0xe6>
 800d756:	6820      	ldr	r0, [r4, #0]
 800d758:	6819      	ldr	r1, [r3, #0]
 800d75a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d75e:	d003      	beq.n	800d768 <_printf_i+0xc8>
 800d760:	1d08      	adds	r0, r1, #4
 800d762:	6018      	str	r0, [r3, #0]
 800d764:	680b      	ldr	r3, [r1, #0]
 800d766:	e006      	b.n	800d776 <_printf_i+0xd6>
 800d768:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d76c:	f101 0004 	add.w	r0, r1, #4
 800d770:	6018      	str	r0, [r3, #0]
 800d772:	d0f7      	beq.n	800d764 <_printf_i+0xc4>
 800d774:	880b      	ldrh	r3, [r1, #0]
 800d776:	2a6f      	cmp	r2, #111	; 0x6f
 800d778:	bf14      	ite	ne
 800d77a:	220a      	movne	r2, #10
 800d77c:	2208      	moveq	r2, #8
 800d77e:	4957      	ldr	r1, [pc, #348]	; (800d8dc <_printf_i+0x23c>)
 800d780:	2000      	movs	r0, #0
 800d782:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800d786:	6865      	ldr	r5, [r4, #4]
 800d788:	2d00      	cmp	r5, #0
 800d78a:	60a5      	str	r5, [r4, #8]
 800d78c:	f2c0 809c 	blt.w	800d8c8 <_printf_i+0x228>
 800d790:	6820      	ldr	r0, [r4, #0]
 800d792:	f020 0004 	bic.w	r0, r0, #4
 800d796:	6020      	str	r0, [r4, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d13f      	bne.n	800d81c <_printf_i+0x17c>
 800d79c:	2d00      	cmp	r5, #0
 800d79e:	f040 8095 	bne.w	800d8cc <_printf_i+0x22c>
 800d7a2:	4675      	mov	r5, lr
 800d7a4:	2a08      	cmp	r2, #8
 800d7a6:	d10b      	bne.n	800d7c0 <_printf_i+0x120>
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	07da      	lsls	r2, r3, #31
 800d7ac:	d508      	bpl.n	800d7c0 <_printf_i+0x120>
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	6862      	ldr	r2, [r4, #4]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	bfde      	ittt	le
 800d7b6:	2330      	movle	r3, #48	; 0x30
 800d7b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7c0:	ebae 0305 	sub.w	r3, lr, r5
 800d7c4:	6123      	str	r3, [r4, #16]
 800d7c6:	f8cd 8000 	str.w	r8, [sp]
 800d7ca:	463b      	mov	r3, r7
 800d7cc:	aa03      	add	r2, sp, #12
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	f7ff feed 	bl	800d5b0 <_printf_common>
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	d155      	bne.n	800d886 <_printf_i+0x1e6>
 800d7da:	f04f 30ff 	mov.w	r0, #4294967295
 800d7de:	b005      	add	sp, #20
 800d7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800d7e8:	493c      	ldr	r1, [pc, #240]	; (800d8dc <_printf_i+0x23c>)
 800d7ea:	6822      	ldr	r2, [r4, #0]
 800d7ec:	6818      	ldr	r0, [r3, #0]
 800d7ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d7f2:	f100 0504 	add.w	r5, r0, #4
 800d7f6:	601d      	str	r5, [r3, #0]
 800d7f8:	d001      	beq.n	800d7fe <_printf_i+0x15e>
 800d7fa:	6803      	ldr	r3, [r0, #0]
 800d7fc:	e002      	b.n	800d804 <_printf_i+0x164>
 800d7fe:	0655      	lsls	r5, r2, #25
 800d800:	d5fb      	bpl.n	800d7fa <_printf_i+0x15a>
 800d802:	8803      	ldrh	r3, [r0, #0]
 800d804:	07d0      	lsls	r0, r2, #31
 800d806:	bf44      	itt	mi
 800d808:	f042 0220 	orrmi.w	r2, r2, #32
 800d80c:	6022      	strmi	r2, [r4, #0]
 800d80e:	b91b      	cbnz	r3, 800d818 <_printf_i+0x178>
 800d810:	6822      	ldr	r2, [r4, #0]
 800d812:	f022 0220 	bic.w	r2, r2, #32
 800d816:	6022      	str	r2, [r4, #0]
 800d818:	2210      	movs	r2, #16
 800d81a:	e7b1      	b.n	800d780 <_printf_i+0xe0>
 800d81c:	4675      	mov	r5, lr
 800d81e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d822:	fb02 3310 	mls	r3, r2, r0, r3
 800d826:	5ccb      	ldrb	r3, [r1, r3]
 800d828:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d82c:	4603      	mov	r3, r0
 800d82e:	2800      	cmp	r0, #0
 800d830:	d1f5      	bne.n	800d81e <_printf_i+0x17e>
 800d832:	e7b7      	b.n	800d7a4 <_printf_i+0x104>
 800d834:	6808      	ldr	r0, [r1, #0]
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d83c:	6949      	ldr	r1, [r1, #20]
 800d83e:	d004      	beq.n	800d84a <_printf_i+0x1aa>
 800d840:	1d10      	adds	r0, r2, #4
 800d842:	6018      	str	r0, [r3, #0]
 800d844:	6813      	ldr	r3, [r2, #0]
 800d846:	6019      	str	r1, [r3, #0]
 800d848:	e007      	b.n	800d85a <_printf_i+0x1ba>
 800d84a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d84e:	f102 0004 	add.w	r0, r2, #4
 800d852:	6018      	str	r0, [r3, #0]
 800d854:	6813      	ldr	r3, [r2, #0]
 800d856:	d0f6      	beq.n	800d846 <_printf_i+0x1a6>
 800d858:	8019      	strh	r1, [r3, #0]
 800d85a:	2300      	movs	r3, #0
 800d85c:	4675      	mov	r5, lr
 800d85e:	6123      	str	r3, [r4, #16]
 800d860:	e7b1      	b.n	800d7c6 <_printf_i+0x126>
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	1d11      	adds	r1, r2, #4
 800d866:	6019      	str	r1, [r3, #0]
 800d868:	6815      	ldr	r5, [r2, #0]
 800d86a:	2100      	movs	r1, #0
 800d86c:	6862      	ldr	r2, [r4, #4]
 800d86e:	4628      	mov	r0, r5
 800d870:	f000 f836 	bl	800d8e0 <memchr>
 800d874:	b108      	cbz	r0, 800d87a <_printf_i+0x1da>
 800d876:	1b40      	subs	r0, r0, r5
 800d878:	6060      	str	r0, [r4, #4]
 800d87a:	6863      	ldr	r3, [r4, #4]
 800d87c:	6123      	str	r3, [r4, #16]
 800d87e:	2300      	movs	r3, #0
 800d880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d884:	e79f      	b.n	800d7c6 <_printf_i+0x126>
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	462a      	mov	r2, r5
 800d88a:	4639      	mov	r1, r7
 800d88c:	4630      	mov	r0, r6
 800d88e:	47c0      	blx	r8
 800d890:	3001      	adds	r0, #1
 800d892:	d0a2      	beq.n	800d7da <_printf_i+0x13a>
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	079b      	lsls	r3, r3, #30
 800d898:	d507      	bpl.n	800d8aa <_printf_i+0x20a>
 800d89a:	2500      	movs	r5, #0
 800d89c:	f104 0919 	add.w	r9, r4, #25
 800d8a0:	68e3      	ldr	r3, [r4, #12]
 800d8a2:	9a03      	ldr	r2, [sp, #12]
 800d8a4:	1a9b      	subs	r3, r3, r2
 800d8a6:	429d      	cmp	r5, r3
 800d8a8:	db05      	blt.n	800d8b6 <_printf_i+0x216>
 800d8aa:	68e0      	ldr	r0, [r4, #12]
 800d8ac:	9b03      	ldr	r3, [sp, #12]
 800d8ae:	4298      	cmp	r0, r3
 800d8b0:	bfb8      	it	lt
 800d8b2:	4618      	movlt	r0, r3
 800d8b4:	e793      	b.n	800d7de <_printf_i+0x13e>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	464a      	mov	r2, r9
 800d8ba:	4639      	mov	r1, r7
 800d8bc:	4630      	mov	r0, r6
 800d8be:	47c0      	blx	r8
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	d08a      	beq.n	800d7da <_printf_i+0x13a>
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	e7eb      	b.n	800d8a0 <_printf_i+0x200>
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d1a7      	bne.n	800d81c <_printf_i+0x17c>
 800d8cc:	780b      	ldrb	r3, [r1, #0]
 800d8ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8d6:	e765      	b.n	800d7a4 <_printf_i+0x104>
 800d8d8:	0800e6ba 	.word	0x0800e6ba
 800d8dc:	0800e6a9 	.word	0x0800e6a9

0800d8e0 <memchr>:
 800d8e0:	b510      	push	{r4, lr}
 800d8e2:	b2c9      	uxtb	r1, r1
 800d8e4:	4402      	add	r2, r0
 800d8e6:	4290      	cmp	r0, r2
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	d101      	bne.n	800d8f0 <memchr+0x10>
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	bd10      	pop	{r4, pc}
 800d8f0:	781c      	ldrb	r4, [r3, #0]
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	428c      	cmp	r4, r1
 800d8f6:	d1f6      	bne.n	800d8e6 <memchr+0x6>
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	bd10      	pop	{r4, pc}

0800d8fc <memmove>:
 800d8fc:	4288      	cmp	r0, r1
 800d8fe:	b510      	push	{r4, lr}
 800d900:	eb01 0302 	add.w	r3, r1, r2
 800d904:	d803      	bhi.n	800d90e <memmove+0x12>
 800d906:	1e42      	subs	r2, r0, #1
 800d908:	4299      	cmp	r1, r3
 800d90a:	d10c      	bne.n	800d926 <memmove+0x2a>
 800d90c:	bd10      	pop	{r4, pc}
 800d90e:	4298      	cmp	r0, r3
 800d910:	d2f9      	bcs.n	800d906 <memmove+0xa>
 800d912:	1881      	adds	r1, r0, r2
 800d914:	1ad2      	subs	r2, r2, r3
 800d916:	42d3      	cmn	r3, r2
 800d918:	d100      	bne.n	800d91c <memmove+0x20>
 800d91a:	bd10      	pop	{r4, pc}
 800d91c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d920:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d924:	e7f7      	b.n	800d916 <memmove+0x1a>
 800d926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d92a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d92e:	e7eb      	b.n	800d908 <memmove+0xc>

0800d930 <_free_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4605      	mov	r5, r0
 800d934:	2900      	cmp	r1, #0
 800d936:	d043      	beq.n	800d9c0 <_free_r+0x90>
 800d938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d93c:	1f0c      	subs	r4, r1, #4
 800d93e:	2b00      	cmp	r3, #0
 800d940:	bfb8      	it	lt
 800d942:	18e4      	addlt	r4, r4, r3
 800d944:	f000 f8d4 	bl	800daf0 <__malloc_lock>
 800d948:	4a1e      	ldr	r2, [pc, #120]	; (800d9c4 <_free_r+0x94>)
 800d94a:	6813      	ldr	r3, [r2, #0]
 800d94c:	4610      	mov	r0, r2
 800d94e:	b933      	cbnz	r3, 800d95e <_free_r+0x2e>
 800d950:	6063      	str	r3, [r4, #4]
 800d952:	6014      	str	r4, [r2, #0]
 800d954:	4628      	mov	r0, r5
 800d956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d95a:	f000 b8ca 	b.w	800daf2 <__malloc_unlock>
 800d95e:	42a3      	cmp	r3, r4
 800d960:	d90b      	bls.n	800d97a <_free_r+0x4a>
 800d962:	6821      	ldr	r1, [r4, #0]
 800d964:	1862      	adds	r2, r4, r1
 800d966:	4293      	cmp	r3, r2
 800d968:	bf01      	itttt	eq
 800d96a:	681a      	ldreq	r2, [r3, #0]
 800d96c:	685b      	ldreq	r3, [r3, #4]
 800d96e:	1852      	addeq	r2, r2, r1
 800d970:	6022      	streq	r2, [r4, #0]
 800d972:	6063      	str	r3, [r4, #4]
 800d974:	6004      	str	r4, [r0, #0]
 800d976:	e7ed      	b.n	800d954 <_free_r+0x24>
 800d978:	4613      	mov	r3, r2
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	b10a      	cbz	r2, 800d982 <_free_r+0x52>
 800d97e:	42a2      	cmp	r2, r4
 800d980:	d9fa      	bls.n	800d978 <_free_r+0x48>
 800d982:	6819      	ldr	r1, [r3, #0]
 800d984:	1858      	adds	r0, r3, r1
 800d986:	42a0      	cmp	r0, r4
 800d988:	d10b      	bne.n	800d9a2 <_free_r+0x72>
 800d98a:	6820      	ldr	r0, [r4, #0]
 800d98c:	4401      	add	r1, r0
 800d98e:	1858      	adds	r0, r3, r1
 800d990:	4282      	cmp	r2, r0
 800d992:	6019      	str	r1, [r3, #0]
 800d994:	d1de      	bne.n	800d954 <_free_r+0x24>
 800d996:	6810      	ldr	r0, [r2, #0]
 800d998:	6852      	ldr	r2, [r2, #4]
 800d99a:	4401      	add	r1, r0
 800d99c:	6019      	str	r1, [r3, #0]
 800d99e:	605a      	str	r2, [r3, #4]
 800d9a0:	e7d8      	b.n	800d954 <_free_r+0x24>
 800d9a2:	d902      	bls.n	800d9aa <_free_r+0x7a>
 800d9a4:	230c      	movs	r3, #12
 800d9a6:	602b      	str	r3, [r5, #0]
 800d9a8:	e7d4      	b.n	800d954 <_free_r+0x24>
 800d9aa:	6820      	ldr	r0, [r4, #0]
 800d9ac:	1821      	adds	r1, r4, r0
 800d9ae:	428a      	cmp	r2, r1
 800d9b0:	bf01      	itttt	eq
 800d9b2:	6811      	ldreq	r1, [r2, #0]
 800d9b4:	6852      	ldreq	r2, [r2, #4]
 800d9b6:	1809      	addeq	r1, r1, r0
 800d9b8:	6021      	streq	r1, [r4, #0]
 800d9ba:	6062      	str	r2, [r4, #4]
 800d9bc:	605c      	str	r4, [r3, #4]
 800d9be:	e7c9      	b.n	800d954 <_free_r+0x24>
 800d9c0:	bd38      	pop	{r3, r4, r5, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20002880 	.word	0x20002880

0800d9c8 <_malloc_r>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	1ccd      	adds	r5, r1, #3
 800d9cc:	f025 0503 	bic.w	r5, r5, #3
 800d9d0:	3508      	adds	r5, #8
 800d9d2:	2d0c      	cmp	r5, #12
 800d9d4:	bf38      	it	cc
 800d9d6:	250c      	movcc	r5, #12
 800d9d8:	2d00      	cmp	r5, #0
 800d9da:	4606      	mov	r6, r0
 800d9dc:	db01      	blt.n	800d9e2 <_malloc_r+0x1a>
 800d9de:	42a9      	cmp	r1, r5
 800d9e0:	d903      	bls.n	800d9ea <_malloc_r+0x22>
 800d9e2:	230c      	movs	r3, #12
 800d9e4:	6033      	str	r3, [r6, #0]
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ea:	f000 f881 	bl	800daf0 <__malloc_lock>
 800d9ee:	4a23      	ldr	r2, [pc, #140]	; (800da7c <_malloc_r+0xb4>)
 800d9f0:	6814      	ldr	r4, [r2, #0]
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	b991      	cbnz	r1, 800da1c <_malloc_r+0x54>
 800d9f6:	4c22      	ldr	r4, [pc, #136]	; (800da80 <_malloc_r+0xb8>)
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	b91b      	cbnz	r3, 800da04 <_malloc_r+0x3c>
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f000 f867 	bl	800dad0 <_sbrk_r>
 800da02:	6020      	str	r0, [r4, #0]
 800da04:	4629      	mov	r1, r5
 800da06:	4630      	mov	r0, r6
 800da08:	f000 f862 	bl	800dad0 <_sbrk_r>
 800da0c:	1c43      	adds	r3, r0, #1
 800da0e:	d126      	bne.n	800da5e <_malloc_r+0x96>
 800da10:	230c      	movs	r3, #12
 800da12:	4630      	mov	r0, r6
 800da14:	6033      	str	r3, [r6, #0]
 800da16:	f000 f86c 	bl	800daf2 <__malloc_unlock>
 800da1a:	e7e4      	b.n	800d9e6 <_malloc_r+0x1e>
 800da1c:	680b      	ldr	r3, [r1, #0]
 800da1e:	1b5b      	subs	r3, r3, r5
 800da20:	d41a      	bmi.n	800da58 <_malloc_r+0x90>
 800da22:	2b0b      	cmp	r3, #11
 800da24:	d90f      	bls.n	800da46 <_malloc_r+0x7e>
 800da26:	600b      	str	r3, [r1, #0]
 800da28:	18cc      	adds	r4, r1, r3
 800da2a:	50cd      	str	r5, [r1, r3]
 800da2c:	4630      	mov	r0, r6
 800da2e:	f000 f860 	bl	800daf2 <__malloc_unlock>
 800da32:	f104 000b 	add.w	r0, r4, #11
 800da36:	1d23      	adds	r3, r4, #4
 800da38:	f020 0007 	bic.w	r0, r0, #7
 800da3c:	1ac3      	subs	r3, r0, r3
 800da3e:	d01b      	beq.n	800da78 <_malloc_r+0xb0>
 800da40:	425a      	negs	r2, r3
 800da42:	50e2      	str	r2, [r4, r3]
 800da44:	bd70      	pop	{r4, r5, r6, pc}
 800da46:	428c      	cmp	r4, r1
 800da48:	bf0b      	itete	eq
 800da4a:	6863      	ldreq	r3, [r4, #4]
 800da4c:	684b      	ldrne	r3, [r1, #4]
 800da4e:	6013      	streq	r3, [r2, #0]
 800da50:	6063      	strne	r3, [r4, #4]
 800da52:	bf18      	it	ne
 800da54:	460c      	movne	r4, r1
 800da56:	e7e9      	b.n	800da2c <_malloc_r+0x64>
 800da58:	460c      	mov	r4, r1
 800da5a:	6849      	ldr	r1, [r1, #4]
 800da5c:	e7ca      	b.n	800d9f4 <_malloc_r+0x2c>
 800da5e:	1cc4      	adds	r4, r0, #3
 800da60:	f024 0403 	bic.w	r4, r4, #3
 800da64:	42a0      	cmp	r0, r4
 800da66:	d005      	beq.n	800da74 <_malloc_r+0xac>
 800da68:	1a21      	subs	r1, r4, r0
 800da6a:	4630      	mov	r0, r6
 800da6c:	f000 f830 	bl	800dad0 <_sbrk_r>
 800da70:	3001      	adds	r0, #1
 800da72:	d0cd      	beq.n	800da10 <_malloc_r+0x48>
 800da74:	6025      	str	r5, [r4, #0]
 800da76:	e7d9      	b.n	800da2c <_malloc_r+0x64>
 800da78:	bd70      	pop	{r4, r5, r6, pc}
 800da7a:	bf00      	nop
 800da7c:	20002880 	.word	0x20002880
 800da80:	20002884 	.word	0x20002884

0800da84 <_realloc_r>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	4607      	mov	r7, r0
 800da88:	4614      	mov	r4, r2
 800da8a:	460e      	mov	r6, r1
 800da8c:	b921      	cbnz	r1, 800da98 <_realloc_r+0x14>
 800da8e:	4611      	mov	r1, r2
 800da90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da94:	f7ff bf98 	b.w	800d9c8 <_malloc_r>
 800da98:	b922      	cbnz	r2, 800daa4 <_realloc_r+0x20>
 800da9a:	f7ff ff49 	bl	800d930 <_free_r>
 800da9e:	4625      	mov	r5, r4
 800daa0:	4628      	mov	r0, r5
 800daa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa4:	f000 f826 	bl	800daf4 <_malloc_usable_size_r>
 800daa8:	4284      	cmp	r4, r0
 800daaa:	d90f      	bls.n	800dacc <_realloc_r+0x48>
 800daac:	4621      	mov	r1, r4
 800daae:	4638      	mov	r0, r7
 800dab0:	f7ff ff8a 	bl	800d9c8 <_malloc_r>
 800dab4:	4605      	mov	r5, r0
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d0f2      	beq.n	800daa0 <_realloc_r+0x1c>
 800daba:	4631      	mov	r1, r6
 800dabc:	4622      	mov	r2, r4
 800dabe:	f7ff fbd5 	bl	800d26c <memcpy>
 800dac2:	4631      	mov	r1, r6
 800dac4:	4638      	mov	r0, r7
 800dac6:	f7ff ff33 	bl	800d930 <_free_r>
 800daca:	e7e9      	b.n	800daa0 <_realloc_r+0x1c>
 800dacc:	4635      	mov	r5, r6
 800dace:	e7e7      	b.n	800daa0 <_realloc_r+0x1c>

0800dad0 <_sbrk_r>:
 800dad0:	b538      	push	{r3, r4, r5, lr}
 800dad2:	2300      	movs	r3, #0
 800dad4:	4c05      	ldr	r4, [pc, #20]	; (800daec <_sbrk_r+0x1c>)
 800dad6:	4605      	mov	r5, r0
 800dad8:	4608      	mov	r0, r1
 800dada:	6023      	str	r3, [r4, #0]
 800dadc:	f000 f814 	bl	800db08 <_sbrk>
 800dae0:	1c43      	adds	r3, r0, #1
 800dae2:	d102      	bne.n	800daea <_sbrk_r+0x1a>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	b103      	cbz	r3, 800daea <_sbrk_r+0x1a>
 800dae8:	602b      	str	r3, [r5, #0]
 800daea:	bd38      	pop	{r3, r4, r5, pc}
 800daec:	200036ec 	.word	0x200036ec

0800daf0 <__malloc_lock>:
 800daf0:	4770      	bx	lr

0800daf2 <__malloc_unlock>:
 800daf2:	4770      	bx	lr

0800daf4 <_malloc_usable_size_r>:
 800daf4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800daf8:	2800      	cmp	r0, #0
 800dafa:	f1a0 0004 	sub.w	r0, r0, #4
 800dafe:	bfbc      	itt	lt
 800db00:	580b      	ldrlt	r3, [r1, r0]
 800db02:	18c0      	addlt	r0, r0, r3
 800db04:	4770      	bx	lr
	...

0800db08 <_sbrk>:
 800db08:	4b04      	ldr	r3, [pc, #16]	; (800db1c <_sbrk+0x14>)
 800db0a:	4602      	mov	r2, r0
 800db0c:	6819      	ldr	r1, [r3, #0]
 800db0e:	b909      	cbnz	r1, 800db14 <_sbrk+0xc>
 800db10:	4903      	ldr	r1, [pc, #12]	; (800db20 <_sbrk+0x18>)
 800db12:	6019      	str	r1, [r3, #0]
 800db14:	6818      	ldr	r0, [r3, #0]
 800db16:	4402      	add	r2, r0
 800db18:	601a      	str	r2, [r3, #0]
 800db1a:	4770      	bx	lr
 800db1c:	20002888 	.word	0x20002888
 800db20:	200036f0 	.word	0x200036f0

0800db24 <_init>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	bf00      	nop
 800db28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2a:	bc08      	pop	{r3}
 800db2c:	469e      	mov	lr, r3
 800db2e:	4770      	bx	lr

0800db30 <_fini>:
 800db30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db32:	bf00      	nop
 800db34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db36:	bc08      	pop	{r3}
 800db38:	469e      	mov	lr, r3
 800db3a:	4770      	bx	lr
