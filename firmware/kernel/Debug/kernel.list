
kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08001000  08001000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000683c  0800110c  0800110c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08007948  08007948  00007948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007b10  08007b10  00007b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007b14  08007b14  00007b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000108  20000000  08007b18  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002148  20000108  08007c20  00010108  2**2
                  ALLOC
  7 ._user_heap_stack 00000000  20002250  20002250  00010108  2**0
                  CONTENTS
  8 .ARM.attributes 00000029  00000000  00000000  00010108  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019c1f  00000000  00000000  00010131  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000382b  00000000  00000000  00029d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c20  00000000  00000000  0002d580  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a90  00000000  00000000  0002e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006d6d  00000000  00000000  0002ec30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000037b3  00000000  00000000  0003599d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039150  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002e58  00000000  00000000  000391cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800110c <__do_global_dtors_aux>:
 800110c:	b510      	push	{r4, lr}
 800110e:	4c05      	ldr	r4, [pc, #20]	; (8001124 <__do_global_dtors_aux+0x18>)
 8001110:	7823      	ldrb	r3, [r4, #0]
 8001112:	b933      	cbnz	r3, 8001122 <__do_global_dtors_aux+0x16>
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__do_global_dtors_aux+0x1c>)
 8001116:	b113      	cbz	r3, 800111e <__do_global_dtors_aux+0x12>
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <__do_global_dtors_aux+0x20>)
 800111a:	f3af 8000 	nop.w
 800111e:	2301      	movs	r3, #1
 8001120:	7023      	strb	r3, [r4, #0]
 8001122:	bd10      	pop	{r4, pc}
 8001124:	20000108 	.word	0x20000108
 8001128:	00000000 	.word	0x00000000
 800112c:	08007930 	.word	0x08007930

08001130 <frame_dummy>:
 8001130:	b508      	push	{r3, lr}
 8001132:	4b03      	ldr	r3, [pc, #12]	; (8001140 <frame_dummy+0x10>)
 8001134:	b11b      	cbz	r3, 800113e <frame_dummy+0xe>
 8001136:	4903      	ldr	r1, [pc, #12]	; (8001144 <frame_dummy+0x14>)
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <frame_dummy+0x18>)
 800113a:	f3af 8000 	nop.w
 800113e:	bd08      	pop	{r3, pc}
 8001140:	00000000 	.word	0x00000000
 8001144:	2000010c 	.word	0x2000010c
 8001148:	08007930 	.word	0x08007930

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_Init+0x28>)
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x28>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f91d 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f005 f9c0 	bl	80064ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f935 	bl	8001406 <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f8fd 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200000b0 	.word	0x200000b0
 80011d0:	20000004 	.word	0x20000004
 80011d4:	20000000 	.word	0x20000000

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_IncTick+0x1c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x20>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <HAL_IncTick+0x20>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000004 	.word	0x20000004
 80011f8:	20000398 	.word	0x20000398

080011fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <HAL_GetTick+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	20000398 	.word	0x20000398

08001210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <NVIC_EnableIRQ+0x2c>)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	095b      	lsrs	r3, r3, #5
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	f002 021f 	and.w	r2, r2, #31
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da0b      	bge.n	80012d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	490d      	ldr	r1, [pc, #52]	; (80012f0 <NVIC_SetPriority+0x4c>)
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	3b04      	subs	r3, #4
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ce:	e009      	b.n	80012e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	4908      	ldr	r1, [pc, #32]	; (80012f4 <NVIC_SetPriority+0x50>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	2201      	movs	r2, #1
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	401a      	ands	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133e:	2101      	movs	r1, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	1e59      	subs	r1, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff92 	bl	80012a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff33 	bl	8001210 <NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff48 	bl	8001258 <NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff92 	bl	80012f8 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff61 	bl	80012a4 <NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff3b 	bl	8001274 <NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b04      	cmp	r3, #4
 800142c:	d106      	bne.n	800143c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800143a:	e005      	b.n	8001448 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_CRC_Init>:
  * @param  hcrc: pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	795b      	ldrb	r3, [r3, #5]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	711a      	strb	r2, [r3, #4]
    
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f005 f894 	bl	80065a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b08b      	sub	sp, #44	; 0x2c
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	e127      	b.n	8001704 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80014b4:	2201      	movs	r2, #1
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8116 	bne.w	80016fe <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d034      	beq.n	8001544 <HAL_GPIO_Init+0xb4>
 80014da:	2b12      	cmp	r3, #18
 80014dc:	d80d      	bhi.n	80014fa <HAL_GPIO_Init+0x6a>
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d02b      	beq.n	800153a <HAL_GPIO_Init+0xaa>
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d804      	bhi.n	80014f0 <HAL_GPIO_Init+0x60>
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d031      	beq.n	800154e <HAL_GPIO_Init+0xbe>
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d01c      	beq.n	8001528 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ee:	e048      	b.n	8001582 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d043      	beq.n	800157c <HAL_GPIO_Init+0xec>
 80014f4:	2b11      	cmp	r3, #17
 80014f6:	d01b      	beq.n	8001530 <HAL_GPIO_Init+0xa0>
          break;
 80014f8:	e043      	b.n	8001582 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80014fa:	4a87      	ldr	r2, [pc, #540]	; (8001718 <HAL_GPIO_Init+0x288>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d026      	beq.n	800154e <HAL_GPIO_Init+0xbe>
 8001500:	4a85      	ldr	r2, [pc, #532]	; (8001718 <HAL_GPIO_Init+0x288>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d806      	bhi.n	8001514 <HAL_GPIO_Init+0x84>
 8001506:	4a85      	ldr	r2, [pc, #532]	; (800171c <HAL_GPIO_Init+0x28c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d020      	beq.n	800154e <HAL_GPIO_Init+0xbe>
 800150c:	4a84      	ldr	r2, [pc, #528]	; (8001720 <HAL_GPIO_Init+0x290>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d01d      	beq.n	800154e <HAL_GPIO_Init+0xbe>
          break;
 8001512:	e036      	b.n	8001582 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001514:	4a83      	ldr	r2, [pc, #524]	; (8001724 <HAL_GPIO_Init+0x294>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d019      	beq.n	800154e <HAL_GPIO_Init+0xbe>
 800151a:	4a83      	ldr	r2, [pc, #524]	; (8001728 <HAL_GPIO_Init+0x298>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d016      	beq.n	800154e <HAL_GPIO_Init+0xbe>
 8001520:	4a82      	ldr	r2, [pc, #520]	; (800172c <HAL_GPIO_Init+0x29c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0xbe>
          break;
 8001526:	e02c      	b.n	8001582 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e028      	b.n	8001582 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	3304      	adds	r3, #4
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e023      	b.n	8001582 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	3308      	adds	r3, #8
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e01e      	b.n	8001582 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	330c      	adds	r3, #12
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e019      	b.n	8001582 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001556:	2304      	movs	r3, #4
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e012      	b.n	8001582 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001564:	2308      	movs	r3, #8
 8001566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	611a      	str	r2, [r3, #16]
          break;
 800156e:	e008      	b.n	8001582 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001570:	2308      	movs	r3, #8
 8001572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	615a      	str	r2, [r3, #20]
          break;
 800157a:	e002      	b.n	8001582 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
          break;
 8001580:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2bff      	cmp	r3, #255	; 0xff
 8001586:	d801      	bhi.n	800158c <HAL_GPIO_Init+0xfc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	e001      	b.n	8001590 <HAL_GPIO_Init+0x100>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3304      	adds	r3, #4
 8001590:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2bff      	cmp	r3, #255	; 0xff
 8001596:	d802      	bhi.n	800159e <HAL_GPIO_Init+0x10e>
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x114>
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	3b08      	subs	r3, #8
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	210f      	movs	r1, #15
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	401a      	ands	r2, r3
 80015b6:	6a39      	ldr	r1, [r7, #32]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	431a      	orrs	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 8096 	beq.w	80016fe <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d2:	4a57      	ldr	r2, [pc, #348]	; (8001730 <HAL_GPIO_Init+0x2a0>)
 80015d4:	4b56      	ldr	r3, [pc, #344]	; (8001730 <HAL_GPIO_Init+0x2a0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6193      	str	r3, [r2, #24]
 80015de:	4b54      	ldr	r3, [pc, #336]	; (8001730 <HAL_GPIO_Init+0x2a0>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80015ea:	4a52      	ldr	r2, [pc, #328]	; (8001734 <HAL_GPIO_Init+0x2a4>)
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4013      	ands	r3, r2
 800160c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a49      	ldr	r2, [pc, #292]	; (8001738 <HAL_GPIO_Init+0x2a8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x1ae>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a48      	ldr	r2, [pc, #288]	; (800173c <HAL_GPIO_Init+0x2ac>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x1aa>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a47      	ldr	r2, [pc, #284]	; (8001740 <HAL_GPIO_Init+0x2b0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x1a6>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a46      	ldr	r2, [pc, #280]	; (8001744 <HAL_GPIO_Init+0x2b4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x1a2>
 800162e:	2303      	movs	r3, #3
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x1b0>
 8001632:	2304      	movs	r3, #4
 8001634:	e004      	b.n	8001640 <HAL_GPIO_Init+0x1b0>
 8001636:	2302      	movs	r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x1b0>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x1b0>
 800163e:	2300      	movs	r3, #0
 8001640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001642:	f002 0203 	and.w	r2, r2, #3
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	4093      	lsls	r3, r2
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4313      	orrs	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001650:	4938      	ldr	r1, [pc, #224]	; (8001734 <HAL_GPIO_Init+0x2a4>)
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800166a:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 800166c:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001678:	4933      	ldr	r1, [pc, #204]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	4013      	ands	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001692:	492d      	ldr	r1, [pc, #180]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 8001694:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
 800169e:	e006      	b.n	80016ae <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a0:	4929      	ldr	r1, [pc, #164]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4013      	ands	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016ba:	4923      	ldr	r1, [pc, #140]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
 80016c6:	e006      	b.n	80016d6 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c8:	491f      	ldr	r1, [pc, #124]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4013      	ands	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e2:	4919      	ldr	r1, [pc, #100]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60cb      	str	r3, [r1, #12]
 80016ee:	e006      	b.n	80016fe <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016f0:	4915      	ldr	r1, [pc, #84]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_GPIO_Init+0x2b8>)
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4013      	ands	r3, r2
 80016fc:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	3301      	adds	r3, #1
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f aed4 	bls.w	80014b4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	372c      	adds	r7, #44	; 0x2c
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	10210000 	.word	0x10210000
 800171c:	10110000 	.word	0x10110000
 8001720:	10120000 	.word	0x10120000
 8001724:	10310000 	.word	0x10310000
 8001728:	10320000 	.word	0x10320000
 800172c:	10220000 	.word	0x10220000
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000
 8001738:	40010800 	.word	0x40010800
 800173c:	40010c00 	.word	0x40010c00
 8001740:	40011000 	.word	0x40011000
 8001744:	40011400 	.word	0x40011400
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	611a      	str	r2, [r3, #16]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af06      	add	r7, sp, #24
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0ca      	b.n	8001928 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f004 ffae 	bl	8006708 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2203      	movs	r2, #3
 80017b0:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 fc21 	bl	8003000 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	687e      	ldr	r6, [r7, #4]
 80017c6:	466d      	mov	r5, sp
 80017c8:	f106 0410 	add.w	r4, r6, #16
 80017cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	602b      	str	r3, [r5, #0]
 80017d4:	1d33      	adds	r3, r6, #4
 80017d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f001 fbe7 	bl	8002fac <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fc27 	bl	8003038 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e037      	b.n	8001860 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	4413      	add	r3, r2
 80017f8:	3329      	adds	r3, #41	; 0x29
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	b2d9      	uxtb	r1, r3
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	015b      	lsls	r3, r3, #5
 8001808:	4413      	add	r3, r2
 800180a:	3328      	adds	r3, #40	; 0x28
 800180c:	460a      	mov	r2, r1
 800180e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	b299      	uxth	r1, r3
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	015b      	lsls	r3, r3, #5
 800181a:	4413      	add	r3, r2
 800181c:	3334      	adds	r3, #52	; 0x34
 800181e:	460a      	mov	r2, r1
 8001820:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	015b      	lsls	r3, r3, #5
 8001828:	4413      	add	r3, r2
 800182a:	332b      	adds	r3, #43	; 0x2b
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	4413      	add	r3, r2
 8001838:	3338      	adds	r3, #56	; 0x38
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	4413      	add	r3, r2
 8001846:	333c      	adds	r3, #60	; 0x3c
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3302      	adds	r3, #2
 8001852:	015b      	lsls	r3, r3, #5
 8001854:	4413      	add	r3, r2
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b0e      	cmp	r3, #14
 8001864:	d9c4      	bls.n	80017f0 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e03c      	b.n	80018e6 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	4413      	add	r3, r2
 8001874:	f203 2329 	addw	r3, r3, #553	; 0x229
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	b2d9      	uxtb	r1, r3
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	015b      	lsls	r3, r3, #5
 8001886:	4413      	add	r3, r2
 8001888:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800188c:	460a      	mov	r2, r1
 800188e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	b299      	uxth	r1, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	015b      	lsls	r3, r3, #5
 800189a:	4413      	add	r3, r2
 800189c:	3334      	adds	r3, #52	; 0x34
 800189e:	460a      	mov	r2, r1
 80018a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	015b      	lsls	r3, r3, #5
 80018a8:	4413      	add	r3, r2
 80018aa:	f203 232b 	addw	r3, r3, #555	; 0x22b
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	015b      	lsls	r3, r3, #5
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	015b      	lsls	r3, r3, #5
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3312      	adds	r3, #18
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	4413      	add	r3, r2
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b0e      	cmp	r3, #14
 80018ea:	d9bf      	bls.n	800186c <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	687e      	ldr	r6, [r7, #4]
 80018f4:	466d      	mov	r5, sp
 80018f6:	f106 0410 	add.w	r4, r6, #16
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	602b      	str	r3, [r5, #0]
 8001902:	1d33      	adds	r3, r6, #4
 8001904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001906:	6838      	ldr	r0, [r7, #0]
 8001908:	f001 fba2 	bl	8003050 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fba2 	bl	800406a <USB_DevDisconnect>
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001930 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_PCD_Start+0x16>
 8001942:	2302      	movs	r3, #2
 8001944:	e016      	b.n	8001974 <HAL_PCD_Start+0x44>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800194e:	2101      	movs	r1, #1
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f005 fa32 	bl	8006dba <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f002 fb7b 	bl	8004056 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f001 fb31 	bl	8002fcc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fb78 	bl	800407e <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001998:	d102      	bne.n	80019a0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fb06 	bl	8001fac <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fb6a 	bl	800407e <USB_ReadInterrupts>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b4:	d112      	bne.n	80019dc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80019c2:	b292      	uxth	r2, r2
 80019c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c8:	b292      	uxth	r2, r2
 80019ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f004 ff0f 	bl	80067f2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80019d4:	2100      	movs	r1, #0
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f8d2 	bl	8001b80 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fb4c 	bl	800407e <USB_ReadInterrupts>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019f0:	d10b      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80019fe:	b292      	uxth	r2, r2
 8001a00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a04:	b292      	uxth	r2, r2
 8001a06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fb35 	bl	800407e <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a1e:	d10b      	bne.n	8001a38 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a32:	b292      	uxth	r2, r2
 8001a34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 fb1e 	bl	800407e <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a4c:	d126      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001a5a:	b292      	uxth	r2, r2
 8001a5c:	f022 0204 	bic.w	r2, r2, #4
 8001a60:	b292      	uxth	r2, r2
 8001a62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001a72:	b292      	uxth	r2, r2
 8001a74:	f022 0208 	bic.w	r2, r2, #8
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f004 fef4 	bl	800686c <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001a90:	b292      	uxth	r2, r2
 8001a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a96:	b292      	uxth	r2, r2
 8001a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 faec 	bl	800407e <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ab0:	d131      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	f042 0208 	orr.w	r2, r2, #8
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001ad6:	b292      	uxth	r2, r2
 8001ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001adc:	b292      	uxth	r2, r2
 8001ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001aee:	b292      	uxth	r2, r2
 8001af0:	f042 0204 	orr.w	r2, r2, #4
 8001af4:	b292      	uxth	r2, r2
 8001af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fabd 	bl	800407e <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0e:	d002      	beq.n	8001b16 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f004 fe91 	bl	8006838 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 faaf 	bl	800407e <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2a:	d10e      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b38:	b292      	uxth	r2, r2
 8001b3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f004 fe46 	bl	80067d6 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fa95 	bl	800407e <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b5e:	d10b      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b72:	b292      	uxth	r2, r2
 8001b74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_PCD_SetAddress+0x1a>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e013      	b.n	8001bc2 <HAL_PCD_SetAddress+0x42>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fa3c 	bl	8004030 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	4608      	mov	r0, r1
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4603      	mov	r3, r0
 8001bda:	70fb      	strb	r3, [r7, #3]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	803b      	strh	r3, [r7, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	da08      	bge.n	8001c06 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bfa:	015b      	lsls	r3, r3, #5
 8001bfc:	3328      	adds	r3, #40	; 0x28
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e008      	b.n	8001c18 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	09db      	lsrs	r3, r3, #7
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001c34:	883a      	ldrh	r2, [r7, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	78ba      	ldrb	r2, [r7, #2]
 8001c3e:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_PCD_EP_Open+0x84>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e00e      	b.n	8001c6c <HAL_PCD_EP_Open+0xa2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68f9      	ldr	r1, [r7, #12]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fa31 	bl	80030c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da08      	bge.n	8001c9e <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c92:	015b      	lsls	r3, r3, #5
 8001c94:	3328      	adds	r3, #40	; 0x28
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e008      	b.n	8001cb0 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ca4:	015b      	lsls	r3, r3, #5
 8001ca6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	09db      	lsrs	r3, r3, #7
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_PCD_EP_Close+0x66>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e00e      	b.n	8001cf8 <HAL_PCD_EP_Close+0x84>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68f9      	ldr	r1, [r7, #12]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 fcad 	bl	8003648 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d1a:	015b      	lsls	r3, r3, #5
 8001d1c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2200      	movs	r2, #0
 8001d36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
 8001d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6979      	ldr	r1, [r7, #20]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 fdfc 	bl	8003958 <USB_EPStartXfer>
 8001d60:	e005      	b.n	8001d6e <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6979      	ldr	r1, [r7, #20]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fdf5 	bl	8003958 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	3312      	adds	r3, #18
 8001d8e:	015b      	lsls	r3, r3, #5
 8001d90:	4413      	add	r3, r2
 8001d92:	3304      	adds	r3, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	460b      	mov	r3, r1
 8001db0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001db6:	7afb      	ldrb	r3, [r7, #11]
 8001db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	3328      	adds	r3, #40	; 0x28
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6979      	ldr	r1, [r7, #20]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 fdac 	bl	8003958 <USB_EPStartXfer>
 8001e00:	e005      	b.n	8001e0e <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6979      	ldr	r1, [r7, #20]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 fda5 	bl	8003958 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8001e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da08      	bge.n	8001e42 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e36:	015b      	lsls	r3, r3, #5
 8001e38:	3328      	adds	r3, #40	; 0x28
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e006      	b.n	8001e50 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	015b      	lsls	r3, r3, #5
 8001e46:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	09db      	lsrs	r3, r3, #7
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_PCD_EP_SetStall+0x68>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e01c      	b.n	8001eba <HAL_PCD_EP_SetStall+0xa2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 ffe4 	bl	8003e5c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d108      	bne.n	8001eb0 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f002 f8f8 	bl	80040a0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8001ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da08      	bge.n	8001eec <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee0:	015b      	lsls	r3, r3, #5
 8001ee2:	3328      	adds	r3, #40	; 0x28
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e006      	b.n	8001efa <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	015b      	lsls	r3, r3, #5
 8001ef0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	09db      	lsrs	r3, r3, #7
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_PCD_EP_ClrStall+0x68>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e00e      	b.n	8001f48 <HAL_PCD_EP_ClrStall+0x86>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68f9      	ldr	r1, [r7, #12]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 ffef 	bl	8003f1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_PCD_EP_Flush>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_PCD_EP_Flush+0x1a>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e01b      	b.n	8001fa2 <HAL_PCD_EP_Flush+0x52>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da09      	bge.n	8001f8e <HAL_PCD_EP_Flush+0x3e>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f001 f886 	bl	8003098 <USB_FlushTxFifo>
 8001f8c:	e004      	b.n	8001f98 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 f88b 	bl	80030ae <USB_FlushRxFifo>
  }
  
  __HAL_UNLOCK(hpcd); 
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
  uint16_t count = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	83fb      	strh	r3, [r7, #30]
  uint8_t epindex = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	75fb      	strb	r3, [r7, #23]
  __IO uint16_t wIstr = 0;  
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001fc8:	e308      	b.n	80025dc <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fca:	89fb      	ldrh	r3, [r7, #14]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	75fb      	strb	r3, [r7, #23]
    
    if (epindex == 0)
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 812a 	bne.w	8002232 <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001fde:	89fb      	ldrh	r3, [r7, #14]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d14d      	bne.n	8002086 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3328      	adds	r3, #40	; 0x28
 8002006:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002010:	b29b      	uxth	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	3302      	adds	r3, #2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	441a      	add	r2, r3
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002044:	2100      	movs	r1, #0
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f004 fbae 	bl	80067a8 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 82c1 	beq.w	80025dc <PCD_EP_ISR_Handler+0x630>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 82bc 	bne.w	80025dc <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	b292      	uxth	r2, r2
 8002078:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002084:	e2aa      	b.n	80025dc <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800208c:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002098:	89bb      	ldrh	r3, [r7, #12]
 800209a:	b29b      	uxth	r3, r3
 800209c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d031      	beq.n	8002108 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	3306      	adds	r3, #6
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	889a      	ldrh	r2, [r3, #4]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f002 f82c 	bl	8004142 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b299      	uxth	r1, r3
 80020f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020fa:	400b      	ands	r3, r1
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f004 fb27 	bl	8006754 <HAL_PCD_SetupStageCallback>
 8002106:	e269      	b.n	80025dc <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002108:	89bb      	ldrh	r3, [r7, #12]
 800210a:	b29b      	uxth	r3, r3
 800210c:	b21b      	sxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	f280 8264 	bge.w	80025dc <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	b299      	uxth	r1, r3
 8002120:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002124:	400b      	ands	r3, r1
 8002126:	b29b      	uxth	r3, r3
 8002128:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	3306      	adds	r3, #6
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d011      	beq.n	8002184 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6959      	ldr	r1, [r3, #20]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	889a      	ldrh	r2, [r3, #4]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	b29b      	uxth	r3, r3
 8002172:	f001 ffe6 	bl	8004142 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	441a      	add	r2, r3
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002184:	2100      	movs	r1, #0
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f004 faf6 	bl	8006778 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002194:	b29b      	uxth	r3, r3
 8002196:	3306      	adds	r3, #6
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b3e      	cmp	r3, #62	; 0x3e
 80021ac:	d918      	bls.n	80021e0 <PCD_EP_ISR_Handler+0x234>
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	83bb      	strh	r3, [r7, #28]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <PCD_EP_ISR_Handler+0x21c>
 80021c2:	8bbb      	ldrh	r3, [r7, #28]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	83bb      	strh	r3, [r7, #28]
 80021c8:	8bbb      	ldrh	r3, [r7, #28]
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e012      	b.n	8002206 <PCD_EP_ISR_Handler+0x25a>
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	83bb      	strh	r3, [r7, #28]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <PCD_EP_ISR_Handler+0x24e>
 80021f4:	8bbb      	ldrh	r3, [r7, #28]
 80021f6:	3301      	adds	r3, #1
 80021f8:	83bb      	strh	r3, [r7, #28]
 80021fa:	8bbb      	ldrh	r3, [r7, #28]
 80021fc:	029b      	lsls	r3, r3, #10
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002216:	b29c      	uxth	r4, r3
 8002218:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800221c:	b29c      	uxth	r4, r3
 800221e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002222:	b29c      	uxth	r4, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b98      	ldr	r3, [pc, #608]	; (800248c <PCD_EP_ISR_Handler+0x4e0>)
 800222a:	4323      	orrs	r3, r4
 800222c:	b29b      	uxth	r3, r3
 800222e:	8013      	strh	r3, [r2, #0]
 8002230:	e1d4      	b.n	80025dc <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002244:	89bb      	ldrh	r3, [r7, #12]
 8002246:	b29b      	uxth	r3, r3
 8002248:	b21b      	sxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	f280 80d0 	bge.w	80023f0 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	441a      	add	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b299      	uxth	r1, r3
 800226c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002270:	400b      	ands	r3, r1
 8002272:	b29b      	uxth	r3, r3
 8002274:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	015b      	lsls	r3, r3, #5
 800227a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	7a9b      	ldrb	r3, [r3, #10]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d122      	bne.n	80022d2 <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	3306      	adds	r3, #6
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80022b8:	8bfb      	ldrh	r3, [r7, #30]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d073      	beq.n	80023a6 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6959      	ldr	r1, [r3, #20]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	889a      	ldrh	r2, [r3, #4]
 80022ca:	8bfb      	ldrh	r3, [r7, #30]
 80022cc:	f001 ff39 	bl	8004142 <USB_ReadPMA>
 80022d0:	e069      	b.n	80023a6 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d022      	beq.n	8002332 <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	3302      	adds	r3, #2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002316:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002318:	8bfb      	ldrh	r3, [r7, #30]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d02b      	beq.n	8002376 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6959      	ldr	r1, [r3, #20]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	88da      	ldrh	r2, [r3, #6]
 800232a:	8bfb      	ldrh	r3, [r7, #30]
 800232c:	f001 ff09 	bl	8004142 <USB_ReadPMA>
 8002330:	e021      	b.n	8002376 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233a:	b29b      	uxth	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	3306      	adds	r3, #6
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800235c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800235e:	8bfb      	ldrh	r3, [r7, #30]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6959      	ldr	r1, [r3, #20]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	891a      	ldrh	r2, [r3, #8]
 8002370:	8bfb      	ldrh	r3, [r7, #30]
 8002372:	f001 fee6 	bl	8004142 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	441a      	add	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b299      	uxth	r1, r3
 8002396:	f640 730f 	movw	r3, #3855	; 0xf0f
 800239a:	400b      	ands	r3, r1
 800239c:	b299      	uxth	r1, r3
 800239e:	4b3c      	ldr	r3, [pc, #240]	; (8002490 <PCD_EP_ISR_Handler+0x4e4>)
 80023a0:	430b      	orrs	r3, r1
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	8bfb      	ldrh	r3, [r7, #30]
 80023ac:	441a      	add	r2, r3
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	8bfb      	ldrh	r3, [r7, #30]
 80023b8:	441a      	add	r2, r3
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <PCD_EP_ISR_Handler+0x424>
 80023c6:	8bfa      	ldrh	r2, [r7, #30]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d206      	bcs.n	80023de <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f004 f9ce 	bl	8006778 <HAL_PCD_DataOutStageCallback>
 80023dc:	e008      	b.n	80023f0 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	7819      	ldrb	r1, [r3, #0]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fc88 	bl	8001d00 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023f0:	89bb      	ldrh	r3, [r7, #12]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80ef 	beq.w	80025dc <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	015b      	lsls	r3, r3, #5
 8002402:	3328      	adds	r3, #40	; 0x28
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	b29b      	uxth	r3, r3
 8002430:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	7a9b      	ldrb	r3, [r3, #10]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d12c      	bne.n	8002494 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	3302      	adds	r3, #2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8083 	beq.w	8002578 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	6959      	ldr	r1, [r3, #20]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	889a      	ldrh	r2, [r3, #4]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f001 fe17 	bl	80040b6 <USB_WritePMA>
 8002488:	e076      	b.n	8002578 <PCD_EP_ISR_Handler+0x5cc>
 800248a:	bf00      	nop
 800248c:	ffff8080 	.word	0xffff8080
 8002490:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d026      	beq.n	80024fc <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	3302      	adds	r3, #2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d031      	beq.n	8002548 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6959      	ldr	r1, [r3, #20]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	88da      	ldrh	r2, [r3, #6]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f001 fdde 	bl	80040b6 <USB_WritePMA>
 80024fa:	e025      	b.n	8002548 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	3306      	adds	r3, #6
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	4413      	add	r3, r2
 800251a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6959      	ldr	r1, [r3, #20]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	891a      	ldrh	r2, [r3, #8]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f001 fdb7 	bl	80040b6 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	441a      	add	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b299      	uxth	r1, r3
 8002568:	f640 730f 	movw	r3, #3855	; 0xf0f
 800256c:	400b      	ands	r3, r1
 800256e:	b299      	uxth	r1, r3
 8002570:	4b22      	ldr	r3, [pc, #136]	; (80025fc <PCD_EP_ISR_Handler+0x650>)
 8002572:	430b      	orrs	r3, r1
 8002574:	b29b      	uxth	r3, r3
 8002576:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002580:	b29b      	uxth	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	3302      	adds	r3, #2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	4413      	add	r3, r2
 8002596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	441a      	add	r2, r3
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f004 f8f0 	bl	80067a8 <HAL_PCD_DataInStageCallback>
 80025c8:	e008      	b.n	80025dc <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	7819      	ldrb	r1, [r3, #0]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fbe3 	bl	8001da2 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	81fa      	strh	r2, [r7, #14]
 80025ea:	b21b      	sxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f6ff acec 	blt.w	8001fca <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3724      	adds	r7, #36	; 0x24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	ffffc080 	.word	0xffffc080

08002600 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	4613      	mov	r3, r2
 8002610:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8002616:	897b      	ldrh	r3, [r7, #10]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002620:	897b      	ldrh	r3, [r7, #10]
 8002622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002626:	015b      	lsls	r3, r3, #5
 8002628:	3328      	adds	r3, #40	; 0x28
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4413      	add	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e006      	b.n	8002640 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	015b      	lsls	r3, r3, #5
 8002636:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4413      	add	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002640:	893b      	ldrh	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2200      	movs	r2, #0
 800264a:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	b29a      	uxth	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	809a      	strh	r2, [r3, #4]
 8002654:	e00b      	b.n	800266e <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2201      	movs	r2, #1
 800265a:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	b29a      	uxth	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	0c1b      	lsrs	r3, r3, #16
 8002668:	b29a      	uxth	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8087 	beq.w	80027a4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002696:	4b92      	ldr	r3, [pc, #584]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d00c      	beq.n	80026bc <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026a2:	4b8f      	ldr	r3, [pc, #572]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d112      	bne.n	80026d4 <HAL_RCC_OscConfig+0x58>
 80026ae:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ba:	d10b      	bne.n	80026d4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d06c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x126>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d168      	bne.n	80027a2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e22d      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026dc:	d106      	bne.n	80026ec <HAL_RCC_OscConfig+0x70>
 80026de:	4a80      	ldr	r2, [pc, #512]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80026e0:	4b7f      	ldr	r3, [pc, #508]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e02e      	b.n	800274a <HAL_RCC_OscConfig+0xce>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10c      	bne.n	800270e <HAL_RCC_OscConfig+0x92>
 80026f4:	4a7a      	ldr	r2, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80026f6:	4b7a      	ldr	r3, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4a77      	ldr	r2, [pc, #476]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002702:	4b77      	ldr	r3, [pc, #476]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e01d      	b.n	800274a <HAL_RCC_OscConfig+0xce>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002716:	d10c      	bne.n	8002732 <HAL_RCC_OscConfig+0xb6>
 8002718:	4a71      	ldr	r2, [pc, #452]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 800271a:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002726:	4b6e      	ldr	r3, [pc, #440]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e00b      	b.n	800274a <HAL_RCC_OscConfig+0xce>
 8002732:	4a6b      	ldr	r2, [pc, #428]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4a68      	ldr	r2, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002740:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002748:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d013      	beq.n	800277a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fe fd53 	bl	80011fc <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275a:	f7fe fd4f 	bl	80011fc <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1e1      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276c:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0xde>
 8002778:	e014      	b.n	80027a4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fd3f 	bl	80011fc <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002782:	f7fe fd3b 	bl	80011fc <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b64      	cmp	r3, #100	; 0x64
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1cd      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002794:	4b52      	ldr	r3, [pc, #328]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x106>
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d063      	beq.n	8002878 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027b0:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027bc:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d11c      	bne.n	8002802 <HAL_RCC_OscConfig+0x186>
 80027c8:	4b45      	ldr	r3, [pc, #276]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d116      	bne.n	8002802 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d4:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x170>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e1a1      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	493c      	ldr	r1, [pc, #240]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80027ee:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002800:	e03a      	b.n	8002878 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d020      	beq.n	800284c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <HAL_RCC_OscConfig+0x268>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe fcf4 	bl	80011fc <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002818:	f7fe fcf0 	bl	80011fc <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e182      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	492a      	ldr	r1, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 8002838:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
 800284a:	e015      	b.n	8002878 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284c:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <HAL_RCC_OscConfig+0x268>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe fcd3 	bl	80011fc <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fccf 	bl	80011fc <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e161      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d039      	beq.n	80028f8 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d019      	beq.n	80028c0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fcb3 	bl	80011fc <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289a:	f7fe fcaf 	bl	80011fc <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e141      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_RCC_OscConfig+0x264>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f000 faa3 	bl	8002e04 <RCC_Delay>
 80028be:	e01b      	b.n	80028f8 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7fe fc99 	bl	80011fc <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	e00e      	b.n	80028ec <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ce:	f7fe fc95 	bl	80011fc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d907      	bls.n	80028ec <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e127      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
 80028e0:	40021000 	.word	0x40021000
 80028e4:	42420000 	.word	0x42420000
 80028e8:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	4b92      	ldr	r3, [pc, #584]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ea      	bne.n	80028ce <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a6 	beq.w	8002a52 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290a:	4b8b      	ldr	r3, [pc, #556]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	4a88      	ldr	r2, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002918:	4b87      	ldr	r3, [pc, #540]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	61d3      	str	r3, [r2, #28]
 8002922:	4b85      	ldr	r3, [pc, #532]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	4b82      	ldr	r3, [pc, #520]	; (8002b3c <HAL_RCC_OscConfig+0x4c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d118      	bne.n	8002970 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293e:	4a7f      	ldr	r2, [pc, #508]	; (8002b3c <HAL_RCC_OscConfig+0x4c0>)
 8002940:	4b7e      	ldr	r3, [pc, #504]	; (8002b3c <HAL_RCC_OscConfig+0x4c0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002948:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294a:	f7fe fc57 	bl	80011fc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002952:	f7fe fc53 	bl	80011fc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	; 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0e5      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	4b75      	ldr	r3, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x4c0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x30a>
 8002978:	4a6f      	ldr	r2, [pc, #444]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 800297a:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6213      	str	r3, [r2, #32]
 8002984:	e02d      	b.n	80029e2 <HAL_RCC_OscConfig+0x366>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x32c>
 800298e:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002990:	4b69      	ldr	r3, [pc, #420]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6213      	str	r3, [r2, #32]
 800299a:	4a67      	ldr	r2, [pc, #412]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 800299c:	4b66      	ldr	r3, [pc, #408]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	6213      	str	r3, [r2, #32]
 80029a6:	e01c      	b.n	80029e2 <HAL_RCC_OscConfig+0x366>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d10c      	bne.n	80029ca <HAL_RCC_OscConfig+0x34e>
 80029b0:	4a61      	ldr	r2, [pc, #388]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 80029b2:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6213      	str	r3, [r2, #32]
 80029bc:	4a5e      	ldr	r2, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6213      	str	r3, [r2, #32]
 80029c8:	e00b      	b.n	80029e2 <HAL_RCC_OscConfig+0x366>
 80029ca:	4a5b      	ldr	r2, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 80029cc:	4b5a      	ldr	r3, [pc, #360]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6213      	str	r3, [r2, #32]
 80029d6:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 80029d8:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d015      	beq.n	8002a16 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fe fc07 	bl	80011fc <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe fc03 	bl	80011fc <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e093      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ee      	beq.n	80029f2 <HAL_RCC_OscConfig+0x376>
 8002a14:	e014      	b.n	8002a40 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fbf1 	bl	80011fc <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fe fbed 	bl	80011fc <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e07d      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a34:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ee      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002a48:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d069      	beq.n	8002b2e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d061      	beq.n	8002b2a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d146      	bne.n	8002afc <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6e:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fe fbc2 	bl	80011fc <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fbbe 	bl	80011fc <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e050      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa2:	d108      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aa4:	4924      	ldr	r1, [pc, #144]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab6:	4820      	ldr	r0, [pc, #128]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a19      	ldr	r1, [r3, #32]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	4313      	orrs	r3, r2
 8002acc:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ace:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fb92 	bl	80011fc <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fb8e 	bl	80011fc <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e020      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x460>
 8002afa:	e018      	b.n	8002b2e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afc:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fb7b 	bl	80011fc <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe fb77 	bl	80011fc <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e009      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x4bc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x48e>
 8002b28:	e001      	b.n	8002b2e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42420060 	.word	0x42420060

08002b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002b52:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <HAL_RCC_ClockConfig+0x1d8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0207 	and.w	r2, r3, #7
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d210      	bcs.n	8002b82 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b60:	496e      	ldr	r1, [pc, #440]	; (8002d1c <HAL_RCC_ClockConfig+0x1d8>)
 8002b62:	4b6e      	ldr	r3, [pc, #440]	; (8002d1c <HAL_RCC_ClockConfig+0x1d8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 0207 	bic.w	r2, r3, #7
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_ClockConfig+0x1d8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0207 	and.w	r2, r3, #7
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0c8      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8e:	4964      	ldr	r1, [pc, #400]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002b90:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d06a      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb4:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d115      	bne.n	8002bec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0a7      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	4b54      	ldr	r3, [pc, #336]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e09b      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e093      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bec:	494c      	ldr	r1, [pc, #304]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002bee:	4b4c      	ldr	r3, [pc, #304]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfe:	f7fe fafd 	bl	80011fc <HAL_GetTick>
 8002c02:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d112      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0e:	f7fe faf5 	bl	80011fc <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e077      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c24:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d1ee      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xca>
 8002c30:	e027      	b.n	8002c82 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d11d      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f7fe fade 	bl	80011fc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e060      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c52:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xf8>
 8002c5e:	e010      	b.n	8002c82 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c60:	f7fe facc 	bl	80011fc <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e04e      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c76:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ee      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_RCC_ClockConfig+0x1d8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0207 	and.w	r2, r3, #7
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d910      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c90:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1d8>)
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1d8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <HAL_RCC_ClockConfig+0x1d8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0207 	and.w	r2, r3, #7
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e030      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbe:	4918      	ldr	r1, [pc, #96]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d009      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cdc:	4910      	ldr	r1, [pc, #64]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cf0:	f000 f81c 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002cf4:	4601      	mov	r1, r0
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x1dc>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_RCC_ClockConfig+0x1e0>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	fa21 f303 	lsr.w	r3, r1, r3
 8002d08:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <HAL_RCC_ClockConfig+0x1e4>)
 8002d0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fe fa33 	bl	8001178 <HAL_InitTick>
  
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08007a2c 	.word	0x08007a2c
 8002d28:	200000b0 	.word	0x200000b0

08002d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	b490      	push	{r4, r7}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d34:	1d3c      	adds	r4, r7, #4
 8002d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d002      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x40>
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d003      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x46>
 8002d6a:	e02d      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d6e:	623b      	str	r3, [r7, #32]
      break;
 8002d70:	e02d      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	0c9b      	lsrs	r3, r3, #18
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d7e:	4413      	add	r3, r2
 8002d80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0c5b      	lsrs	r3, r3, #17
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d9e:	4413      	add	r3, r2
 8002da0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002da4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002daa:	fb02 f203 	mul.w	r2, r2, r3
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
 8002db6:	e004      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	623b      	str	r3, [r7, #32]
      break;
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dca:	623b      	str	r3, [r7, #32]
      break;
 8002dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dce:	6a3b      	ldr	r3, [r7, #32]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc90      	pop	{r4, r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	08007948 	.word	0x08007948
 8002de0:	08007958 	.word	0x08007958
 8002de4:	40021000 	.word	0x40021000
 8002de8:	007a1200 	.word	0x007a1200
 8002dec:	003d0900 	.word	0x003d0900

08002df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	200000b0 	.word	0x200000b0

08002e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <RCC_Delay+0x34>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <RCC_Delay+0x38>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002e20:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	60fa      	str	r2, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f9      	bne.n	8002e20 <RCC_Delay+0x1c>
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	200000b0 	.word	0x200000b0
 8002e3c:	10624dd3 	.word	0x10624dd3

08002e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d07d      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e60:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10d      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	4a4c      	ldr	r2, [pc, #304]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e76:	61d3      	str	r3, [r2, #28]
 8002e78:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d118      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e94:	4a43      	ldr	r2, [pc, #268]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe f9ac 	bl	80011fc <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	e008      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fe f9a8 	bl	80011fc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e06d      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ece:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02e      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d027      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eee:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002efa:	4a29      	ldr	r2, [pc, #164]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d014      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f977 	bl	80011fc <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe f973 	bl	80011fc <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e036      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ee      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f34:	491a      	ldr	r1, [pc, #104]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f64:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f82:	4907      	ldr	r1, [pc, #28]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42420440 	.word	0x42420440

08002fac <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002fac:	b084      	sub	sp, #16
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	f107 0014 	add.w	r0, r7, #20
 8002fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	b004      	add	sp, #16
 8002fca:	4770      	bx	lr

08002fcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002fd8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002fdc:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4313      	orrs	r3, r2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800300c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8003010:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	b29b      	uxth	r3, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	b29b      	uxth	r3, r3
 8003022:	4013      	ands	r3, r2
 8003024:	b29a      	uxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003050:	b084      	sub	sp, #16
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	f107 0014 	add.w	r0, r7, #20
 800305e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ffa2 	bl	8002fcc <USB_EnableGlobalInt>
    
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003094:	b004      	add	sp, #16
 8003096:	4770      	bx	lr

08003098 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_TypeDef *USBx, uint32_t num)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  UNUSED(num);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
	...

080030c4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80030c4:	b490      	push	{r4, r7}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	78db      	ldrb	r3, [r3, #3]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d85f      	bhi.n	8003196 <USB_ActivateEndpoint+0xd2>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <USB_ActivateEndpoint+0x18>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	0800316b 	.word	0x0800316b
 80030e4:	08003119 	.word	0x08003119
 80030e8:	0800313f 	.word	0x0800313f
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310c:	b29b      	uxth	r3, r3
 800310e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003112:	b29b      	uxth	r3, r3
 8003114:	8013      	strh	r3, [r2, #0]
    break;
 8003116:	e03f      	b.n	8003198 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	441a      	add	r2, r3
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b29b      	uxth	r3, r3
 8003130:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003138:	b29b      	uxth	r3, r3
 800313a:	8013      	strh	r3, [r2, #0]
    break;
 800313c:	e02c      	b.n	8003198 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	441a      	add	r2, r3
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	b29b      	uxth	r3, r3
 8003160:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003164:	b29b      	uxth	r3, r3
 8003166:	8013      	strh	r3, [r2, #0]
    break;
 8003168:	e016      	b.n	8003198 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	b29b      	uxth	r3, r3
 800318c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003190:	b29b      	uxth	r3, r3
 8003192:	8013      	strh	r3, [r2, #0]
    break;
 8003194:	e000      	b.n	8003198 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 8003196:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b299      	uxth	r1, r3
 80031b0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80031b4:	400b      	ands	r3, r1
 80031b6:	b299      	uxth	r1, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	430b      	orrs	r3, r1
 80031c0:	b299      	uxth	r1, r3
 80031c2:	4b75      	ldr	r3, [pc, #468]	; (8003398 <USB_ActivateEndpoint+0x2d4>)
 80031c4:	430b      	orrs	r3, r1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	7a9b      	ldrb	r3, [r3, #10]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 80e8 	bne.w	80033a4 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	785b      	ldrb	r3, [r3, #1]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d04c      	beq.n	8003276 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	005a      	lsls	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031f8:	461a      	mov	r2, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	889b      	ldrh	r3, [r3, #4]
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	b29b      	uxth	r3, r3
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <USB_ActivateEndpoint+0x180>
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	441a      	add	r2, r3
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b299      	uxth	r1, r3
 8003234:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003238:	400b      	ands	r3, r1
 800323a:	b299      	uxth	r1, r3
 800323c:	4b57      	ldr	r3, [pc, #348]	; (800339c <USB_ActivateEndpoint+0x2d8>)
 800323e:	430b      	orrs	r3, r1
 8003240:	b29b      	uxth	r3, r3
 8003242:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800325a:	b29c      	uxth	r4, r3
 800325c:	f084 0320 	eor.w	r3, r4, #32
 8003260:	b29c      	uxth	r4, r3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	441a      	add	r2, r3
 800326c:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <USB_ActivateEndpoint+0x2d4>)
 800326e:	4323      	orrs	r3, r4
 8003270:	b29b      	uxth	r3, r3
 8003272:	8013      	strh	r3, [r2, #0]
 8003274:	e1d9      	b.n	800362a <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800327c:	b29b      	uxth	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	3304      	adds	r3, #4
 800328a:	005a      	lsls	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003294:	461a      	mov	r2, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	889b      	ldrh	r3, [r3, #4]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	b29b      	uxth	r3, r3
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	3306      	adds	r3, #6
 80032b6:	005a      	lsls	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b3e      	cmp	r3, #62	; 0x3e
 80032c8:	d918      	bls.n	80032fc <USB_ActivateEndpoint+0x238>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	81fb      	strh	r3, [r7, #14]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <USB_ActivateEndpoint+0x220>
 80032de:	89fb      	ldrh	r3, [r7, #14]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	81fb      	strh	r3, [r7, #14]
 80032e4:	89fb      	ldrh	r3, [r7, #14]
 80032e6:	029b      	lsls	r3, r3, #10
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e012      	b.n	8003322 <USB_ActivateEndpoint+0x25e>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	81fb      	strh	r3, [r7, #14]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <USB_ActivateEndpoint+0x252>
 8003310:	89fb      	ldrh	r3, [r7, #14]
 8003312:	3301      	adds	r3, #1
 8003314:	81fb      	strh	r3, [r7, #14]
 8003316:	89fb      	ldrh	r3, [r7, #14]
 8003318:	029b      	lsls	r3, r3, #10
 800331a:	b29b      	uxth	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <USB_ActivateEndpoint+0x29c>
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b299      	uxth	r1, r3
 8003350:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003354:	400b      	ands	r3, r1
 8003356:	b299      	uxth	r1, r3
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <USB_ActivateEndpoint+0x2dc>)
 800335a:	430b      	orrs	r3, r1
 800335c:	b29b      	uxth	r3, r3
 800335e:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	b29c      	uxth	r4, r3
 8003378:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800337c:	b29c      	uxth	r4, r3
 800337e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003382:	b29c      	uxth	r4, r3
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	4b02      	ldr	r3, [pc, #8]	; (8003398 <USB_ActivateEndpoint+0x2d4>)
 8003390:	4323      	orrs	r3, r4
 8003392:	b29b      	uxth	r3, r3
 8003394:	8013      	strh	r3, [r2, #0]
 8003396:	e148      	b.n	800362a <USB_ActivateEndpoint+0x566>
 8003398:	ffff8080 	.word	0xffff8080
 800339c:	ffff80c0 	.word	0xffff80c0
 80033a0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	441a      	add	r2, r3
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b299      	uxth	r1, r3
 80033bc:	f640 630f 	movw	r3, #3599	; 0xe0f
 80033c0:	400b      	ands	r3, r1
 80033c2:	b299      	uxth	r1, r3
 80033c4:	4b9c      	ldr	r3, [pc, #624]	; (8003638 <USB_ActivateEndpoint+0x574>)
 80033c6:	430b      	orrs	r3, r1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	005a      	lsls	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033e8:	461a      	mov	r2, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	88db      	ldrh	r3, [r3, #6]
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	005a      	lsls	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003414:	461a      	mov	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	891b      	ldrh	r3, [r3, #8]
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	b29b      	uxth	r3, r3
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 8083 	bne.w	8003532 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d013      	beq.n	800346a <USB_ActivateEndpoint+0x3a6>
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b299      	uxth	r1, r3
 800345a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800345e:	400b      	ands	r3, r1
 8003460:	b299      	uxth	r1, r3
 8003462:	4b76      	ldr	r3, [pc, #472]	; (800363c <USB_ActivateEndpoint+0x578>)
 8003464:	430b      	orrs	r3, r1
 8003466:	b29b      	uxth	r3, r3
 8003468:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d013      	beq.n	80034a8 <USB_ActivateEndpoint+0x3e4>
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b299      	uxth	r1, r3
 8003498:	f640 730f 	movw	r3, #3855	; 0xf0f
 800349c:	400b      	ands	r3, r1
 800349e:	b299      	uxth	r1, r3
 80034a0:	4b67      	ldr	r3, [pc, #412]	; (8003640 <USB_ActivateEndpoint+0x57c>)
 80034a2:	430b      	orrs	r3, r1
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	441a      	add	r2, r3
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b299      	uxth	r1, r3
 80034c0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80034c4:	400b      	ands	r3, r1
 80034c6:	b299      	uxth	r1, r3
 80034c8:	4b5d      	ldr	r3, [pc, #372]	; (8003640 <USB_ActivateEndpoint+0x57c>)
 80034ca:	430b      	orrs	r3, r1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	b29c      	uxth	r4, r3
 80034e8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80034ec:	b29c      	uxth	r4, r3
 80034ee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80034f2:	b29c      	uxth	r4, r3
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	441a      	add	r2, r3
 80034fe:	4b51      	ldr	r3, [pc, #324]	; (8003644 <USB_ActivateEndpoint+0x580>)
 8003500:	4323      	orrs	r3, r4
 8003502:	b29b      	uxth	r3, r3
 8003504:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351c:	b29c      	uxth	r4, r3
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	441a      	add	r2, r3
 8003528:	4b46      	ldr	r3, [pc, #280]	; (8003644 <USB_ActivateEndpoint+0x580>)
 800352a:	4323      	orrs	r3, r4
 800352c:	b29b      	uxth	r3, r3
 800352e:	8013      	strh	r3, [r2, #0]
 8003530:	e07b      	b.n	800362a <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <USB_ActivateEndpoint+0x4ac>
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b299      	uxth	r1, r3
 8003560:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003564:	400b      	ands	r3, r1
 8003566:	b299      	uxth	r1, r3
 8003568:	4b34      	ldr	r3, [pc, #208]	; (800363c <USB_ActivateEndpoint+0x578>)
 800356a:	430b      	orrs	r3, r1
 800356c:	b29b      	uxth	r3, r3
 800356e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d013      	beq.n	80035ae <USB_ActivateEndpoint+0x4ea>
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	441a      	add	r2, r3
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b299      	uxth	r1, r3
 800359e:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035a2:	400b      	ands	r3, r1
 80035a4:	b299      	uxth	r1, r3
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <USB_ActivateEndpoint+0x57c>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	441a      	add	r2, r3
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b299      	uxth	r1, r3
 80035c6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035ca:	400b      	ands	r3, r1
 80035cc:	b299      	uxth	r1, r3
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <USB_ActivateEndpoint+0x578>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ec:	b29c      	uxth	r4, r3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	441a      	add	r2, r3
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <USB_ActivateEndpoint+0x580>)
 80035fa:	4323      	orrs	r3, r4
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	b29c      	uxth	r4, r3
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <USB_ActivateEndpoint+0x580>)
 8003624:	4323      	orrs	r3, r4
 8003626:	b29b      	uxth	r3, r3
 8003628:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bc90      	pop	{r4, r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	ffff8180 	.word	0xffff8180
 800363c:	ffffc080 	.word	0xffffc080
 8003640:	ffff80c0 	.word	0xffff80c0
 8003644:	ffff8080 	.word	0xffff8080

08003648 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003648:	b490      	push	{r4, r7}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	7a9b      	ldrb	r3, [r3, #10]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d16d      	bne.n	8003736 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d034      	beq.n	80036cc <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d013      	beq.n	80036a0 <USB_DeactivateEndpoint+0x58>
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	b299      	uxth	r1, r3
 8003690:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003694:	400b      	ands	r3, r1
 8003696:	b299      	uxth	r1, r3
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <USB_DeactivateEndpoint+0x1f4>)
 800369a:	430b      	orrs	r3, r1
 800369c:	b29b      	uxth	r3, r3
 800369e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b6:	b29c      	uxth	r4, r3
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	4b5f      	ldr	r3, [pc, #380]	; (8003840 <USB_DeactivateEndpoint+0x1f8>)
 80036c4:	4323      	orrs	r3, r4
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8013      	strh	r3, [r2, #0]
 80036ca:	e139      	b.n	8003940 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d013      	beq.n	800370a <USB_DeactivateEndpoint+0xc2>
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	441a      	add	r2, r3
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	b299      	uxth	r1, r3
 80036fa:	f640 730f 	movw	r3, #3855	; 0xf0f
 80036fe:	400b      	ands	r3, r1
 8003700:	b299      	uxth	r1, r3
 8003702:	4b50      	ldr	r3, [pc, #320]	; (8003844 <USB_DeactivateEndpoint+0x1fc>)
 8003704:	430b      	orrs	r3, r1
 8003706:	b29b      	uxth	r3, r3
 8003708:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	b29c      	uxth	r4, r3
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	441a      	add	r2, r3
 800372c:	4b44      	ldr	r3, [pc, #272]	; (8003840 <USB_DeactivateEndpoint+0x1f8>)
 800372e:	4323      	orrs	r3, r4
 8003730:	b29b      	uxth	r3, r3
 8003732:	8013      	strh	r3, [r2, #0]
 8003734:	e104      	b.n	8003940 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 8084 	bne.w	8003848 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d013      	beq.n	800377e <USB_DeactivateEndpoint+0x136>
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	441a      	add	r2, r3
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b299      	uxth	r1, r3
 800376e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003772:	400b      	ands	r3, r1
 8003774:	b299      	uxth	r1, r3
 8003776:	4b33      	ldr	r3, [pc, #204]	; (8003844 <USB_DeactivateEndpoint+0x1fc>)
 8003778:	430b      	orrs	r3, r1
 800377a:	b29b      	uxth	r3, r3
 800377c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <USB_DeactivateEndpoint+0x174>
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b299      	uxth	r1, r3
 80037ac:	f640 730f 	movw	r3, #3855	; 0xf0f
 80037b0:	400b      	ands	r3, r1
 80037b2:	b299      	uxth	r1, r3
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <USB_DeactivateEndpoint+0x1f4>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b299      	uxth	r1, r3
 80037d4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80037d8:	400b      	ands	r3, r1
 80037da:	b299      	uxth	r1, r3
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <USB_DeactivateEndpoint+0x1f4>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	b29c      	uxth	r4, r3
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	441a      	add	r2, r3
 8003806:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <USB_DeactivateEndpoint+0x1f8>)
 8003808:	4323      	orrs	r3, r4
 800380a:	b29b      	uxth	r3, r3
 800380c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003824:	b29c      	uxth	r4, r3
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	441a      	add	r2, r3
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <USB_DeactivateEndpoint+0x1f8>)
 8003832:	4323      	orrs	r3, r4
 8003834:	b29b      	uxth	r3, r3
 8003836:	8013      	strh	r3, [r2, #0]
 8003838:	e082      	b.n	8003940 <USB_DeactivateEndpoint+0x2f8>
 800383a:	bf00      	nop
 800383c:	ffff80c0 	.word	0xffff80c0
 8003840:	ffff8080 	.word	0xffff8080
 8003844:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d013      	beq.n	8003886 <USB_DeactivateEndpoint+0x23e>
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	441a      	add	r2, r3
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b299      	uxth	r1, r3
 8003876:	f640 730f 	movw	r3, #3855	; 0xf0f
 800387a:	400b      	ands	r3, r1
 800387c:	b299      	uxth	r1, r3
 800387e:	4b33      	ldr	r3, [pc, #204]	; (800394c <USB_DeactivateEndpoint+0x304>)
 8003880:	430b      	orrs	r3, r1
 8003882:	b29b      	uxth	r3, r3
 8003884:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d013      	beq.n	80038c4 <USB_DeactivateEndpoint+0x27c>
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	b299      	uxth	r1, r3
 80038b4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038b8:	400b      	ands	r3, r1
 80038ba:	b299      	uxth	r1, r3
 80038bc:	4b24      	ldr	r3, [pc, #144]	; (8003950 <USB_DeactivateEndpoint+0x308>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b299      	uxth	r1, r3
 80038dc:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038e0:	400b      	ands	r3, r1
 80038e2:	b299      	uxth	r1, r3
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <USB_DeactivateEndpoint+0x304>)
 80038e6:	430b      	orrs	r3, r1
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003902:	b29c      	uxth	r4, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	441a      	add	r2, r3
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <USB_DeactivateEndpoint+0x30c>)
 8003910:	4323      	orrs	r3, r4
 8003912:	b29b      	uxth	r3, r3
 8003914:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392c:	b29c      	uxth	r4, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	441a      	add	r2, r3
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <USB_DeactivateEndpoint+0x30c>)
 800393a:	4323      	orrs	r3, r4
 800393c:	b29b      	uxth	r3, r3
 800393e:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bc90      	pop	{r4, r7}
 800394a:	4770      	bx	lr
 800394c:	ffffc080 	.word	0xffffc080
 8003950:	ffff80c0 	.word	0xffff80c0
 8003954:	ffff8080 	.word	0xffff8080

08003958 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b08d      	sub	sp, #52	; 0x34
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 8149 	bne.w	8003c08 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d909      	bls.n	8003996 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	1ad2      	subs	r2, r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	619a      	str	r2, [r3, #24]
 8003994:	e005      	b.n	80039a2 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	7a9b      	ldrb	r3, [r3, #10]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11b      	bne.n	80039e2 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6959      	ldr	r1, [r3, #20]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	889a      	ldrh	r2, [r3, #4]
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fb7d 	bl	80040b6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	3302      	adds	r3, #2
 80039d0:	005a      	lsls	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039da:	461a      	mov	r2, r3
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e0f6      	b.n	8003bd0 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d059      	beq.n	8003aac <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d13b      	bne.n	8003a78 <USB_EPStartXfer+0x120>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	3306      	adds	r3, #6
 8003a14:	005a      	lsls	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	2b3e      	cmp	r3, #62	; 0x3e
 8003a24:	d916      	bls.n	8003a54 <USB_EPStartXfer+0xfc>
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <USB_EPStartXfer+0xe4>
 8003a36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a3e:	029b      	lsls	r3, r3, #10
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e027      	b.n	8003aa4 <USB_EPStartXfer+0x14c>
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <USB_EPStartXfer+0x112>
 8003a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a66:	3301      	adds	r3, #1
 8003a68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e015      	b.n	8003aa4 <USB_EPStartXfer+0x14c>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	785b      	ldrb	r3, [r3, #1]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d111      	bne.n	8003aa4 <USB_EPStartXfer+0x14c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	3302      	adds	r3, #2
 8003a94:	005a      	lsls	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	891b      	ldrh	r3, [r3, #8]
 8003aa8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003aaa:	e058      	b.n	8003b5e <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d13b      	bne.n	8003b2c <USB_EPStartXfer+0x1d4>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	005a      	lsls	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ad8:	d916      	bls.n	8003b08 <USB_EPStartXfer+0x1b0>
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <USB_EPStartXfer+0x198>
 8003aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003aec:	3b01      	subs	r3, #1
 8003aee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e027      	b.n	8003b58 <USB_EPStartXfer+0x200>
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <USB_EPStartXfer+0x1c6>
 8003b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b20:	029b      	lsls	r3, r3, #10
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e015      	b.n	8003b58 <USB_EPStartXfer+0x200>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d111      	bne.n	8003b58 <USB_EPStartXfer+0x200>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	3302      	adds	r3, #2
 8003b48:	005a      	lsls	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b52:	461a      	mov	r2, r3
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	88db      	ldrh	r3, [r3, #6]
 8003b5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6959      	ldr	r1, [r3, #20]
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 faa4 	bl	80040b6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d114      	bne.n	8003ba0 <USB_EPStartXfer+0x248>
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	441a      	add	r2, r3
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b299      	uxth	r1, r3
 8003b8e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003b92:	400b      	ands	r3, r1
 8003b94:	b299      	uxth	r1, r3
 8003b96:	4b92      	ldr	r3, [pc, #584]	; (8003de0 <USB_EPStartXfer+0x488>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8013      	strh	r3, [r2, #0]
 8003b9e:	e017      	b.n	8003bd0 <USB_EPStartXfer+0x278>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d113      	bne.n	8003bd0 <USB_EPStartXfer+0x278>
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	441a      	add	r2, r3
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b299      	uxth	r1, r3
 8003bc0:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	4b86      	ldr	r3, [pc, #536]	; (8003de4 <USB_EPStartXfer+0x48c>)
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be6:	b29c      	uxth	r4, r3
 8003be8:	f084 0310 	eor.w	r3, r4, #16
 8003bec:	b29c      	uxth	r4, r3
 8003bee:	f084 0320 	eor.w	r3, r4, #32
 8003bf2:	b29c      	uxth	r4, r3
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	4b7a      	ldr	r3, [pc, #488]	; (8003de8 <USB_EPStartXfer+0x490>)
 8003c00:	4323      	orrs	r3, r4
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	8013      	strh	r3, [r2, #0]
 8003c06:	e122      	b.n	8003e4e <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	699a      	ldr	r2, [r3, #24]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d909      	bls.n	8003c28 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	619a      	str	r2, [r3, #24]
 8003c26:	e005      	b.n	8003c34 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	7a9b      	ldrb	r3, [r3, #10]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d13b      	bne.n	8003cb4 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3306      	adds	r3, #6
 8003c50:	005a      	lsls	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c60:	d916      	bls.n	8003c90 <USB_EPStartXfer+0x338>
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <USB_EPStartXfer+0x320>
 8003c72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c74:	3b01      	subs	r3, #1
 8003c76:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c7a:	029b      	lsls	r3, r3, #10
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e0c3      	b.n	8003e18 <USB_EPStartXfer+0x4c0>
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	085b      	lsrs	r3, r3, #1
 8003c94:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <USB_EPStartXfer+0x34e>
 8003ca0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ca8:	029b      	lsls	r3, r3, #10
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e0b1      	b.n	8003e18 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d13b      	bne.n	8003d34 <USB_EPStartXfer+0x3dc>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	3302      	adds	r3, #2
 8003cd0:	005a      	lsls	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	2b3e      	cmp	r3, #62	; 0x3e
 8003ce0:	d916      	bls.n	8003d10 <USB_EPStartXfer+0x3b8>
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	843b      	strh	r3, [r7, #32]
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <USB_EPStartXfer+0x3a0>
 8003cf2:	8c3b      	ldrh	r3, [r7, #32]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	843b      	strh	r3, [r7, #32]
 8003cf8:	8c3b      	ldrh	r3, [r7, #32]
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	e027      	b.n	8003d60 <USB_EPStartXfer+0x408>
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	843b      	strh	r3, [r7, #32]
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <USB_EPStartXfer+0x3ce>
 8003d20:	8c3b      	ldrh	r3, [r7, #32]
 8003d22:	3301      	adds	r3, #1
 8003d24:	843b      	strh	r3, [r7, #32]
 8003d26:	8c3b      	ldrh	r3, [r7, #32]
 8003d28:	029b      	lsls	r3, r3, #10
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e015      	b.n	8003d60 <USB_EPStartXfer+0x408>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d111      	bne.n	8003d60 <USB_EPStartXfer+0x408>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	005a      	lsls	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d141      	bne.n	8003dec <USB_EPStartXfer+0x494>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	3306      	adds	r3, #6
 8003d7c:	005a      	lsls	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8003d8c:	d916      	bls.n	8003dbc <USB_EPStartXfer+0x464>
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	83fb      	strh	r3, [r7, #30]
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <USB_EPStartXfer+0x44c>
 8003d9e:	8bfb      	ldrh	r3, [r7, #30]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	83fb      	strh	r3, [r7, #30]
 8003da4:	8bfb      	ldrh	r3, [r7, #30]
 8003da6:	029b      	lsls	r3, r3, #10
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e02d      	b.n	8003e18 <USB_EPStartXfer+0x4c0>
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	83fb      	strh	r3, [r7, #30]
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <USB_EPStartXfer+0x47a>
 8003dcc:	8bfb      	ldrh	r3, [r7, #30]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	83fb      	strh	r3, [r7, #30]
 8003dd2:	8bfb      	ldrh	r3, [r7, #30]
 8003dd4:	029b      	lsls	r3, r3, #10
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e01b      	b.n	8003e18 <USB_EPStartXfer+0x4c0>
 8003de0:	ffff80c0 	.word	0xffff80c0
 8003de4:	ffffc080 	.word	0xffffc080
 8003de8:	ffff8080 	.word	0xffff8080
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d111      	bne.n	8003e18 <USB_EPStartXfer+0x4c0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	3302      	adds	r3, #2
 8003e08:	005a      	lsls	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e12:	461a      	mov	r2, r3
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	b29c      	uxth	r4, r3
 8003e30:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e34:	b29c      	uxth	r4, r3
 8003e36:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e3a:	b29c      	uxth	r4, r3
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	441a      	add	r2, r3
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <USB_EPStartXfer+0x500>)
 8003e48:	4323      	orrs	r3, r4
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3734      	adds	r7, #52	; 0x34
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	ffff8080 	.word	0xffff8080

08003e5c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003e5c:	b490      	push	{r4, r7}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d118      	bne.n	8003ea0 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003e80:	401c      	ands	r4, r3
 8003e82:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8003e86:	f084 0410 	eor.w	r4, r4, #16
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	441a      	add	r2, r3
 8003e94:	b2a1      	uxth	r1, r4
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <USB_EPSetStall+0xbc>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]
 8003e9e:	e034      	b.n	8003f0a <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d018      	beq.n	8003eda <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebe:	b29c      	uxth	r4, r3
 8003ec0:	f084 0310 	eor.w	r3, r4, #16
 8003ec4:	b29c      	uxth	r4, r3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <USB_EPSetStall+0xbc>)
 8003ed2:	4323      	orrs	r3, r4
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	8013      	strh	r3, [r2, #0]
 8003ed8:	e017      	b.n	8003f0a <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef0:	b29c      	uxth	r4, r3
 8003ef2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003ef6:	b29c      	uxth	r4, r3
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <USB_EPSetStall+0xbc>)
 8003f04:	4323      	orrs	r3, r4
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc90      	pop	{r4, r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	ffff8080 	.word	0xffff8080

08003f1c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f1c:	b490      	push	{r4, r7}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d03a      	beq.n	8003fa4 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d013      	beq.n	8003f6c <USB_EPClearStall+0x50>
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	441a      	add	r2, r3
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b299      	uxth	r1, r3
 8003f5c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003f60:	400b      	ands	r3, r1
 8003f62:	b299      	uxth	r1, r3
 8003f64:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <USB_EPClearStall+0x108>)
 8003f66:	430b      	orrs	r3, r1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f82:	b29c      	uxth	r4, r3
 8003f84:	f084 0310 	eor.w	r3, r4, #16
 8003f88:	b29c      	uxth	r4, r3
 8003f8a:	f084 0320 	eor.w	r3, r4, #32
 8003f8e:	b29c      	uxth	r4, r3
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <USB_EPClearStall+0x10c>)
 8003f9c:	4323      	orrs	r3, r4
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	8013      	strh	r3, [r2, #0]
 8003fa2:	e039      	b.n	8004018 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d013      	beq.n	8003fe2 <USB_EPClearStall+0xc6>
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	441a      	add	r2, r3
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b299      	uxth	r1, r3
 8003fd2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003fd6:	400b      	ands	r3, r1
 8003fd8:	b299      	uxth	r1, r3
 8003fda:	4b14      	ldr	r3, [pc, #80]	; (800402c <USB_EPClearStall+0x110>)
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff8:	b29c      	uxth	r4, r3
 8003ffa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003ffe:	b29c      	uxth	r4, r3
 8004000:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004004:	b29c      	uxth	r4, r3
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	441a      	add	r2, r3
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <USB_EPClearStall+0x10c>)
 8004012:	4323      	orrs	r3, r4
 8004014:	b29b      	uxth	r3, r3
 8004016:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bc90      	pop	{r4, r7}
 8004022:	4770      	bx	lr
 8004024:	ffff80c0 	.word	0xffff80c0
 8004028:	ffff8080 	.word	0xffff8080
 800402c:	ffffc080 	.word	0xffffc080

08004030 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2280      	movs	r2, #128	; 0x80
 8004046:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004090:	b29b      	uxth	r3, r3
 8004092:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004094:	68fb      	ldr	r3, [r7, #12]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr

080040b6 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b08b      	sub	sp, #44	; 0x2c
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	4611      	mov	r1, r2
 80040c2:	461a      	mov	r2, r3
 80040c4:	460b      	mov	r3, r1
 80040c6:	80fb      	strh	r3, [r7, #6]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80040cc:	88bb      	ldrh	r3, [r7, #4]
 80040ce:	3301      	adds	r3, #1
 80040d0:	105b      	asrs	r3, r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	461a      	mov	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f2:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
 80040f8:	e01b      	b.n	8004132 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	3301      	adds	r3, #1
 8004104:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	461a      	mov	r2, r3
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	1c9a      	adds	r2, r3, #2
 8004118:	623a      	str	r2, [r7, #32]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	b292      	uxth	r2, r2
 800411e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	3302      	adds	r3, #2
 8004124:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3301      	adds	r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	3b01      	subs	r3, #1
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e0      	bne.n	80040fa <USB_WritePMA+0x44>
  }
}
 8004138:	bf00      	nop
 800413a:	372c      	adds	r7, #44	; 0x2c
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004142:	b480      	push	{r7}
 8004144:	b089      	sub	sp, #36	; 0x24
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	4611      	mov	r1, r2
 800414e:	461a      	mov	r2, r3
 8004150:	460b      	mov	r3, r1
 8004152:	80fb      	strh	r3, [r7, #6]
 8004154:	4613      	mov	r3, r2
 8004156:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8004158:	88bb      	ldrh	r3, [r7, #4]
 800415a:	3301      	adds	r3, #1
 800415c:	105b      	asrs	r3, r3, #1
 800415e:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	461a      	mov	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004176:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	e00e      	b.n	800419c <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	60ba      	str	r2, [r7, #8]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	1d11      	adds	r1, r2, #4
 8004188:	61b9      	str	r1, [r7, #24]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	b292      	uxth	r2, r2
 800418e:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	3301      	adds	r3, #1
 8004194:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3b01      	subs	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ed      	bne.n	800417e <USB_ReadPMA+0x3c>
  }
}
 80041a2:	bf00      	nop
 80041a4:	3724      	adds	r7, #36	; 0x24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <USBD_MSC_Init>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, 
                            uint8_t cfgidx)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
  int16_t ret = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	81fb      	strh	r3, [r7, #14]
   
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7c1b      	ldrb	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10e      	bne.n	80041e2 <USBD_MSC_Init+0x36>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80041c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c8:	2202      	movs	r2, #2
 80041ca:	2101      	movs	r1, #1
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f002 fbe5 	bl	800699c <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_HS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80041d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d6:	2202      	movs	r2, #2
 80041d8:	2181      	movs	r1, #129	; 0x81
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f002 fbde 	bl	800699c <USBD_LL_OpenEP>
 80041e0:	e00b      	b.n	80041fa <USBD_MSC_Init+0x4e>
                   MSC_MAX_HS_PACKET);  
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	2202      	movs	r2, #2
 80041e6:	2101      	movs	r1, #1
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f002 fbd7 	bl	800699c <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80041ee:	2340      	movs	r3, #64	; 0x40
 80041f0:	2202      	movs	r2, #2
 80041f2:	2181      	movs	r1, #129	; 0x81
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f002 fbd1 	bl	800699c <USBD_LL_OpenEP>
                   MSC_EPIN_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);  
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 80041fa:	f44f 701b 	mov.w	r0, #620	; 0x26c
 80041fe:	f002 fdc7 	bl	8006d90 <USBD_static_malloc>
 8004202:	4602      	mov	r2, r0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <USBD_MSC_Init+0x6e>
  {
    ret = 1; 
 8004214:	2301      	movs	r3, #1
 8004216:	81fb      	strh	r3, [r7, #14]
 8004218:	e004      	b.n	8004224 <USBD_MSC_Init+0x78>
  }
  else
  {
    /* Init the BOT  layer */
    MSC_BOT_Init(pdev); 
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f958 	bl	80044d0 <MSC_BOT_Init>
    ret = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	81fb      	strh	r3, [r7, #14]
  }
  
  return ret;
 8004224:	89fb      	ldrh	r3, [r7, #14]
 8004226:	b2db      	uxtb	r3, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev, 
                              uint8_t cfgidx)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev,
 800423c:	2101      	movs	r1, #1
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f002 fbea 	bl	8006a18 <USBD_LL_CloseEP>
                  MSC_EPOUT_ADDR);
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004244:	2181      	movs	r1, #129	; 0x81
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f002 fbe6 	bl	8006a18 <USBD_LL_CloseEP>
                  MSC_EPIN_ADDR);
  
  
    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f989 	bl	8004564 <MSC_BOT_DeInit>
  
  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004258:	2b00      	cmp	r3, #0
 800425a:	d009      	beq.n	8004270 <USBD_MSC_DeInit+0x40>
  {
    USBD_free(pdev->pClassData);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004262:	4618      	mov	r0, r3
 8004264:	f002 fda0 	bl	8006da8 <USBD_static_free>
    pdev->pClassData  = NULL; 
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  return 0;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800428a:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004294:	2b00      	cmp	r3, #0
 8004296:	d04a      	beq.n	800432e <USBD_MSC_Setup+0xb4>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d000      	beq.n	800429e <USBD_MSC_Setup+0x24>
      
    }  
    break;
   
  default:
    break;
 800429c:	e0a0      	b.n	80043e0 <USBD_MSC_Setup+0x166>
    switch (req->bRequest)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	2bfe      	cmp	r3, #254	; 0xfe
 80042a4:	d002      	beq.n	80042ac <USBD_MSC_Setup+0x32>
 80042a6:	2bff      	cmp	r3, #255	; 0xff
 80042a8:	d023      	beq.n	80042f2 <USBD_MSC_Setup+0x78>
 80042aa:	e039      	b.n	8004320 <USBD_MSC_Setup+0xa6>
      if((req->wValue  == 0) && 
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	885b      	ldrh	r3, [r3, #2]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d118      	bne.n	80042e6 <USBD_MSC_Setup+0x6c>
         (req->wLength == 1) &&
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d114      	bne.n	80042e6 <USBD_MSC_Setup+0x6c>
         ((req->bmRequest & 0x80) == 0x80))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b25b      	sxtb	r3, r3
         (req->wLength == 1) &&
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da0f      	bge.n	80042e6 <USBD_MSC_Setup+0x6c>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	4798      	blx	r3
 80042d0:	4603      	mov	r3, r0
 80042d2:	461a      	mov	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	601a      	str	r2, [r3, #0]
                          (uint8_t *)&hmsc->max_lun,
 80042d8:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 80042da:	2201      	movs	r2, #1
 80042dc:	4619      	mov	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 ffa2 	bl	8006228 <USBD_CtlSendData>
      break;
 80042e4:	e022      	b.n	800432c <USBD_MSC_Setup+0xb2>
         USBD_CtlError(pdev , req);
 80042e6:	6839      	ldr	r1, [r7, #0]
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f001 ff32 	bl	8006152 <USBD_CtlError>
         return USBD_FAIL; 
 80042ee:	2302      	movs	r3, #2
 80042f0:	e077      	b.n	80043e2 <USBD_MSC_Setup+0x168>
      if((req->wValue  == 0) && 
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	885b      	ldrh	r3, [r3, #2]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10c      	bne.n	8004314 <USBD_MSC_Setup+0x9a>
         (req->wLength == 0) &&
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d108      	bne.n	8004314 <USBD_MSC_Setup+0x9a>
        ((req->bmRequest & 0x80) != 0x80))
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	b25b      	sxtb	r3, r3
         (req->wLength == 0) &&
 8004308:	2b00      	cmp	r3, #0
 800430a:	db03      	blt.n	8004314 <USBD_MSC_Setup+0x9a>
         MSC_BOT_Reset(pdev);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f90f 	bl	8004530 <MSC_BOT_Reset>
      break;
 8004312:	e00b      	b.n	800432c <USBD_MSC_Setup+0xb2>
         USBD_CtlError(pdev , req);
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 ff1b 	bl	8006152 <USBD_CtlError>
         return USBD_FAIL; 
 800431c:	2302      	movs	r3, #2
 800431e:	e060      	b.n	80043e2 <USBD_MSC_Setup+0x168>
       USBD_CtlError(pdev , req);
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f001 ff15 	bl	8006152 <USBD_CtlError>
       return USBD_FAIL; 
 8004328:	2302      	movs	r3, #2
 800432a:	e05a      	b.n	80043e2 <USBD_MSC_Setup+0x168>
    break;
 800432c:	e058      	b.n	80043e0 <USBD_MSC_Setup+0x166>
    switch (req->bRequest)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	785b      	ldrb	r3, [r3, #1]
 8004332:	2b0a      	cmp	r3, #10
 8004334:	d004      	beq.n	8004340 <USBD_MSC_Setup+0xc6>
 8004336:	2b0b      	cmp	r3, #11
 8004338:	d00a      	beq.n	8004350 <USBD_MSC_Setup+0xd6>
 800433a:	2b01      	cmp	r3, #1
 800433c:	d00f      	beq.n	800435e <USBD_MSC_Setup+0xe4>
    break;
 800433e:	e04e      	b.n	80043de <USBD_MSC_Setup+0x164>
                        (uint8_t *)&hmsc->interface,
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev,
 8004344:	2201      	movs	r2, #1
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f001 ff6d 	bl	8006228 <USBD_CtlSendData>
      break;
 800434e:	e046      	b.n	80043de <USBD_MSC_Setup+0x164>
      hmsc->interface = (uint8_t)(req->wValue);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	885b      	ldrh	r3, [r3, #2]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	605a      	str	r2, [r3, #4]
      break;
 800435c:	e03f      	b.n	80043de <USBD_MSC_Setup+0x164>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	889b      	ldrh	r3, [r3, #4]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f002 fb8c 	bl	8006a84 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	889b      	ldrh	r3, [r3, #4]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f002 fb4f 	bl	8006a18 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	889b      	ldrh	r3, [r3, #4]
 800437e:	b25b      	sxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	da12      	bge.n	80043aa <USBD_MSC_Setup+0x130>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7c1b      	ldrb	r3, [r3, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <USBD_MSC_Setup+0x122>
          USBD_LL_OpenEP(pdev,
 800438c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004390:	2202      	movs	r2, #2
 8004392:	2181      	movs	r1, #129	; 0x81
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f002 fb01 	bl	800699c <USBD_LL_OpenEP>
 800439a:	e018      	b.n	80043ce <USBD_MSC_Setup+0x154>
          USBD_LL_OpenEP(pdev,
 800439c:	2340      	movs	r3, #64	; 0x40
 800439e:	2202      	movs	r2, #2
 80043a0:	2181      	movs	r1, #129	; 0x81
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f002 fafa 	bl	800699c <USBD_LL_OpenEP>
 80043a8:	e011      	b.n	80043ce <USBD_MSC_Setup+0x154>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7c1b      	ldrb	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d107      	bne.n	80043c2 <USBD_MSC_Setup+0x148>
          USBD_LL_OpenEP(pdev,
 80043b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043b6:	2202      	movs	r2, #2
 80043b8:	2101      	movs	r1, #1
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f002 faee 	bl	800699c <USBD_LL_OpenEP>
 80043c0:	e005      	b.n	80043ce <USBD_MSC_Setup+0x154>
          USBD_LL_OpenEP(pdev,
 80043c2:	2340      	movs	r3, #64	; 0x40
 80043c4:	2202      	movs	r2, #2
 80043c6:	2101      	movs	r1, #1
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f002 fae7 	bl	800699c <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	889b      	ldrh	r3, [r3, #4]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa38 	bl	800484c <MSC_BOT_CplClrFeature>
      break;
 80043dc:	bf00      	nop
    break;
 80043de:	bf00      	nop
  }
  return 0;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f8c2 	bl	8004584 <MSC_BOT_DataIn>
  return 0;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev, 
                               uint8_t epnum)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8e3 	bl	80045e6 <MSC_BOT_DataOut>
  return 0;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 800443a:	4b03      	ldr	r3, [pc, #12]	; (8004448 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000040 	.word	0x20000040

0800444c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 800445a:	4b03      	ldr	r3, [pc, #12]	; (8004468 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000060 	.word	0x20000060

0800446c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 800447a:	4b03      	ldr	r3, [pc, #12]	; (8004488 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000080 	.word	0x20000080

0800448c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	220a      	movs	r2, #10
 8004498:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 800449a:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	200000a0 	.word	0x200000a0

080044ac <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData= fops;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }
  return 0;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80044de:	60fb      	str	r3, [r7, #12]
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	725a      	strb	r2, [r3, #9]
  
  hmsc->scsi_sense_tail = 0;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
  
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2000      	movs	r0, #0
 8004506:	4798      	blx	r3
  
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8004508:	2101      	movs	r1, #1
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f002 faba 	bl	8006a84 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8004510:	2181      	movs	r1, #129	; 0x81
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f002 fab6 	bl	8006a84 <USBD_LL_FlushEP>
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
                          MSC_EPOUT_ADDR,
                          (uint8_t *)&hmsc->cbw,
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  USBD_LL_PrepareReceive (pdev,
 800451e:	231f      	movs	r3, #31
 8004520:	2101      	movs	r1, #1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f002 fbe6 	bl	8006cf4 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);    
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800453e:	60fb      	str	r3, [r7, #12]
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	725a      	strb	r2, [r3, #9]
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
                          MSC_EPOUT_ADDR,
                          (uint8_t *)&hmsc->cbw,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  USBD_LL_PrepareReceive (pdev,
 8004552:	231f      	movs	r3, #31
 8004554:	2101      	movs	r1, #1
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f002 fbcc 	bl	8006cf4 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);   
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004572:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	721a      	strb	r2, [r3, #8]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev, 
                     uint8_t epnum)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004596:	60fb      	str	r3, [r7, #12]
  
  switch (hmsc->bot_state)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	7a1b      	ldrb	r3, [r3, #8]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d004      	beq.n	80045aa <MSC_BOT_DataIn+0x26>
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	db19      	blt.n	80045d8 <MSC_BOT_DataIn+0x54>
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	dc17      	bgt.n	80045d8 <MSC_BOT_DataIn+0x54>
 80045a8:	e011      	b.n	80045ce <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80045b6:	461a      	mov	r2, r3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f96d 	bl	8004898 <SCSI_ProcessCmd>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da0b      	bge.n	80045dc <MSC_BOT_DataIn+0x58>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80045c4:	2101      	movs	r1, #1
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8e6 	bl	8004798 <MSC_BOT_SendCSW>
    }
    break;
 80045cc:	e006      	b.n	80045dc <MSC_BOT_DataIn+0x58>
    
  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 80045ce:	2100      	movs	r1, #0
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f8e1 	bl	8004798 <MSC_BOT_SendCSW>
    
    break;
 80045d6:	e002      	b.n	80045de <MSC_BOT_DataIn+0x5a>
    
  default:
    break;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <MSC_BOT_DataIn+0x5a>
    break;
 80045dc:	bf00      	nop
  }
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev, 
                      uint8_t epnum)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80045f8:	60fb      	str	r3, [r7, #12]
  
  switch (hmsc->bot_state)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	7a1b      	ldrb	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <MSC_BOT_DataOut+0x22>
 8004602:	2b01      	cmp	r3, #1
 8004604:	d004      	beq.n	8004610 <MSC_BOT_DataOut+0x2a>
    }

    break;
    
  default:
    break;
 8004606:	e015      	b.n	8004634 <MSC_BOT_DataOut+0x4e>
    MSC_BOT_CBW_Decode(pdev);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f817 	bl	800463c <MSC_BOT_CBW_Decode>
    break;
 800460e:	e011      	b.n	8004634 <MSC_BOT_DataOut+0x4e>
    if(SCSI_ProcessCmd(pdev,
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800461c:	461a      	mov	r2, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f93a 	bl	8004898 <SCSI_ProcessCmd>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	da03      	bge.n	8004632 <MSC_BOT_DataOut+0x4c>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800462a:	2101      	movs	r1, #1
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8b3 	bl	8004798 <MSC_BOT_SendCSW>
    break;
 8004632:	bf00      	nop
  }
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly  
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800464a:	60fb      	str	r3, [r7, #12]
  
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004664:	2101      	movs	r1, #1
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f002 fb7e 	bl	8006d68 <USBD_LL_GetRxDataSize>
 800466c:	4603      	mov	r3, r0
 800466e:	2b1f      	cmp	r3, #31
 8004670:	d114      	bne.n	800469c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004678:	4a30      	ldr	r2, [pc, #192]	; (800473c <MSC_BOT_CBW_Decode+0x100>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d10e      	bne.n	800469c <MSC_BOT_CBW_Decode+0x60>
        (hmsc->cbw.bLUN > 1) || 
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8004684:	2b01      	cmp	r3, #1
 8004686:	d809      	bhi.n	800469c <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1) || 
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1) || 
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <MSC_BOT_CBW_Decode+0x60>
            (hmsc->cbw.bCBLength > 16))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
          (hmsc->cbw.bCBLength < 1) || 
 8004698:	2b10      	cmp	r3, #16
 800469a:	d90e      	bls.n	80046ba <MSC_BOT_CBW_Decode+0x7e>
  {
    
    SCSI_SenseCode(pdev,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80046a2:	2320      	movs	r3, #32
 80046a4:	2205      	movs	r2, #5
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fc4a 	bl	8004f40 <SCSI_SenseCode>
                   hmsc->cbw.bLUN, 
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2202      	movs	r2, #2
 80046b0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f89c 	bl	80047f0 <MSC_BOT_Abort>
        MSC_BOT_SendCSW (pdev,
                         USBD_CSW_CMD_PASSED);
      }
    }
  }
}
 80046b8:	e03b      	b.n	8004732 <MSC_BOT_CBW_Decode+0xf6>
    if(SCSI_ProcessCmd(pdev,
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80046c6:	461a      	mov	r2, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f8e5 	bl	8004898 <SCSI_ProcessCmd>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	da0c      	bge.n	80046ee <MSC_BOT_CBW_Decode+0xb2>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	7a1b      	ldrb	r3, [r3, #8]
 80046d8:	2b05      	cmp	r3, #5
 80046da:	d104      	bne.n	80046e6 <MSC_BOT_CBW_Decode+0xaa>
       MSC_BOT_SendCSW (pdev,
 80046dc:	2101      	movs	r1, #1
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f85a 	bl	8004798 <MSC_BOT_SendCSW>
}
 80046e4:	e025      	b.n	8004732 <MSC_BOT_CBW_Decode+0xf6>
        MSC_BOT_Abort(pdev);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f882 	bl	80047f0 <MSC_BOT_Abort>
}
 80046ec:	e021      	b.n	8004732 <MSC_BOT_CBW_Decode+0xf6>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	7a1b      	ldrb	r3, [r3, #8]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d01d      	beq.n	8004732 <MSC_BOT_CBW_Decode+0xf6>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d019      	beq.n	8004732 <MSC_BOT_CBW_Decode+0xf6>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN)) 
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004702:	2b03      	cmp	r3, #3
 8004704:	d015      	beq.n	8004732 <MSC_BOT_CBW_Decode+0xf6>
      if (hmsc->bot_data_length > 0)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	895b      	ldrh	r3, [r3, #10]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <MSC_BOT_CBW_Decode+0xe6>
                         hmsc->bot_data, 
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f103 010c 	add.w	r1, r3, #12
        MSC_BOT_SendData(pdev,
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	895b      	ldrh	r3, [r3, #10]
 8004718:	461a      	mov	r2, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f810 	bl	8004740 <MSC_BOT_SendData>
}
 8004720:	e007      	b.n	8004732 <MSC_BOT_CBW_Decode+0xf6>
      else if (hmsc->bot_data_length == 0) 
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	895b      	ldrh	r3, [r3, #10]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <MSC_BOT_CBW_Decode+0xf6>
        MSC_BOT_SendCSW (pdev,
 800472a:	2100      	movs	r1, #0
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f833 	bl	8004798 <MSC_BOT_SendCSW>
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	43425355 	.word	0x43425355

08004740 <MSC_BOT_SendData>:
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef  *pdev,
                              uint8_t* buf, 
                              uint16_t len)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004754:	617b      	str	r3, [r7, #20]
  
  len = MIN (hmsc->cbw.dDataLength, len);
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800475e:	4293      	cmp	r3, r2
 8004760:	bf28      	it	cs
 8004762:	4613      	movcs	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  hmsc->csw.dDataResidue -= len;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2204      	movs	r2, #4
 8004782:	721a      	strb	r2, [r3, #8]
  
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	2181      	movs	r1, #129	; 0x81
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f002 fa78 	bl	8006c80 <USBD_LL_Transmit>
}
 8004790:	bf00      	nop
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047aa:	60fb      	str	r3, [r7, #12]
  
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a0f      	ldr	r2, [pc, #60]	; (80047ec <MSC_BOT_SendCSW+0x54>)
 80047b0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	721a      	strb	r2, [r3, #8]
  
  USBD_LL_Transmit (pdev, 
             MSC_EPIN_ADDR, 
             (uint8_t *)&hmsc->csw, 
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 720b 	add.w	r2, r3, #556	; 0x22c
  USBD_LL_Transmit (pdev, 
 80047c8:	230d      	movs	r3, #13
 80047ca:	2181      	movs	r1, #129	; 0x81
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f002 fa57 	bl	8006c80 <USBD_LL_Transmit>
             USBD_BOT_CSW_LENGTH);
  
  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev,
                    MSC_EPOUT_ADDR,
                    (uint8_t *)&hmsc->cbw, 
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  USBD_LL_PrepareReceive (pdev,
 80047d8:	231f      	movs	r3, #31
 80047da:	2101      	movs	r1, #1
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f002 fa89 	bl	8006cf4 <USBD_LL_PrepareReceive>
                    USBD_BOT_CBW_LENGTH);  
  
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	53425355 	.word	0x53425355

080047f0 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047fe:	60fb      	str	r3, [r7, #12]
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10c      	bne.n	8004824 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0) &&
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0) && 
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0) &&
 8004818:	2b00      	cmp	r3, #0
 800481a:	d103      	bne.n	8004824 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800481c:	2101      	movs	r1, #1
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f002 f966 	bl	8006af0 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004824:	2181      	movs	r1, #129	; 0x81
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f002 f962 	bl	8006af0 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	7a5b      	ldrb	r3, [r3, #9]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d107      	bne.n	8004844 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 7203 	add.w	r2, r3, #524	; 0x20c
    USBD_LL_PrepareReceive (pdev,
 800483a:	231f      	movs	r3, #31
 800483c:	2101      	movs	r1, #1
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f002 fa58 	bl	8006cf4 <USBD_LL_PrepareReceive>
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800485e:	60fb      	str	r3, [r7, #12]
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	7a5b      	ldrb	r3, [r3, #9]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d107      	bne.n	8004878 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004868:	2181      	movs	r1, #129	; 0x81
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f002 f940 	bl	8006af0 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	725a      	strb	r2, [r3, #9]
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 8004876:	e00b      	b.n	8004890 <MSC_BOT_CplClrFeature+0x44>
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800487c:	2b00      	cmp	r3, #0
 800487e:	da07      	bge.n	8004890 <MSC_BOT_CplClrFeature+0x44>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	7a5b      	ldrb	r3, [r3, #9]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d003      	beq.n	8004890 <MSC_BOT_CplClrFeature+0x44>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8004888:	2101      	movs	r1, #1
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ff84 	bl	8004798 <MSC_BOT_SendCSW>
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <SCSI_ProcessCmd>:
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef  *pdev,
                           uint8_t lun, 
                           uint8_t *params)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	460b      	mov	r3, r1
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	72fb      	strb	r3, [r7, #11]
  
  switch (params[0])
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b5a      	cmp	r3, #90	; 0x5a
 80048ac:	f200 811a 	bhi.w	8004ae4 <SCSI_ProcessCmd+0x24c>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <SCSI_ProcessCmd+0x20>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	08004a25 	.word	0x08004a25
 80048bc:	08004ae5 	.word	0x08004ae5
 80048c0:	08004ae5 	.word	0x08004ae5
 80048c4:	08004a35 	.word	0x08004a35
 80048c8:	08004ae5 	.word	0x08004ae5
 80048cc:	08004ae5 	.word	0x08004ae5
 80048d0:	08004ae5 	.word	0x08004ae5
 80048d4:	08004ae5 	.word	0x08004ae5
 80048d8:	08004ae5 	.word	0x08004ae5
 80048dc:	08004ae5 	.word	0x08004ae5
 80048e0:	08004ae5 	.word	0x08004ae5
 80048e4:	08004ae5 	.word	0x08004ae5
 80048e8:	08004ae5 	.word	0x08004ae5
 80048ec:	08004ae5 	.word	0x08004ae5
 80048f0:	08004ae5 	.word	0x08004ae5
 80048f4:	08004ae5 	.word	0x08004ae5
 80048f8:	08004ae5 	.word	0x08004ae5
 80048fc:	08004ae5 	.word	0x08004ae5
 8004900:	08004a45 	.word	0x08004a45
 8004904:	08004ae5 	.word	0x08004ae5
 8004908:	08004ae5 	.word	0x08004ae5
 800490c:	08004ae5 	.word	0x08004ae5
 8004910:	08004ae5 	.word	0x08004ae5
 8004914:	08004ae5 	.word	0x08004ae5
 8004918:	08004ae5 	.word	0x08004ae5
 800491c:	08004ae5 	.word	0x08004ae5
 8004920:	08004a75 	.word	0x08004a75
 8004924:	08004a55 	.word	0x08004a55
 8004928:	08004ae5 	.word	0x08004ae5
 800492c:	08004ae5 	.word	0x08004ae5
 8004930:	08004a65 	.word	0x08004a65
 8004934:	08004ae5 	.word	0x08004ae5
 8004938:	08004ae5 	.word	0x08004ae5
 800493c:	08004ae5 	.word	0x08004ae5
 8004940:	08004ae5 	.word	0x08004ae5
 8004944:	08004a95 	.word	0x08004a95
 8004948:	08004ae5 	.word	0x08004ae5
 800494c:	08004aa5 	.word	0x08004aa5
 8004950:	08004ae5 	.word	0x08004ae5
 8004954:	08004ae5 	.word	0x08004ae5
 8004958:	08004ab5 	.word	0x08004ab5
 800495c:	08004ae5 	.word	0x08004ae5
 8004960:	08004ac5 	.word	0x08004ac5
 8004964:	08004ae5 	.word	0x08004ae5
 8004968:	08004ae5 	.word	0x08004ae5
 800496c:	08004ae5 	.word	0x08004ae5
 8004970:	08004ae5 	.word	0x08004ae5
 8004974:	08004ad5 	.word	0x08004ad5
 8004978:	08004ae5 	.word	0x08004ae5
 800497c:	08004ae5 	.word	0x08004ae5
 8004980:	08004ae5 	.word	0x08004ae5
 8004984:	08004ae5 	.word	0x08004ae5
 8004988:	08004ae5 	.word	0x08004ae5
 800498c:	08004ae5 	.word	0x08004ae5
 8004990:	08004ae5 	.word	0x08004ae5
 8004994:	08004ae5 	.word	0x08004ae5
 8004998:	08004ae5 	.word	0x08004ae5
 800499c:	08004ae5 	.word	0x08004ae5
 80049a0:	08004ae5 	.word	0x08004ae5
 80049a4:	08004ae5 	.word	0x08004ae5
 80049a8:	08004ae5 	.word	0x08004ae5
 80049ac:	08004ae5 	.word	0x08004ae5
 80049b0:	08004ae5 	.word	0x08004ae5
 80049b4:	08004ae5 	.word	0x08004ae5
 80049b8:	08004ae5 	.word	0x08004ae5
 80049bc:	08004ae5 	.word	0x08004ae5
 80049c0:	08004ae5 	.word	0x08004ae5
 80049c4:	08004ae5 	.word	0x08004ae5
 80049c8:	08004ae5 	.word	0x08004ae5
 80049cc:	08004ae5 	.word	0x08004ae5
 80049d0:	08004ae5 	.word	0x08004ae5
 80049d4:	08004ae5 	.word	0x08004ae5
 80049d8:	08004ae5 	.word	0x08004ae5
 80049dc:	08004ae5 	.word	0x08004ae5
 80049e0:	08004ae5 	.word	0x08004ae5
 80049e4:	08004ae5 	.word	0x08004ae5
 80049e8:	08004ae5 	.word	0x08004ae5
 80049ec:	08004ae5 	.word	0x08004ae5
 80049f0:	08004ae5 	.word	0x08004ae5
 80049f4:	08004ae5 	.word	0x08004ae5
 80049f8:	08004ae5 	.word	0x08004ae5
 80049fc:	08004ae5 	.word	0x08004ae5
 8004a00:	08004ae5 	.word	0x08004ae5
 8004a04:	08004ae5 	.word	0x08004ae5
 8004a08:	08004ae5 	.word	0x08004ae5
 8004a0c:	08004ae5 	.word	0x08004ae5
 8004a10:	08004ae5 	.word	0x08004ae5
 8004a14:	08004ae5 	.word	0x08004ae5
 8004a18:	08004ae5 	.word	0x08004ae5
 8004a1c:	08004ae5 	.word	0x08004ae5
 8004a20:	08004a85 	.word	0x08004a85
  {
  case SCSI_TEST_UNIT_READY:
    return SCSI_TestUnitReady(pdev, lun, params);
 8004a24:	7afb      	ldrb	r3, [r7, #11]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f866 	bl	8004afc <SCSI_TestUnitReady>
 8004a30:	4603      	mov	r3, r0
 8004a32:	e05f      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_REQUEST_SENSE:
    return SCSI_RequestSense (pdev, lun, params);
 8004a34:	7afb      	ldrb	r3, [r7, #11]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fa16 	bl	8004e6c <SCSI_RequestSense>
 8004a40:	4603      	mov	r3, r0
 8004a42:	e057      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
  case SCSI_INQUIRY:
    return SCSI_Inquiry(pdev, lun, params);
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f8a4 	bl	8004b98 <SCSI_Inquiry>
 8004a50:	4603      	mov	r3, r0
 8004a52:	e04f      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_START_STOP_UNIT:
    return SCSI_StartStopUnit(pdev, lun, params);
 8004a54:	7afb      	ldrb	r3, [r7, #11]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 faa9 	bl	8004fb2 <SCSI_StartStopUnit>
 8004a60:	4603      	mov	r3, r0
 8004a62:	e047      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_ALLOW_MEDIUM_REMOVAL:
    return SCSI_StartStopUnit(pdev, lun, params);
 8004a64:	7afb      	ldrb	r3, [r7, #11]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 faa1 	bl	8004fb2 <SCSI_StartStopUnit>
 8004a70:	4603      	mov	r3, r0
 8004a72:	e03f      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_MODE_SENSE6:
    return SCSI_ModeSense6 (pdev, lun, params);
 8004a74:	7afb      	ldrb	r3, [r7, #11]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f9a6 	bl	8004dcc <SCSI_ModeSense6>
 8004a80:	4603      	mov	r3, r0
 8004a82:	e037      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_MODE_SENSE10:
    return SCSI_ModeSense10 (pdev, lun, params);
 8004a84:	7afb      	ldrb	r3, [r7, #11]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f9c6 	bl	8004e1c <SCSI_ModeSense10>
 8004a90:	4603      	mov	r3, r0
 8004a92:	e02f      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ_FORMAT_CAPACITIES:
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 8004a94:	7afb      	ldrb	r3, [r7, #11]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f931 	bl	8004d02 <SCSI_ReadFormatCapacity>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	e027      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ_CAPACITY10:
    return SCSI_ReadCapacity10(pdev, lun, params);
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f8c2 	bl	8004c34 <SCSI_ReadCapacity10>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	e01f      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ10:
    return SCSI_Read10(pdev, lun, params); 
 8004ab4:	7afb      	ldrb	r3, [r7, #11]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fa8d 	bl	8004fda <SCSI_Read10>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	e017      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_WRITE10:
    return SCSI_Write10(pdev, lun, params);
 8004ac4:	7afb      	ldrb	r3, [r7, #11]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fb26 	bl	800511c <SCSI_Write10>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	e00f      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_VERIFY10:
    return SCSI_Verify10(pdev, lun, params);
 8004ad4:	7afb      	ldrb	r3, [r7, #11]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fbe0 	bl	80052a0 <SCSI_Verify10>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	e007      	b.n	8004af4 <SCSI_ProcessCmd+0x25c>
    
  default:
    SCSI_SenseCode(pdev, 
 8004ae4:	7af9      	ldrb	r1, [r7, #11]
 8004ae6:	2320      	movs	r3, #32
 8004ae8:	2205      	movs	r2, #5
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa28 	bl	8004f40 <SCSI_SenseCode>
                   lun,
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);    
    return -1;
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <SCSI_TestUnitReady>:
* @retval status
*/
uint8_t usbd_media_reset = 1;

static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	460b      	mov	r3, r1
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	72fb      	strb	r3, [r7, #11]

  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b10:	617b      	str	r3, [r7, #20]

  if (usbd_media_reset) {
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <SCSI_TestUnitReady+0x98>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00e      	beq.n	8004b38 <SCSI_TestUnitReady+0x3c>
	  usbd_media_reset = 0;
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <SCSI_TestUnitReady+0x98>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
	  SCSI_SenseCode(pdev,
 8004b20:	7af9      	ldrb	r1, [r7, #11]
 8004b22:	2329      	movs	r3, #41	; 0x29
 8004b24:	2206      	movs	r2, #6
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fa0a 	bl	8004f40 <SCSI_SenseCode>
	                 lun,
					 UNIT_ATTENTION,
					 0x29);

	  hmsc->bot_state = USBD_BOT_NO_DATA;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2205      	movs	r2, #5
 8004b30:	721a      	strb	r2, [r3, #8]
	return -1;
 8004b32:	f04f 33ff 	mov.w	r3, #4294967295
 8004b36:	e029      	b.n	8004b8c <SCSI_TestUnitReady+0x90>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <SCSI_TestUnitReady+0x5c>
  {
    SCSI_SenseCode(pdev,
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8004b48:	2320      	movs	r3, #32
 8004b4a:	2205      	movs	r2, #5
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f9f7 	bl	8004f40 <SCSI_SenseCode>
                   hmsc->cbw.bLUN, 
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    return -1;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295
 8004b56:	e019      	b.n	8004b8c <SCSI_TestUnitReady+0x90>
  }
  
  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	7afa      	ldrb	r2, [r7, #11]
 8004b62:	4610      	mov	r0, r2
 8004b64:	4798      	blx	r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <SCSI_TestUnitReady+0x88>
  {
    SCSI_SenseCode(pdev,
 8004b6c:	7af9      	ldrb	r1, [r7, #11]
 8004b6e:	233a      	movs	r3, #58	; 0x3a
 8004b70:	2202      	movs	r2, #2
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f9e4 	bl	8004f40 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2205      	movs	r2, #5
 8004b7c:	721a      	strb	r2, [r3, #8]
    return -1;
 8004b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b82:	e003      	b.n	8004b8c <SCSI_TestUnitReady+0x90>
  }

  hmsc->bot_data_length = 0;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2200      	movs	r2, #0
 8004b88:	815a      	strh	r2, [r3, #10]
  return 0;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	200000aa 	.word	0x200000aa

08004b98 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b089      	sub	sp, #36	; 0x24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004bac:	617b      	str	r3, [r7, #20]
  
  if (params[1] & 0x01)/*Evpd is set*/
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <SCSI_Inquiry+0x2e>
  {
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8004bbc:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <SCSI_Inquiry+0x98>)
 8004bbe:	61fb      	str	r3, [r7, #28]
    len = LENGTH_INQUIRY_PAGE00;
 8004bc0:	2307      	movs	r3, #7
 8004bc2:	837b      	strh	r3, [r7, #26]
 8004bc4:	e01b      	b.n	8004bfe <SCSI_Inquiry+0x66>
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004bcc:	69d9      	ldr	r1, [r3, #28]
 8004bce:	7afa      	ldrb	r2, [r7, #11]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	61fb      	str	r3, [r7, #28]
    len = pPage[4] + 5;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	3304      	adds	r3, #4
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3305      	adds	r3, #5
 8004be6:	837b      	strh	r3, [r7, #26]
    
    if (params[4] <= len)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	8b7a      	ldrh	r2, [r7, #26]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d303      	bcc.n	8004bfe <SCSI_Inquiry+0x66>
    {
      len = params[4];
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	837b      	strh	r3, [r7, #26]
    }
  }
  hmsc->bot_data_length = len;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	8b7a      	ldrh	r2, [r7, #26]
 8004c02:	815a      	strh	r2, [r3, #10]
  
  while (len) 
 8004c04:	e00b      	b.n	8004c1e <SCSI_Inquiry+0x86>
  {
    len--;
 8004c06:	8b7b      	ldrh	r3, [r7, #26]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	837b      	strh	r3, [r7, #26]
    hmsc->bot_data[len] = pPage[len];
 8004c0c:	8b7b      	ldrh	r3, [r7, #26]
 8004c0e:	8b7a      	ldrh	r2, [r7, #26]
 8004c10:	69f9      	ldr	r1, [r7, #28]
 8004c12:	440a      	add	r2, r1
 8004c14:	7811      	ldrb	r1, [r2, #0]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4413      	add	r3, r2
 8004c1a:	460a      	mov	r2, r1
 8004c1c:	731a      	strb	r2, [r3, #12]
  while (len) 
 8004c1e:	8b7b      	ldrh	r3, [r7, #26]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f0      	bne.n	8004c06 <SCSI_Inquiry+0x6e>
  }
  return 0;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3724      	adds	r7, #36	; 0x24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr
 8004c30:	08007a14 	.word	0x08007a14

08004c34 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004c48:	617b      	str	r3, [r7, #20]
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8004c5e:	7af8      	ldrb	r0, [r7, #11]
 8004c60:	4798      	blx	r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev,
 8004c68:	7af9      	ldrb	r1, [r7, #11]
 8004c6a:	233a      	movs	r3, #58	; 0x3a
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f966 	bl	8004f40 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 8004c74:	f04f 33ff 	mov.w	r3, #4294967295
 8004c78:	e03f      	b.n	8004cfa <SCSI_ReadCapacity10+0xc6>
  } 
  else
  {
    
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004c80:	3b01      	subs	r3, #1
 8004c82:	0e1b      	lsrs	r3, r3, #24
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004c90:	3b01      	subs	r3, #1
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	73da      	strb	r2, [r3, #15]
    
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004cc0:	161b      	asrs	r3, r3, #24
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004cce:	141b      	asrs	r3, r3, #16
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	74da      	strb	r2, [r3, #19]
    
    hmsc->bot_data_length = 8;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	815a      	strh	r2, [r3, #10]
    return 0;
 8004cf8:	2300      	movs	r3, #0
  }
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b088      	sub	sp, #32
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004d16:	61bb      	str	r3, [r7, #24]
  
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  
  for(i=0 ; i < 12 ; i++) 
 8004d18:	2300      	movs	r3, #0
 8004d1a:	83fb      	strh	r3, [r7, #30]
 8004d1c:	e007      	b.n	8004d2e <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0;
 8004d1e:	8bfb      	ldrh	r3, [r7, #30]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4413      	add	r3, r2
 8004d24:	2200      	movs	r2, #0
 8004d26:	731a      	strb	r2, [r3, #12]
  for(i=0 ; i < 12 ; i++) 
 8004d28:	8bfb      	ldrh	r3, [r7, #30]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	83fb      	strh	r3, [r7, #30]
 8004d2e:	8bfb      	ldrh	r3, [r7, #30]
 8004d30:	2b0b      	cmp	r3, #11
 8004d32:	d9f4      	bls.n	8004d1e <SCSI_ReadFormatCapacity+0x1c>
  }
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f107 0216 	add.w	r2, r7, #22
 8004d40:	f107 0110 	add.w	r1, r7, #16
 8004d44:	7af8      	ldrb	r0, [r7, #11]
 8004d46:	4798      	blx	r3
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d008      	beq.n	8004d60 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev,
 8004d4e:	7af9      	ldrb	r1, [r7, #11]
 8004d50:	233a      	movs	r3, #58	; 0x3a
 8004d52:	2202      	movs	r2, #2
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f8f3 	bl	8004f40 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 8004d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5e:	e030      	b.n	8004dc2 <SCSI_ReadFormatCapacity+0xc0>
  } 
  else
  {
    hmsc->bot_data[3] = 0x08;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2208      	movs	r2, #8
 8004d64:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	0e1b      	lsrs	r3, r3, #24
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	74da      	strb	r2, [r3, #19]
    
    hmsc->bot_data[8] = 0x02;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8004d9c:	8afb      	ldrh	r3, [r7, #22]
 8004d9e:	141b      	asrs	r3, r3, #16
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8004da6:	8afb      	ldrh	r3, [r7, #22]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8004db2:	8afb      	ldrh	r3, [r7, #22]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	75da      	strb	r2, [r3, #23]
    
    hmsc->bot_data_length = 12;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	220c      	movs	r2, #12
 8004dbe:	815a      	strh	r2, [r3, #10]
    return 0;
 8004dc0:	2300      	movs	r3, #0
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004de0:	613b      	str	r3, [r7, #16]
  uint16_t len = 8 ;
 8004de2:	2308      	movs	r3, #8
 8004de4:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	8afa      	ldrh	r2, [r7, #22]
 8004dea:	815a      	strh	r2, [r3, #10]
  
  while (len) 
 8004dec:	e00a      	b.n	8004e04 <SCSI_ModeSense6+0x38>
  {
    len--;
 8004dee:	8afb      	ldrh	r3, [r7, #22]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8004df4:	8afb      	ldrh	r3, [r7, #22]
 8004df6:	8afa      	ldrh	r2, [r7, #22]
 8004df8:	4907      	ldr	r1, [pc, #28]	; (8004e18 <SCSI_ModeSense6+0x4c>)
 8004dfa:	5c89      	ldrb	r1, [r1, r2]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	460a      	mov	r2, r1
 8004e02:	731a      	strb	r2, [r3, #12]
  while (len) 
 8004e04:	8afb      	ldrh	r3, [r7, #22]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f1      	bne.n	8004dee <SCSI_ModeSense6+0x22>
  }
  return 0;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	08007a1c 	.word	0x08007a1c

08004e1c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	460b      	mov	r3, r1
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8;
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004e34:	613b      	str	r3, [r7, #16]
  
  hmsc->bot_data_length = len;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	8afa      	ldrh	r2, [r7, #22]
 8004e3a:	815a      	strh	r2, [r3, #10]

  while (len) 
 8004e3c:	e00a      	b.n	8004e54 <SCSI_ModeSense10+0x38>
  {
    len--;
 8004e3e:	8afb      	ldrh	r3, [r7, #22]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8004e44:	8afb      	ldrh	r3, [r7, #22]
 8004e46:	8afa      	ldrh	r2, [r7, #22]
 8004e48:	4907      	ldr	r1, [pc, #28]	; (8004e68 <SCSI_ModeSense10+0x4c>)
 8004e4a:	5c89      	ldrb	r1, [r1, r2]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	460a      	mov	r2, r1
 8004e52:	731a      	strb	r2, [r3, #12]
  while (len) 
 8004e54:	8afb      	ldrh	r3, [r7, #22]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f1      	bne.n	8004e3e <SCSI_ModeSense10+0x22>
  }
  return 0;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	08007a24 	.word	0x08007a24

08004e6c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	460b      	mov	r3, r1
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004e80:	613b      	str	r3, [r7, #16]
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]
 8004e86:	e007      	b.n	8004e98 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0;
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	2200      	movs	r2, #0
 8004e90:	731a      	strb	r2, [r3, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	3301      	adds	r3, #1
 8004e96:	75fb      	strb	r3, [r7, #23]
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	2b11      	cmp	r3, #17
 8004e9c:	d9f4      	bls.n	8004e88 <SCSI_RequestSense+0x1c>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2270      	movs	r2, #112	; 0x70
 8004ea2:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	220c      	movs	r2, #12
 8004ea8:	74da      	strb	r2, [r3, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d02e      	beq.n	8004f18 <SCSI_RequestSense+0xac>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	3347      	adds	r3, #71	; 0x47
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	791a      	ldrb	r2, [r3, #4]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	739a      	strb	r2, [r3, #14]
//	*** could be a bug from ST CUBE, see pg. 56 of seagate doc ***
//    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
//    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;

//    the right way according to the USB SCSI whitepaper
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	3347      	adds	r3, #71	; 0x47
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	7a1a      	ldrb	r2, [r3, #8]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	3347      	adds	r3, #71	; 0x47
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	7a5a      	ldrb	r2, [r3, #9]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	765a      	strb	r2, [r3, #25]


    hmsc->scsi_sense_head++;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8004efc:	3301      	adds	r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d103      	bne.n	8004f18 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2212      	movs	r2, #18
 8004f1c:	815a      	strh	r2, [r3, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b12      	cmp	r3, #18
 8004f26:	d805      	bhi.n	8004f34 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint16_t ASC)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	4608      	mov	r0, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4603      	mov	r3, r0
 8004f50:	70fb      	strb	r3, [r7, #3]
 8004f52:	460b      	mov	r3, r1
 8004f54:	70bb      	strb	r3, [r7, #2]
 8004f56:	4613      	mov	r3, r2
 8004f58:	803b      	strh	r3, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004f60:	60fb      	str	r3, [r7, #12]
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	3347      	adds	r3, #71	; 0x47
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	78ba      	ldrb	r2, [r7, #2]
 8004f72:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC;// << 8;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8004f7a:	883a      	ldrh	r2, [r7, #0]
 8004f7c:	68f9      	ldr	r1, [r7, #12]
 8004f7e:	3347      	adds	r3, #71	; 0x47
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	440b      	add	r3, r1
 8004f84:	609a      	str	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d103      	bne.n	8004fa8 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b087      	sub	sp, #28
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004fc6:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	815a      	strh	r2, [r3, #10]
  return 0;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr

08004fda <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b086      	sub	sp, #24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004fee:	617b      	str	r3, [r7, #20]
  
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	7a1b      	ldrb	r3, [r3, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f040 8083 	bne.w	8005100 <SCSI_Read10+0x126>
  {
    
    /* case 10 : Ho <> Di */
    
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8005000:	b25b      	sxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	db0a      	blt.n	800501c <SCSI_Read10+0x42>
    {
      SCSI_SenseCode(pdev,
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800500c:	2320      	movs	r3, #32
 800500e:	2205      	movs	r2, #5
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7ff ff95 	bl	8004f40 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	e07b      	b.n	8005114 <SCSI_Read10+0x13a>
    }    
    
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	7afa      	ldrb	r2, [r7, #11]
 8005026:	4610      	mov	r0, r2
 8005028:	4798      	blx	r3
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev,
 8005030:	7af9      	ldrb	r1, [r7, #11]
 8005032:	233a      	movs	r3, #58	; 0x3a
 8005034:	2202      	movs	r2, #2
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f7ff ff82 	bl	8004f40 <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 800503c:	f04f 33ff 	mov.w	r3, #4294967295
 8005040:	e068      	b.n	8005114 <SCSI_Read10+0x13a>
    } 
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3302      	adds	r3, #2
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3303      	adds	r3, #3
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8005052:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 800505c:	4313      	orrs	r3, r2
          params[5];
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	3205      	adds	r2, #5
 8005062:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 8005064:	4313      	orrs	r3, r2
 8005066:	461a      	mov	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3307      	adds	r3, #7
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	021b      	lsls	r3, r3, #8
      params[8];  
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	3208      	adds	r2, #8
 800507a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800507c:	4313      	orrs	r3, r2
 800507e:	461a      	mov	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    
    
    
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005092:	b29b      	uxth	r3, r3
 8005094:	7af9      	ldrb	r1, [r7, #11]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f936 	bl	8005308 <SCSI_CheckAddressRange>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	da02      	bge.n	80050a8 <SCSI_Read10+0xce>
    {
      return -1; /* error */
 80050a2:	f04f 33ff 	mov.w	r3, #4294967295
 80050a6:	e035      	b.n	8005114 <SCSI_Read10+0x13a>
    }
    
    hmsc->bot_state = USBD_BOT_DATA_IN;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2202      	movs	r2, #2
 80050ac:	721a      	strb	r2, [r3, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80050ba:	fb02 f203 	mul.w	r2, r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80050d0:	fb02 f203 	mul.w	r2, r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    
    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d00a      	beq.n	8005100 <SCSI_Read10+0x126>
    {
      SCSI_SenseCode(pdev,
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80050f0:	2320      	movs	r3, #32
 80050f2:	2205      	movs	r2, #5
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff ff23 	bl	8004f40 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 80050fa:	f04f 33ff 	mov.w	r3, #4294967295
 80050fe:	e009      	b.n	8005114 <SCSI_Read10+0x13a>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005106:	815a      	strh	r2, [r3, #10]
  
  return SCSI_ProcessRead(pdev, lun);
 8005108:	7afb      	ldrb	r3, [r7, #11]
 800510a:	4619      	mov	r1, r3
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f91f 	bl	8005350 <SCSI_ProcessRead>
 8005112:	4603      	mov	r3, r0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	460b      	mov	r3, r1
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005130:	617b      	str	r3, [r7, #20]
  
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	7a1b      	ldrb	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 80a8 	bne.w	800528c <SCSI_Write10+0x170>
  {
    
    /* case 8 : Hi <> Do */
    
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8005142:	b25b      	sxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	da0a      	bge.n	800515e <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev,
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800514e:	2320      	movs	r3, #32
 8005150:	2205      	movs	r2, #5
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff fef4 	bl	8004f40 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	e09c      	b.n	8005298 <SCSI_Write10+0x17c>
    }
    
    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	7afa      	ldrb	r2, [r7, #11]
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev,
 8005172:	7af9      	ldrb	r1, [r7, #11]
 8005174:	233a      	movs	r3, #58	; 0x3a
 8005176:	2202      	movs	r2, #2
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff fee1 	bl	8004f40 <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	e089      	b.n	8005298 <SCSI_Write10+0x17c>
    } 
    
    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	7afa      	ldrb	r2, [r7, #11]
 800518e:	4610      	mov	r0, r2
 8005190:	4798      	blx	r3
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev,
 8005198:	7af9      	ldrb	r1, [r7, #11]
 800519a:	2327      	movs	r3, #39	; 0x27
 800519c:	2202      	movs	r2, #2
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff fece 	bl	8004f40 <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     WRITE_PROTECTED);
      return -1;
 80051a4:	f04f 33ff 	mov.w	r3, #4294967295
 80051a8:	e076      	b.n	8005298 <SCSI_Write10+0x17c>
    } 
    
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3302      	adds	r3, #2
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3303      	adds	r3, #3
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80051ba:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 80051c4:	4313      	orrs	r3, r2
          params[5];
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	3205      	adds	r2, #5
 80051ca:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 80051cc:	4313      	orrs	r3, r2
 80051ce:	461a      	mov	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3307      	adds	r3, #7
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
      params[8];  
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	3208      	adds	r2, #8
 80051e2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80051e4:	4313      	orrs	r3, r2
 80051e6:	461a      	mov	r2, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    
    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev,
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                              lun,
                              hmsc->scsi_blk_addr,
                              hmsc->scsi_blk_len) < 0)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
    if(SCSI_CheckAddressRange(pdev,
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	7af9      	ldrb	r1, [r7, #11]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f882 	bl	8005308 <SCSI_CheckAddressRange>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	da02      	bge.n	8005210 <SCSI_Write10+0xf4>
    {
      return -1; /* error */      
 800520a:	f04f 33ff 	mov.w	r3, #4294967295
 800520e:	e043      	b.n	8005298 <SCSI_Write10+0x17c>
    }
    
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800521c:	fb02 f203 	mul.w	r2, r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8005232:	fb02 f203 	mul.w	r2, r2, r3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    
    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005248:	429a      	cmp	r2, r3
 800524a:	d00a      	beq.n	8005262 <SCSI_Write10+0x146>
    {
      SCSI_SenseCode(pdev,
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005252:	2320      	movs	r3, #32
 8005254:	2205      	movs	r2, #5
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff fe72 	bl	8004f40 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 800525c:	f04f 33ff 	mov.w	r3, #4294967295
 8005260:	e01a      	b.n	8005298 <SCSI_Write10+0x17c>
    }
    
    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2201      	movs	r2, #1
 8005266:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      hmsc->bot_data, 
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f103 020c 	add.w	r2, r3, #12
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005278:	bf28      	it	cs
 800527a:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 800527e:	b29b      	uxth	r3, r3
 8005280:	2101      	movs	r1, #1
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f001 fd36 	bl	8006cf4 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8005288:	2300      	movs	r3, #0
 800528a:	e005      	b.n	8005298 <SCSI_Write10+0x17c>
    return SCSI_ProcessWrite(pdev, lun);
 800528c:	7afb      	ldrb	r3, [r7, #11]
 800528e:	4619      	mov	r1, r3
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f8c2 	bl	800541a <SCSI_ProcessWrite>
 8005296:	4603      	mov	r3, r0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	460b      	mov	r3, r1
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80052b4:	617b      	str	r3, [r7, #20]
  
  if ((params[1]& 0x02) == 0x02) 
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3301      	adds	r3, #1
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode (pdev,
 80052c4:	7af9      	ldrb	r1, [r7, #11]
 80052c6:	2324      	movs	r3, #36	; 0x24
 80052c8:	2205      	movs	r2, #5
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fe38 	bl	8004f40 <SCSI_SenseCode>
                    lun, 
                    ILLEGAL_REQUEST, 
                    INVALID_FIELED_IN_COMMAND);
    return -1; /* Error, Verify Mode Not supported*/
 80052d0:	f04f 33ff 	mov.w	r3, #4294967295
 80052d4:	e014      	b.n	8005300 <SCSI_Verify10+0x60>
  }
  
  if(SCSI_CheckAddressRange(pdev,
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                            lun, 
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
  if(SCSI_CheckAddressRange(pdev,
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	7af9      	ldrb	r1, [r7, #11]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f80e 	bl	8005308 <SCSI_CheckAddressRange>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da02      	bge.n	80052f8 <SCSI_Verify10+0x58>
  {
    return -1; /* error */      
 80052f2:	f04f 33ff 	mov.w	r3, #4294967295
 80052f6:	e003      	b.n	8005300 <SCSI_Verify10+0x60>
  }
  hmsc->bot_data_length = 0;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2200      	movs	r2, #0
 80052fc:	815a      	strh	r2, [r3, #10]
  return 0;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	607a      	str	r2, [r7, #4]
 8005312:	461a      	mov	r2, r3
 8005314:	460b      	mov	r3, r1
 8005316:	72fb      	strb	r3, [r7, #11]
 8005318:	4613      	mov	r3, r2
 800531a:	813b      	strh	r3, [r7, #8]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005322:	617b      	str	r3, [r7, #20]
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8005324:	893a      	ldrh	r2, [r7, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	441a      	add	r2, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005330:	429a      	cmp	r2, r3
 8005332:	d908      	bls.n	8005346 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev,
 8005334:	7af9      	ldrb	r1, [r7, #11]
 8005336:	2321      	movs	r3, #33	; 0x21
 8005338:	2205      	movs	r2, #5
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff fe00 	bl	8004f40 <SCSI_SenseCode>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
 8005340:	f04f 33ff 	mov.w	r3, #4294967295
 8005344:	e000      	b.n	8005348 <SCSI_CheckAddressRange+0x40>
  }
  return 0;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005362:	60fb      	str	r3, [r7, #12]
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800536a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536e:	bf28      	it	cs
 8005370:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005374:	60bb      	str	r3, [r7, #8]
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800537c:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data, 
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f103 010c 	add.w	r1, r3, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8005390:	fbb3 f2f2 	udiv	r2, r3, r2
                              len / hmsc->scsi_blk_size) < 0)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800539a:	4618      	mov	r0, r3
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	fbb3 f3f0 	udiv	r3, r3, r0
 80053a2:	78f8      	ldrb	r0, [r7, #3]
 80053a4:	47a0      	blx	r4
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	da08      	bge.n	80053be <SCSI_ProcessRead+0x6e>
  {
    
    SCSI_SenseCode(pdev,
 80053ac:	78f9      	ldrb	r1, [r7, #3]
 80053ae:	2311      	movs	r3, #17
 80053b0:	2204      	movs	r2, #4
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fdc4 	bl	8004f40 <SCSI_SenseCode>
                   lun, 
                   HARDWARE_ERROR, 
                   UNRECOVERED_READ_ERROR);
    return -1; 
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295
 80053bc:	e029      	b.n	8005412 <SCSI_ProcessRead+0xc2>
  }
  
  
  USBD_LL_Transmit (pdev, 
             MSC_EPIN_ADDR,
             hmsc->bot_data,
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f103 020c 	add.w	r2, r3, #12
  USBD_LL_Transmit (pdev, 
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2181      	movs	r1, #129	; 0x81
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 fc58 	bl	8006c80 <USBD_LL_Transmit>
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	441a      	add	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1ad2      	subs	r2, r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	1ad2      	subs	r2, r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <SCSI_ProcessRead+0xc0>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2203      	movs	r2, #3
 800540e:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	bd90      	pop	{r4, r7, pc}

0800541a <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800541a:	b590      	push	{r4, r7, lr}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	70fb      	strb	r3, [r7, #3]
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800542c:	60fb      	str	r3, [r7, #12]
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005438:	bf28      	it	cs
 800543a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800543e:	60bb      	str	r3, [r7, #8]
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005446:	695c      	ldr	r4, [r3, #20]
                              hmsc->bot_data, 
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f103 010c 	add.w	r1, r3, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800545a:	fbb3 f2f2 	udiv	r2, r3, r2
                              len / hmsc->scsi_blk_size) < 0)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005464:	4618      	mov	r0, r3
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	fbb3 f3f0 	udiv	r3, r3, r0
 800546c:	78f8      	ldrb	r0, [r7, #3]
 800546e:	47a0      	blx	r4
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	da08      	bge.n	8005488 <SCSI_ProcessWrite+0x6e>
  {
    SCSI_SenseCode(pdev,
 8005476:	78f9      	ldrb	r1, [r7, #3]
 8005478:	2303      	movs	r3, #3
 800547a:	2204      	movs	r2, #4
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fd5f 	bl	8004f40 <SCSI_SenseCode>
                   lun, 
                   HARDWARE_ERROR, 
                   WRITE_FAULT);     
    return -1; 
 8005482:	f04f 33ff 	mov.w	r3, #4294967295
 8005486:	e032      	b.n	80054ee <SCSI_ProcessWrite+0xd4>
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	441a      	add	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	1ad2      	subs	r2, r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <SCSI_ProcessWrite+0xb2>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 80054c2:	2100      	movs	r1, #0
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff f967 	bl	8004798 <MSC_BOT_SendCSW>
 80054ca:	e00f      	b.n	80054ec <SCSI_ProcessWrite+0xd2>
  else
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f103 020c 	add.w	r2, r3, #12
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80054d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054dc:	bf28      	it	cs
 80054de:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2101      	movs	r1, #1
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f001 fc04 	bl	8006cf4 <USBD_LL_PrepareReceive>
  }
  
  return 0;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd90      	pop	{r4, r7, pc}

080054f6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	4613      	mov	r3, r2
 8005502:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800550a:	2302      	movs	r3, #2
 800550c:	e01a      	b.n	8005544 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	79fa      	ldrb	r2, [r7, #7]
 800553a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f001 f9a3 	bl	8006888 <USBD_LL_Init>
  
  return USBD_OK; 
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	73fb      	strb	r3, [r7, #15]
 800556c:	e001      	b.n	8005572 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800556e:	2302      	movs	r3, #2
 8005570:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f001 f9d6 	bl	8006938 <USBD_LL_Start>
  
  return USBD_OK;  
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80055b6:	2302      	movs	r3, #2
 80055b8:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00c      	beq.n	80055de <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	4611      	mov	r1, r2
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 80055de:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	4611      	mov	r1, r2
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
  return USBD_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fd5a 	bl	80060da <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	2b01      	cmp	r3, #1
 8005648:	d00b      	beq.n	8005662 <USBD_LL_SetupStage+0x54>
 800564a:	2b02      	cmp	r3, #2
 800564c:	d011      	beq.n	8005672 <USBD_LL_SetupStage+0x64>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d117      	bne.n	8005682 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f988 	bl	8005970 <USBD_StdDevReq>
    break;
 8005660:	e01a      	b.n	8005698 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f9d0 	bl	8005a10 <USBD_StdItfReq>
    break;
 8005670:	e012      	b.n	8005698 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f9fb 	bl	8005a76 <USBD_StdEPReq>
    break;
 8005680:	e00a      	b.n	8005698 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005688:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800568c:	b2db      	uxtb	r3, r3
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 fa2d 	bl	8006af0 <USBD_LL_StallEP>
    break;
 8005696:	bf00      	nop
  }  
  return USBD_OK;  
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	460b      	mov	r3, r1
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80056b0:	7afb      	ldrb	r3, [r7, #11]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d138      	bne.n	8005728 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80056bc:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d142      	bne.n	800574e <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d914      	bls.n	80056fe <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	1ad2      	subs	r2, r2, r3
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	4293      	cmp	r3, r2
 80056ec:	bf28      	it	cs
 80056ee:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fdc4 	bl	8006284 <USBD_CtlContinueRx>
 80056fc:	e027      	b.n	800574e <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005710:	2b03      	cmp	r3, #3
 8005712:	d105      	bne.n	8005720 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fdc1 	bl	80062a8 <USBD_CtlSendStatus>
 8005726:	e012      	b.n	800574e <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00c      	beq.n	800574e <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800573a:	2b03      	cmp	r3, #3
 800573c:	d107      	bne.n	800574e <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	7afa      	ldrb	r2, [r7, #11]
 8005748:	4611      	mov	r1, r2
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	4798      	blx	r3
  }  
  return USBD_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	460b      	mov	r3, r1
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d16c      	bne.n	8005846 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3314      	adds	r3, #20
 8005770:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005778:	2b02      	cmp	r3, #2
 800577a:	d157      	bne.n	800582c <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	429a      	cmp	r2, r3
 8005786:	d915      	bls.n	80057b4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	1ad2      	subs	r2, r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fd5d 	bl	8006260 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80057a6:	2300      	movs	r3, #0
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f001 faa1 	bl	8006cf4 <USBD_LL_PrepareReceive>
 80057b2:	e03b      	b.n	800582c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	68d2      	ldr	r2, [r2, #12]
 80057bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80057c0:	fb02 f201 	mul.w	r2, r2, r1
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d11c      	bne.n	8005804 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d316      	bcc.n	8005804 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d20f      	bcs.n	8005804 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80057e4:	2200      	movs	r2, #0
 80057e6:	2100      	movs	r1, #0
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fd39 	bl	8006260 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80057f6:	2300      	movs	r3, #0
 80057f8:	2200      	movs	r2, #0
 80057fa:	2100      	movs	r1, #0
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f001 fa79 	bl	8006cf4 <USBD_LL_PrepareReceive>
 8005802:	e013      	b.n	800582c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005816:	2b03      	cmp	r3, #3
 8005818:	d105      	bne.n	8005826 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fd51 	bl	80062ce <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005832:	2b01      	cmp	r3, #1
 8005834:	d11a      	bne.n	800586c <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff fead 	bl	8005596 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005844:	e012      	b.n	800586c <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8005858:	2b03      	cmp	r3, #3
 800585a:	d107      	bne.n	800586c <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	7afa      	ldrb	r2, [r7, #11]
 8005866:	4611      	mov	r1, r2
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	4798      	blx	r3
  }  
  return USBD_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	2200      	movs	r2, #0
 8005882:	2100      	movs	r1, #0
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 f889 	bl	800699c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2240      	movs	r2, #64	; 0x40
 800588e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005892:	2340      	movs	r3, #64	; 0x40
 8005894:	2200      	movs	r2, #0
 8005896:	2180      	movs	r1, #128	; 0x80
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 f87f 	bl	800699c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2240      	movs	r2, #64	; 0x40
 80058a2:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6852      	ldr	r2, [r2, #4]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	4611      	mov	r1, r2
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
 
  
  return USBD_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	78fa      	ldrb	r2, [r7, #3]
 80058e4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2204      	movs	r2, #4
 800590a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr

0800593a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005948:	2b03      	cmp	r3, #3
 800594a:	d10b      	bne.n	8005964 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	2b09      	cmp	r3, #9
 8005984:	d839      	bhi.n	80059fa <USBD_StdDevReq+0x8a>
 8005986:	a201      	add	r2, pc, #4	; (adr r2, 800598c <USBD_StdDevReq+0x1c>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059dd 	.word	0x080059dd
 8005990:	080059f1 	.word	0x080059f1
 8005994:	080059fb 	.word	0x080059fb
 8005998:	080059e7 	.word	0x080059e7
 800599c:	080059fb 	.word	0x080059fb
 80059a0:	080059bf 	.word	0x080059bf
 80059a4:	080059b5 	.word	0x080059b5
 80059a8:	080059fb 	.word	0x080059fb
 80059ac:	080059d3 	.word	0x080059d3
 80059b0:	080059c9 	.word	0x080059c9
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f936 	bl	8005c28 <USBD_GetDescriptor>
    break;
 80059bc:	e022      	b.n	8005a04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fa25 	bl	8005e10 <USBD_SetAddress>
    break;
 80059c6:	e01d      	b.n	8005a04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa5e 	bl	8005e8c <USBD_SetConfig>
    break;
 80059d0:	e018      	b.n	8005a04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fae1 	bl	8005f9c <USBD_GetConfig>
    break;
 80059da:	e013      	b.n	8005a04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fb0e 	bl	8006000 <USBD_GetStatus>
    break;
 80059e4:	e00e      	b.n	8005a04 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fb33 	bl	8006054 <USBD_SetFeature>
    break;
 80059ee:	e009      	b.n	8005a04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fb49 	bl	800608a <USBD_ClrFeature>
    break;
 80059f8:	e004      	b.n	8005a04 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fba8 	bl	8006152 <USBD_CtlError>
    break;
 8005a02:	bf00      	nop
  }
  
  return ret;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop

08005a10 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d11b      	bne.n	8005a60 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	889b      	ldrh	r3, [r3, #4]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d811      	bhi.n	8005a56 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	88db      	ldrh	r3, [r3, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d110      	bne.n	8005a6a <USBD_StdItfReq+0x5a>
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10d      	bne.n	8005a6a <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fc2a 	bl	80062a8 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005a54:	e009      	b.n	8005a6a <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fb7a 	bl	8006152 <USBD_CtlError>
    break;
 8005a5e:	e004      	b.n	8005a6a <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fb75 	bl	8006152 <USBD_CtlError>
    break;
 8005a68:	e000      	b.n	8005a6c <USBD_StdItfReq+0x5c>
    break;
 8005a6a:	bf00      	nop
  }
  return USBD_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	889b      	ldrh	r3, [r3, #4]
 8005a88:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d108      	bne.n	8005aa8 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
    
    return USBD_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e0ba      	b.n	8005c1e <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d039      	beq.n	8005b24 <USBD_StdEPReq+0xae>
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d002      	beq.n	8005aba <USBD_StdEPReq+0x44>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d06b      	beq.n	8005b90 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8005ab8:	e0b0      	b.n	8005c1c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d002      	beq.n	8005aca <USBD_StdEPReq+0x54>
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d00c      	beq.n	8005ae2 <USBD_StdEPReq+0x6c>
 8005ac8:	e025      	b.n	8005b16 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005aca:	7bbb      	ldrb	r3, [r7, #14]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d027      	beq.n	8005b20 <USBD_StdEPReq+0xaa>
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	2b80      	cmp	r3, #128	; 0x80
 8005ad4:	d024      	beq.n	8005b20 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 f808 	bl	8006af0 <USBD_LL_StallEP>
      break;	
 8005ae0:	e01e      	b.n	8005b20 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	885b      	ldrh	r3, [r3, #2]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005aea:	7bbb      	ldrb	r3, [r7, #14]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d007      	beq.n	8005b00 <USBD_StdEPReq+0x8a>
 8005af0:	7bbb      	ldrb	r3, [r7, #14]
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d004      	beq.n	8005b00 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8005af6:	7bbb      	ldrb	r3, [r7, #14]
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fff8 	bl	8006af0 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fbca 	bl	80062a8 <USBD_CtlSendStatus>
      break;
 8005b14:	e005      	b.n	8005b22 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fb1a 	bl	8006152 <USBD_CtlError>
      break;    
 8005b1e:	e000      	b.n	8005b22 <USBD_StdEPReq+0xac>
      break;	
 8005b20:	bf00      	nop
    break;
 8005b22:	e07b      	b.n	8005c1c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d002      	beq.n	8005b34 <USBD_StdEPReq+0xbe>
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d00c      	beq.n	8005b4c <USBD_StdEPReq+0xd6>
 8005b32:	e024      	b.n	8005b7e <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d026      	beq.n	8005b88 <USBD_StdEPReq+0x112>
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d023      	beq.n	8005b88 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 ffd3 	bl	8006af0 <USBD_LL_StallEP>
      break;	
 8005b4a:	e01d      	b.n	8005b88 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	885b      	ldrh	r3, [r3, #2]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11b      	bne.n	8005b8c <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fffa 	bl	8006b5c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fb96 	bl	80062a8 <USBD_CtlSendStatus>
      break;
 8005b7c:	e006      	b.n	8005b8c <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fae6 	bl	8006152 <USBD_CtlError>
      break;    
 8005b86:	e002      	b.n	8005b8e <USBD_StdEPReq+0x118>
      break;	
 8005b88:	bf00      	nop
 8005b8a:	e047      	b.n	8005c1c <USBD_StdEPReq+0x1a6>
      break;
 8005b8c:	bf00      	nop
    break;
 8005b8e:	e045      	b.n	8005c1c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d002      	beq.n	8005ba0 <USBD_StdEPReq+0x12a>
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d00b      	beq.n	8005bb6 <USBD_StdEPReq+0x140>
 8005b9e:	e036      	b.n	8005c0e <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8005ba0:	7bbb      	ldrb	r3, [r7, #14]
 8005ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d036      	beq.n	8005c18 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 ff9e 	bl	8006af0 <USBD_LL_StallEP>
      break;	
 8005bb4:	e030      	b.n	8005c18 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	da08      	bge.n	8005bd0 <USBD_StdEPReq+0x15a>
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	4413      	add	r3, r2
 8005bcc:	3304      	adds	r3, #4
 8005bce:	e007      	b.n	8005be0 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005bd6:	3310      	adds	r3, #16
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	3304      	adds	r3, #4
 8005be0:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005be2:	7bbb      	ldrb	r3, [r7, #14]
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 ffee 	bl	8006bc8 <USBD_LL_IsStallEP>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	e002      	b.n	8005c00 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8005c00:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8005c02:	2202      	movs	r2, #2
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fb0e 	bl	8006228 <USBD_CtlSendData>
      break;
 8005c0c:	e005      	b.n	8005c1a <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fa9e 	bl	8006152 <USBD_CtlError>
      break;
 8005c16:	e000      	b.n	8005c1a <USBD_StdEPReq+0x1a4>
      break;	
 8005c18:	bf00      	nop
    break;
 8005c1a:	bf00      	nop
  }
  return ret;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	885b      	ldrh	r3, [r3, #2]
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	2b06      	cmp	r3, #6
 8005c3e:	f200 80c9 	bhi.w	8005dd4 <USBD_GetDescriptor+0x1ac>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <USBD_GetDescriptor+0x20>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c65 	.word	0x08005c65
 8005c4c:	08005c7d 	.word	0x08005c7d
 8005c50:	08005cbd 	.word	0x08005cbd
 8005c54:	08005dd5 	.word	0x08005dd5
 8005c58:	08005dd5 	.word	0x08005dd5
 8005c5c:	08005d81 	.word	0x08005d81
 8005c60:	08005da7 	.word	0x08005da7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	7c12      	ldrb	r2, [r2, #16]
 8005c70:	f107 010a 	add.w	r1, r7, #10
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
 8005c78:	60f8      	str	r0, [r7, #12]
    break;
 8005c7a:	e0b0      	b.n	8005dde <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	7c1b      	ldrb	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10d      	bne.n	8005ca0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	f107 020a 	add.w	r2, r7, #10
 8005c90:	4610      	mov	r0, r2
 8005c92:	4798      	blx	r3
 8005c94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005c9e:	e09e      	b.n	8005dde <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	f107 020a 	add.w	r2, r7, #10
 8005cac:	4610      	mov	r0, r2
 8005cae:	4798      	blx	r3
 8005cb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	701a      	strb	r2, [r3, #0]
    break;
 8005cba:	e090      	b.n	8005dde <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	885b      	ldrh	r3, [r3, #2]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	d856      	bhi.n	8005d74 <USBD_GetDescriptor+0x14c>
 8005cc6:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <USBD_GetDescriptor+0xa4>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005ce5 	.word	0x08005ce5
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005d15 	.word	0x08005d15
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005d45 	.word	0x08005d45
 8005ce0:	08005d5d 	.word	0x08005d5d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	7c12      	ldrb	r2, [r2, #16]
 8005cf0:	f107 010a 	add.w	r1, r7, #10
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
 8005cf8:	60f8      	str	r0, [r7, #12]
      break;
 8005cfa:	e040      	b.n	8005d7e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	7c12      	ldrb	r2, [r2, #16]
 8005d08:	f107 010a 	add.w	r1, r7, #10
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4798      	blx	r3
 8005d10:	60f8      	str	r0, [r7, #12]
      break;
 8005d12:	e034      	b.n	8005d7e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	7c12      	ldrb	r2, [r2, #16]
 8005d20:	f107 010a 	add.w	r1, r7, #10
 8005d24:	4610      	mov	r0, r2
 8005d26:	4798      	blx	r3
 8005d28:	60f8      	str	r0, [r7, #12]
      break;
 8005d2a:	e028      	b.n	8005d7e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	7c12      	ldrb	r2, [r2, #16]
 8005d38:	f107 010a 	add.w	r1, r7, #10
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
 8005d40:	60f8      	str	r0, [r7, #12]
      break;
 8005d42:	e01c      	b.n	8005d7e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	7c12      	ldrb	r2, [r2, #16]
 8005d50:	f107 010a 	add.w	r1, r7, #10
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
 8005d58:	60f8      	str	r0, [r7, #12]
      break;
 8005d5a:	e010      	b.n	8005d7e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	7c12      	ldrb	r2, [r2, #16]
 8005d68:	f107 010a 	add.w	r1, r7, #10
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
 8005d70:	60f8      	str	r0, [r7, #12]
      break;
 8005d72:	e004      	b.n	8005d7e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f9eb 	bl	8006152 <USBD_CtlError>
      return;
 8005d7c:	e044      	b.n	8005e08 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8005d7e:	e02e      	b.n	8005dde <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	7c1b      	ldrb	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d90:	f107 020a 	add.w	r2, r7, #10
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	60f8      	str	r0, [r7, #12]
      break;
 8005d9a:	e020      	b.n	8005dde <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9d7 	bl	8006152 <USBD_CtlError>
      return;
 8005da4:	e030      	b.n	8005e08 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	7c1b      	ldrb	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10d      	bne.n	8005dca <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	f107 020a 	add.w	r2, r7, #10
 8005dba:	4610      	mov	r0, r2
 8005dbc:	4798      	blx	r3
 8005dbe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	701a      	strb	r2, [r3, #0]
      break; 
 8005dc8:	e009      	b.n	8005dde <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f9c0 	bl	8006152 <USBD_CtlError>
      return;
 8005dd2:	e019      	b.n	8005e08 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f9bb 	bl	8006152 <USBD_CtlError>
    return;
 8005ddc:	e014      	b.n	8005e08 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8005dde:	897b      	ldrh	r3, [r7, #10]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d011      	beq.n	8005e08 <USBD_GetDescriptor+0x1e0>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	88db      	ldrh	r3, [r3, #6]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00d      	beq.n	8005e08 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	88da      	ldrh	r2, [r3, #6]
 8005df0:	897b      	ldrh	r3, [r7, #10]
 8005df2:	4293      	cmp	r3, r2
 8005df4:	bf28      	it	cs
 8005df6:	4613      	movcs	r3, r2
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8005dfc:	897b      	ldrh	r3, [r7, #10]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68f9      	ldr	r1, [r7, #12]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa10 	bl	8006228 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop

08005e10 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	889b      	ldrh	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d12c      	bne.n	8005e7c <USBD_SetAddress+0x6c>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	88db      	ldrh	r3, [r3, #6]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d128      	bne.n	8005e7c <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	885b      	ldrh	r3, [r3, #2]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e34:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d104      	bne.n	8005e4a <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f985 	bl	8006152 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005e48:	e01c      	b.n	8005e84 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7bfa      	ldrb	r2, [r7, #15]
 8005e4e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fedc 	bl	8006c14 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa23 	bl	80062a8 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005e70:	e008      	b.n	8005e84 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005e7a:	e003      	b.n	8005e84 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f967 	bl	8006152 <USBD_CtlError>
  } 
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	885b      	ldrh	r3, [r3, #2]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	4b3e      	ldr	r3, [pc, #248]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005e9e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005ea0:	4b3d      	ldr	r3, [pc, #244]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d904      	bls.n	8005eb2 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f951 	bl	8006152 <USBD_CtlError>
 8005eb0:	e06f      	b.n	8005f92 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d002      	beq.n	8005ec2 <USBD_SetConfig+0x36>
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d023      	beq.n	8005f08 <USBD_SetConfig+0x7c>
 8005ec0:	e062      	b.n	8005f88 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8005ec2:	4b35      	ldr	r3, [pc, #212]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01a      	beq.n	8005f00 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8005eca:	4b33      	ldr	r3, [pc, #204]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005edc:	4b2e      	ldr	r3, [pc, #184]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fb61 	bl	80055aa <USBD_SetClassConfig>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d104      	bne.n	8005ef8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f92e 	bl	8006152 <USBD_CtlError>
          return;
 8005ef6:	e04c      	b.n	8005f92 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f9d5 	bl	80062a8 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8005efe:	e048      	b.n	8005f92 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f9d1 	bl	80062a8 <USBD_CtlSendStatus>
      break;
 8005f06:	e044      	b.n	8005f92 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005f08:	4b23      	ldr	r3, [pc, #140]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d112      	bne.n	8005f36 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8005f18:	4b1f      	ldr	r3, [pc, #124]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005f22:	4b1d      	ldr	r3, [pc, #116]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff fb5d 	bl	80055e8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f9ba 	bl	80062a8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005f34:	e02d      	b.n	8005f92 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8005f36:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d01d      	beq.n	8005f80 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff fb4b 	bl	80055e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f52:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005f5c:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <USBD_SetConfig+0x10c>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fb21 	bl	80055aa <USBD_SetClassConfig>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d104      	bne.n	8005f78 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f8ee 	bl	8006152 <USBD_CtlError>
          return;
 8005f76:	e00c      	b.n	8005f92 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f995 	bl	80062a8 <USBD_CtlSendStatus>
      break;
 8005f7e:	e008      	b.n	8005f92 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f991 	bl	80062a8 <USBD_CtlSendStatus>
      break;
 8005f86:	e004      	b.n	8005f92 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8e1 	bl	8006152 <USBD_CtlError>
      break;
 8005f90:	bf00      	nop
    }
  }
}
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000124 	.word	0x20000124

08005f9c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	88db      	ldrh	r3, [r3, #6]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d004      	beq.n	8005fb8 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8ce 	bl	8006152 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8005fb6:	e01f      	b.n	8005ff8 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d002      	beq.n	8005fc8 <USBD_GetConfig+0x2c>
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d00b      	beq.n	8005fde <USBD_GetConfig+0x42>
 8005fc6:	e012      	b.n	8005fee <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f926 	bl	8006228 <USBD_CtlSendData>
      break;
 8005fdc:	e00c      	b.n	8005ff8 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f91e 	bl	8006228 <USBD_CtlSendData>
      break;
 8005fec:	e004      	b.n	8005ff8 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8ae 	bl	8006152 <USBD_CtlError>
      break;
 8005ff6:	bf00      	nop
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006010:	3b02      	subs	r3, #2
 8006012:	2b01      	cmp	r3, #1
 8006014:	d815      	bhi.n	8006042 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f043 0202 	orr.w	r2, r3, #2
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8006036:	2202      	movs	r2, #2
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8f4 	bl	8006228 <USBD_CtlSendData>
                      2);
    break;
 8006040:	e004      	b.n	800604c <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f884 	bl	8006152 <USBD_CtlError>
    break;
 800604a:	bf00      	nop
  }
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	885b      	ldrh	r3, [r3, #2]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d10d      	bne.n	8006082 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f913 	bl	80062a8 <USBD_CtlSendStatus>
  }

}
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800609a:	3b02      	subs	r3, #2
 800609c:	2b01      	cmp	r3, #1
 800609e:	d812      	bhi.n	80060c6 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	885b      	ldrh	r3, [r3, #2]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d113      	bne.n	80060d0 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f8f2 	bl	80062a8 <USBD_CtlSendStatus>
    }
    break;
 80060c4:	e004      	b.n	80060d0 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f842 	bl	8006152 <USBD_CtlError>
    break;
 80060ce:	e000      	b.n	80060d2 <USBD_ClrFeature+0x48>
    break;
 80060d0:	bf00      	nop
  }
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781a      	ldrb	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	785a      	ldrb	r2, [r3, #1]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	3302      	adds	r3, #2
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3303      	adds	r3, #3
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	021b      	lsls	r3, r3, #8
 8006106:	b29b      	uxth	r3, r3
 8006108:	4413      	add	r3, r2
 800610a:	b29a      	uxth	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	3304      	adds	r3, #4
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	b29a      	uxth	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	3305      	adds	r3, #5
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	b29b      	uxth	r3, r3
 8006124:	4413      	add	r3, r2
 8006126:	b29a      	uxth	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	3306      	adds	r3, #6
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	b29a      	uxth	r2, r3
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	3307      	adds	r3, #7
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	b29b      	uxth	r3, r3
 8006140:	4413      	add	r3, r2
 8006142:	b29a      	uxth	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	80da      	strh	r2, [r3, #6]

}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	bc80      	pop	{r7}
 8006150:	4770      	bx	lr

08006152 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800615c:	2180      	movs	r1, #128	; 0x80
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fcc6 	bl	8006af0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006164:	2100      	movs	r1, #0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fcc2 	bl	8006af0 <USBD_LL_StallEP>
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d033      	beq.n	80061f2 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f835 	bl	80061fa <USBD_GetLen>
 8006190:	4603      	mov	r3, r0
 8006192:	3301      	adds	r3, #1
 8006194:	b29b      	uxth	r3, r3
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	75fa      	strb	r2, [r7, #23]
 80061a4:	461a      	mov	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4413      	add	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	8812      	ldrh	r2, [r2, #0]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	75fa      	strb	r2, [r7, #23]
 80061b8:	461a      	mov	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4413      	add	r3, r2
 80061be:	2203      	movs	r2, #3
 80061c0:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80061c2:	e012      	b.n	80061ea <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	75fa      	strb	r2, [r7, #23]
 80061ca:	461a      	mov	r2, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	441a      	add	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	1c59      	adds	r1, r3, #1
 80061d4:	60f9      	str	r1, [r7, #12]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	75fa      	strb	r2, [r7, #23]
 80061e0:	461a      	mov	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4413      	add	r3, r2
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e8      	bne.n	80061c4 <USBD_GetString+0x50>
    }
  } 
}
 80061f2:	bf00      	nop
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8006206:	e005      	b.n	8006214 <USBD_GetLen+0x1a>
    {
        len++;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	3301      	adds	r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
        buf++;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3301      	adds	r3, #1
 8006212:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f5      	bne.n	8006208 <USBD_GetLen+0xe>
    }

    return len;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr

08006228 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	4613      	mov	r3, r2
 8006234:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2202      	movs	r2, #2
 800623a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800623e:	88fa      	ldrh	r2, [r7, #6]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	2100      	movs	r1, #0
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fd15 	bl	8006c80 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	2100      	movs	r1, #0
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fd03 	bl	8006c80 <USBD_LL_Transmit>
  
  return USBD_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8006292:	88fb      	ldrh	r3, [r7, #6]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	2100      	movs	r1, #0
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fd2b 	bl	8006cf4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2204      	movs	r2, #4
 80062b4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80062b8:	2300      	movs	r3, #0
 80062ba:	2200      	movs	r2, #0
 80062bc:	2100      	movs	r1, #0
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fcde 	bl	8006c80 <USBD_LL_Transmit>
  
  return USBD_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2205      	movs	r2, #5
 80062da:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80062de:	2300      	movs	r3, #0
 80062e0:	2200      	movs	r2, #0
 80062e2:	2100      	movs	r1, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fd05 	bl	8006cf4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062f8:	f7fa ff28 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062fc:	f000 f808 	bl	8006310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006300:	f000 f880 	bl	8006404 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8006304:	f000 f9e4 	bl	80066d0 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8006308:	f000 f864 	bl	80063d4 <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800630c:	e7fe      	b.n	800630c <main+0x18>
	...

08006310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b094      	sub	sp, #80	; 0x50
 8006314:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006316:	2301      	movs	r3, #1
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800631a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006320:	2300      	movs	r3, #0
 8006322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006324:	2301      	movs	r3, #1
 8006326:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006328:	2302      	movs	r3, #2
 800632a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800632c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006330:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006332:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006336:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800633c:	4618      	mov	r0, r3
 800633e:	f7fc f99d 	bl	800267c <HAL_RCC_OscConfig>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006348:	2197      	movs	r1, #151	; 0x97
 800634a:	4820      	ldr	r0, [pc, #128]	; (80063cc <SystemClock_Config+0xbc>)
 800634c:	f000 f8c8 	bl	80064e0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006350:	230f      	movs	r3, #15
 8006352:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006354:	2302      	movs	r3, #2
 8006356:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006358:	2300      	movs	r3, #0
 800635a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800635c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006360:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006362:	2300      	movs	r3, #0
 8006364:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006366:	f107 0314 	add.w	r3, r7, #20
 800636a:	2102      	movs	r1, #2
 800636c:	4618      	mov	r0, r3
 800636e:	f7fc fbe9 	bl	8002b44 <HAL_RCC_ClockConfig>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <SystemClock_Config+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006378:	21a5      	movs	r1, #165	; 0xa5
 800637a:	4814      	ldr	r0, [pc, #80]	; (80063cc <SystemClock_Config+0xbc>)
 800637c:	f000 f8b0 	bl	80064e0 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006380:	2310      	movs	r3, #16
 8006382:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006388:	1d3b      	adds	r3, r7, #4
 800638a:	4618      	mov	r0, r3
 800638c:	f7fc fd58 	bl	8002e40 <HAL_RCCEx_PeriphCLKConfig>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <SystemClock_Config+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006396:	21ac      	movs	r1, #172	; 0xac
 8006398:	480c      	ldr	r0, [pc, #48]	; (80063cc <SystemClock_Config+0xbc>)
 800639a:	f000 f8a1 	bl	80064e0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800639e:	f7fc fd27 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 80063a2:	4602      	mov	r2, r0
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <SystemClock_Config+0xc0>)
 80063a6:	fba3 2302 	umull	r2, r3, r3, r2
 80063aa:	099b      	lsrs	r3, r3, #6
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fb f82a 	bl	8001406 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80063b2:	2004      	movs	r0, #4
 80063b4:	f7fb f834 	bl	8001420 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80063b8:	2200      	movs	r2, #0
 80063ba:	2100      	movs	r1, #0
 80063bc:	f04f 30ff 	mov.w	r0, #4294967295
 80063c0:	f7fa fff7 	bl	80013b2 <HAL_NVIC_SetPriority>
}
 80063c4:	bf00      	nop
 80063c6:	3750      	adds	r7, #80	; 0x50
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	0800795c 	.word	0x0800795c
 80063d0:	10624dd3 	.word	0x10624dd3

080063d4 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80063d8:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <MX_CRC_Init+0x24>)
 80063da:	4a08      	ldr	r2, [pc, #32]	; (80063fc <MX_CRC_Init+0x28>)
 80063dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80063de:	4806      	ldr	r0, [pc, #24]	; (80063f8 <MX_CRC_Init+0x24>)
 80063e0:	f7fb f83a 	bl	8001458 <HAL_CRC_Init>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <MX_CRC_Init+0x1e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80063ea:	21c2      	movs	r1, #194	; 0xc2
 80063ec:	4804      	ldr	r0, [pc, #16]	; (8006400 <MX_CRC_Init+0x2c>)
 80063ee:	f000 f877 	bl	80064e0 <_Error_Handler>
  }

}
 80063f2:	bf00      	nop
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	2000039c 	.word	0x2000039c
 80063fc:	40023000 	.word	0x40023000
 8006400:	0800795c 	.word	0x0800795c

08006404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800640a:	4a31      	ldr	r2, [pc, #196]	; (80064d0 <MX_GPIO_Init+0xcc>)
 800640c:	4b30      	ldr	r3, [pc, #192]	; (80064d0 <MX_GPIO_Init+0xcc>)
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f043 0310 	orr.w	r3, r3, #16
 8006414:	6193      	str	r3, [r2, #24]
 8006416:	4b2e      	ldr	r3, [pc, #184]	; (80064d0 <MX_GPIO_Init+0xcc>)
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006422:	4a2b      	ldr	r2, [pc, #172]	; (80064d0 <MX_GPIO_Init+0xcc>)
 8006424:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <MX_GPIO_Init+0xcc>)
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f043 0320 	orr.w	r3, r3, #32
 800642c:	6193      	str	r3, [r2, #24]
 800642e:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <MX_GPIO_Init+0xcc>)
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	60bb      	str	r3, [r7, #8]
 8006438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800643a:	4a25      	ldr	r2, [pc, #148]	; (80064d0 <MX_GPIO_Init+0xcc>)
 800643c:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <MX_GPIO_Init+0xcc>)
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	f043 0304 	orr.w	r3, r3, #4
 8006444:	6193      	str	r3, [r2, #24]
 8006446:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <MX_GPIO_Init+0xcc>)
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006452:	4a1f      	ldr	r2, [pc, #124]	; (80064d0 <MX_GPIO_Init+0xcc>)
 8006454:	4b1e      	ldr	r3, [pc, #120]	; (80064d0 <MX_GPIO_Init+0xcc>)
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f043 0308 	orr.w	r3, r3, #8
 800645c:	6193      	str	r3, [r2, #24]
 800645e:	4b1c      	ldr	r3, [pc, #112]	; (80064d0 <MX_GPIO_Init+0xcc>)
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800646a:	2201      	movs	r2, #1
 800646c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006470:	4818      	ldr	r0, [pc, #96]	; (80064d4 <MX_GPIO_Init+0xd0>)
 8006472:	f7fb f96b 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800647a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800647c:	2311      	movs	r3, #17
 800647e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006484:	2303      	movs	r3, #3
 8006486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006488:	f107 0310 	add.w	r3, r7, #16
 800648c:	4619      	mov	r1, r3
 800648e:	4811      	ldr	r0, [pc, #68]	; (80064d4 <MX_GPIO_Init+0xd0>)
 8006490:	f7fa fffe 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA13 
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006494:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8006498:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064a2:	f107 0310 	add.w	r3, r7, #16
 80064a6:	4619      	mov	r1, r3
 80064a8:	480b      	ldr	r0, [pc, #44]	; (80064d8 <MX_GPIO_Init+0xd4>)
 80064aa:	f7fa fff1 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80064ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064b2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064bc:	f107 0310 	add.w	r3, r7, #16
 80064c0:	4619      	mov	r1, r3
 80064c2:	4806      	ldr	r0, [pc, #24]	; (80064dc <MX_GPIO_Init+0xd8>)
 80064c4:	f7fa ffe4 	bl	8001490 <HAL_GPIO_Init>

}
 80064c8:	bf00      	nop
 80064ca:	3720      	adds	r7, #32
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40021000 	.word	0x40021000
 80064d4:	40011000 	.word	0x40011000
 80064d8:	40010800 	.word	0x40010800
 80064dc:	40010c00 	.word	0x40010c00

080064e0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80064ea:	e7fe      	b.n	80064ea <_Error_Handler+0xa>

080064ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80064f2:	4a2b      	ldr	r2, [pc, #172]	; (80065a0 <HAL_MspInit+0xb4>)
 80064f4:	4b2a      	ldr	r3, [pc, #168]	; (80065a0 <HAL_MspInit+0xb4>)
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	6193      	str	r3, [r2, #24]
 80064fe:	4b28      	ldr	r3, [pc, #160]	; (80065a0 <HAL_MspInit+0xb4>)
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800650a:	4a25      	ldr	r2, [pc, #148]	; (80065a0 <HAL_MspInit+0xb4>)
 800650c:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <HAL_MspInit+0xb4>)
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006514:	61d3      	str	r3, [r2, #28]
 8006516:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <HAL_MspInit+0xb4>)
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006522:	2003      	movs	r0, #3
 8006524:	f7fa ff3a 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006528:	2200      	movs	r2, #0
 800652a:	2100      	movs	r1, #0
 800652c:	f06f 000b 	mvn.w	r0, #11
 8006530:	f7fa ff3f 	bl	80013b2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006534:	2200      	movs	r2, #0
 8006536:	2100      	movs	r1, #0
 8006538:	f06f 000a 	mvn.w	r0, #10
 800653c:	f7fa ff39 	bl	80013b2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006540:	2200      	movs	r2, #0
 8006542:	2100      	movs	r1, #0
 8006544:	f06f 0009 	mvn.w	r0, #9
 8006548:	f7fa ff33 	bl	80013b2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800654c:	2200      	movs	r2, #0
 800654e:	2100      	movs	r1, #0
 8006550:	f06f 0004 	mvn.w	r0, #4
 8006554:	f7fa ff2d 	bl	80013b2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006558:	2200      	movs	r2, #0
 800655a:	2100      	movs	r1, #0
 800655c:	f06f 0003 	mvn.w	r0, #3
 8006560:	f7fa ff27 	bl	80013b2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006564:	2200      	movs	r2, #0
 8006566:	2100      	movs	r1, #0
 8006568:	f06f 0001 	mvn.w	r0, #1
 800656c:	f7fa ff21 	bl	80013b2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006570:	2200      	movs	r2, #0
 8006572:	2100      	movs	r1, #0
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	f7fa ff1b 	bl	80013b2 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800657c:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <HAL_MspInit+0xb8>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	4a04      	ldr	r2, [pc, #16]	; (80065a4 <HAL_MspInit+0xb8>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40021000 	.word	0x40021000
 80065a4:	40010000 	.word	0x40010000

080065a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a09      	ldr	r2, [pc, #36]	; (80065dc <HAL_CRC_MspInit+0x34>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10b      	bne.n	80065d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80065ba:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <HAL_CRC_MspInit+0x38>)
 80065bc:	4b08      	ldr	r3, [pc, #32]	; (80065e0 <HAL_CRC_MspInit+0x38>)
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c4:	6153      	str	r3, [r2, #20]
 80065c6:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <HAL_CRC_MspInit+0x38>)
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr
 80065dc:	40023000 	.word	0x40023000
 80065e0:	40021000 	.word	0x40021000

080065e4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80065e8:	bf00      	nop
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr

080065f0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065f4:	e7fe      	b.n	80065f4 <HardFault_Handler+0x4>

080065f6 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80065f6:	b480      	push	{r7}
 80065f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065fa:	e7fe      	b.n	80065fa <MemManage_Handler+0x4>

080065fc <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006600:	e7fe      	b.n	8006600 <BusFault_Handler+0x4>

08006602 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006602:	b480      	push	{r7}
 8006604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006606:	e7fe      	b.n	8006606 <UsageFault_Handler+0x4>

08006608 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800660c:	bf00      	nop
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr

08006614 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006618:	bf00      	nop
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <systick_nul>:

/**
* @brief This function handles System tick timer.
*/

void systick_nul (void) {};
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
 8006630:	bf00      	nop
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <SysTick_Handler>:
t_systick application_systick = systick_nul;
void SysTick_Handler(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800663c:	f7fa fdcc 	bl	80011d8 <HAL_IncTick>
  application_systick();
 8006640:	4b02      	ldr	r3, [pc, #8]	; (800664c <SysTick_Handler+0x14>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4798      	blx	r3
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200000ac 	.word	0x200000ac

08006650 <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006654:	4802      	ldr	r0, [pc, #8]	; (8006660 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006656:	f7fb f991 	bl	800197c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800665a:	bf00      	nop
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	200005c8 	.word	0x200005c8

08006664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006668:	4a15      	ldr	r2, [pc, #84]	; (80066c0 <SystemInit+0x5c>)
 800666a:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <SystemInit+0x5c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006674:	4912      	ldr	r1, [pc, #72]	; (80066c0 <SystemInit+0x5c>)
 8006676:	4b12      	ldr	r3, [pc, #72]	; (80066c0 <SystemInit+0x5c>)
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <SystemInit+0x60>)
 800667c:	4013      	ands	r3, r2
 800667e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006680:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <SystemInit+0x5c>)
 8006682:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <SystemInit+0x5c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800668a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800668e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006690:	4a0b      	ldr	r2, [pc, #44]	; (80066c0 <SystemInit+0x5c>)
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <SystemInit+0x5c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800669a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800669c:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <SystemInit+0x5c>)
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <SystemInit+0x5c>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80066a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <SystemInit+0x5c>)
 80066aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80066ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80066b0:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <SystemInit+0x64>)
 80066b2:	4a06      	ldr	r2, [pc, #24]	; (80066cc <SystemInit+0x68>)
 80066b4:	609a      	str	r2, [r3, #8]
#endif 
}
 80066b6:	bf00      	nop
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40021000 	.word	0x40021000
 80066c4:	f8ff0000 	.word	0xf8ff0000
 80066c8:	e000ed00 	.word	0xe000ed00
 80066cc:	08001000 	.word	0x08001000

080066d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80066d4:	2200      	movs	r2, #0
 80066d6:	4908      	ldr	r1, [pc, #32]	; (80066f8 <MX_USB_DEVICE_Init+0x28>)
 80066d8:	4808      	ldr	r0, [pc, #32]	; (80066fc <MX_USB_DEVICE_Init+0x2c>)
 80066da:	f7fe ff0c 	bl	80054f6 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
 80066de:	4908      	ldr	r1, [pc, #32]	; (8006700 <MX_USB_DEVICE_Init+0x30>)
 80066e0:	4806      	ldr	r0, [pc, #24]	; (80066fc <MX_USB_DEVICE_Init+0x2c>)
 80066e2:	f7fe ff33 	bl	800554c <USBD_RegisterClass>

  USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 80066e6:	4907      	ldr	r1, [pc, #28]	; (8006704 <MX_USB_DEVICE_Init+0x34>)
 80066e8:	4804      	ldr	r0, [pc, #16]	; (80066fc <MX_USB_DEVICE_Init+0x2c>)
 80066ea:	f7fd fedf 	bl	80044ac <USBD_MSC_RegisterStorage>

  USBD_Start(&hUsbDeviceFS);
 80066ee:	4803      	ldr	r0, [pc, #12]	; (80066fc <MX_USB_DEVICE_Init+0x2c>)
 80066f0:	f7fe ff45 	bl	800557e <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80066f4:	bf00      	nop
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	200000b4 	.word	0x200000b4
 80066fc:	200003a4 	.word	0x200003a4
 8006700:	20000008 	.word	0x20000008
 8006704:	200000e8 	.word	0x200000e8

08006708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a0d      	ldr	r2, [pc, #52]	; (800674c <HAL_PCD_MspInit+0x44>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d113      	bne.n	8006742 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800671a:	4a0d      	ldr	r2, [pc, #52]	; (8006750 <HAL_PCD_MspInit+0x48>)
 800671c:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <HAL_PCD_MspInit+0x48>)
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006724:	61d3      	str	r3, [r2, #28]
 8006726:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <HAL_PCD_MspInit+0x48>)
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006732:	2200      	movs	r2, #0
 8006734:	2100      	movs	r1, #0
 8006736:	2014      	movs	r0, #20
 8006738:	f7fa fe3b 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800673c:	2014      	movs	r0, #20
 800673e:	f7fa fe54 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006742:	bf00      	nop
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	40005c00 	.word	0x40005c00
 8006750:	40021000 	.word	0x40021000

08006754 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8006768:	4619      	mov	r1, r3
 800676a:	4610      	mov	r0, r2
 800676c:	f7fe ff4f 	bl	800560e <USBD_LL_SetupStage>
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	015b      	lsls	r3, r3, #5
 8006790:	4413      	add	r3, r2
 8006792:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	4619      	mov	r1, r3
 800679c:	f7fe ff81 	bl	80056a2 <USBD_LL_DataOutStage>
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	015b      	lsls	r3, r3, #5
 80067c0:	4413      	add	r3, r2
 80067c2:	333c      	adds	r3, #60	; 0x3c
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	4619      	mov	r1, r3
 80067ca:	f7fe ffc5 	bl	8005758 <USBD_LL_DataInStage>
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff f8a8 	bl	800593a <USBD_LL_SOF>
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d102      	bne.n	800680c <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8006806:	2301      	movs	r3, #1
 8006808:	73fb      	strb	r3, [r7, #15]
    break;
 800680a:	e002      	b.n	8006812 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
    break;    
 8006810:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006818:	7bfa      	ldrb	r2, [r7, #15]
 800681a:	4611      	mov	r1, r2
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff f859 	bl	80058d4 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff f824 	bl	8005876 <USBD_LL_Reset>
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff f853 	bl	80058f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006854:	4a04      	ldr	r2, [pc, #16]	; (8006868 <HAL_PCD_SuspendCallback+0x30>)
 8006856:	4b04      	ldr	r3, [pc, #16]	; (8006868 <HAL_PCD_SuspendCallback+0x30>)
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f043 0306 	orr.w	r3, r3, #6
 800685e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	e000ed00 	.word	0xe000ed00

0800686c <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff f84d 	bl	800591a <USBD_LL_Resume>
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006890:	4a26      	ldr	r2, [pc, #152]	; (800692c <USBD_LL_Init+0xa4>)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a24      	ldr	r2, [pc, #144]	; (800692c <USBD_LL_Init+0xa4>)
 800689c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80068a0:	4b22      	ldr	r3, [pc, #136]	; (800692c <USBD_LL_Init+0xa4>)
 80068a2:	4a23      	ldr	r2, [pc, #140]	; (8006930 <USBD_LL_Init+0xa8>)
 80068a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80068a6:	4b21      	ldr	r3, [pc, #132]	; (800692c <USBD_LL_Init+0xa4>)
 80068a8:	2208      	movs	r2, #8
 80068aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80068ac:	4b1f      	ldr	r3, [pc, #124]	; (800692c <USBD_LL_Init+0xa4>)
 80068ae:	2202      	movs	r2, #2
 80068b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80068b2:	4b1e      	ldr	r3, [pc, #120]	; (800692c <USBD_LL_Init+0xa4>)
 80068b4:	2203      	movs	r2, #3
 80068b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80068b8:	4b1c      	ldr	r3, [pc, #112]	; (800692c <USBD_LL_Init+0xa4>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80068be:	4b1b      	ldr	r3, [pc, #108]	; (800692c <USBD_LL_Init+0xa4>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80068c4:	4b19      	ldr	r3, [pc, #100]	; (800692c <USBD_LL_Init+0xa4>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80068ca:	4818      	ldr	r0, [pc, #96]	; (800692c <USBD_LL_Init+0xa4>)
 80068cc:	f7fa ff56 	bl	800177c <HAL_PCD_Init>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 80068d6:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80068da:	4816      	ldr	r0, [pc, #88]	; (8006934 <USBD_LL_Init+0xac>)
 80068dc:	f7ff fe00 	bl	80064e0 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80068e6:	2318      	movs	r3, #24
 80068e8:	2200      	movs	r2, #0
 80068ea:	2100      	movs	r1, #0
 80068ec:	f7fb fe88 	bl	8002600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80068f6:	2358      	movs	r3, #88	; 0x58
 80068f8:	2200      	movs	r2, #0
 80068fa:	2180      	movs	r1, #128	; 0x80
 80068fc:	f7fb fe80 	bl	8002600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006906:	2398      	movs	r3, #152	; 0x98
 8006908:	2200      	movs	r2, #0
 800690a:	2181      	movs	r1, #129	; 0x81
 800690c:	f7fb fe78 	bl	8002600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006916:	23d8      	movs	r3, #216	; 0xd8
 8006918:	2200      	movs	r2, #0
 800691a:	2101      	movs	r1, #1
 800691c:	f7fb fe70 	bl	8002600 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	200005c8 	.word	0x200005c8
 8006930:	40005c00 	.word	0x40005c00
 8006934:	0800796c 	.word	0x0800796c

08006938 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800694e:	4618      	mov	r0, r3
 8006950:	f7fa ffee 	bl	8001930 <HAL_PCD_Start>
 8006954:	4603      	mov	r3, r0
 8006956:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b03      	cmp	r3, #3
 800695c:	d816      	bhi.n	800698c <USBD_LL_Start+0x54>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <USBD_LL_Start+0x2c>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006975 	.word	0x08006975
 8006968:	0800697b 	.word	0x0800697b
 800696c:	08006981 	.word	0x08006981
 8006970:	08006987 	.word	0x08006987
    case HAL_OK :
      usb_status = USBD_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
    break;
 8006978:	e00b      	b.n	8006992 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800697a:	2302      	movs	r3, #2
 800697c:	73fb      	strb	r3, [r7, #15]
    break;
 800697e:	e008      	b.n	8006992 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
    break;
 8006984:	e005      	b.n	8006992 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006986:	2302      	movs	r3, #2
 8006988:	73fb      	strb	r3, [r7, #15]
    break;
 800698a:	e002      	b.n	8006992 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800698c:	2302      	movs	r3, #2
 800698e:	73fb      	strb	r3, [r7, #15]
    break;
 8006990:	bf00      	nop
  }
  return usb_status;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	70fb      	strb	r3, [r7, #3]
 80069ae:	460b      	mov	r3, r1
 80069b0:	70bb      	strb	r3, [r7, #2]
 80069b2:	4613      	mov	r3, r2
 80069b4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80069c4:	78bb      	ldrb	r3, [r7, #2]
 80069c6:	883a      	ldrh	r2, [r7, #0]
 80069c8:	78f9      	ldrb	r1, [r7, #3]
 80069ca:	f7fb f8fe 	bl	8001bca <HAL_PCD_EP_Open>
 80069ce:	4603      	mov	r3, r0
 80069d0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d817      	bhi.n	8006a08 <USBD_LL_OpenEP+0x6c>
 80069d8:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <USBD_LL_OpenEP+0x44>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	080069f7 	.word	0x080069f7
 80069e8:	080069fd 	.word	0x080069fd
 80069ec:	08006a03 	.word	0x08006a03
    case HAL_OK :
      usb_status = USBD_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
    break;
 80069f4:	e00b      	b.n	8006a0e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80069f6:	2302      	movs	r3, #2
 80069f8:	73fb      	strb	r3, [r7, #15]
    break;
 80069fa:	e008      	b.n	8006a0e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006a00:	e005      	b.n	8006a0e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a02:	2302      	movs	r3, #2
 8006a04:	73fb      	strb	r3, [r7, #15]
    break;
 8006a06:	e002      	b.n	8006a0e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a0c:	bf00      	nop
  }
  return usb_status;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006a32:	78fa      	ldrb	r2, [r7, #3]
 8006a34:	4611      	mov	r1, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fb f91c 	bl	8001c74 <HAL_PCD_EP_Close>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d816      	bhi.n	8006a74 <USBD_LL_CloseEP+0x5c>
 8006a46:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <USBD_LL_CloseEP+0x34>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006a63 	.word	0x08006a63
 8006a54:	08006a69 	.word	0x08006a69
 8006a58:	08006a6f 	.word	0x08006a6f
    case HAL_OK :
      usb_status = USBD_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a60:	e00b      	b.n	8006a7a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a62:	2302      	movs	r3, #2
 8006a64:	73fb      	strb	r3, [r7, #15]
    break;
 8006a66:	e008      	b.n	8006a7a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a6c:	e005      	b.n	8006a7a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a6e:	2302      	movs	r3, #2
 8006a70:	73fb      	strb	r3, [r7, #15]
    break;
 8006a72:	e002      	b.n	8006a7a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006a74:	2302      	movs	r3, #2
 8006a76:	73fb      	strb	r3, [r7, #15]
    break;
 8006a78:	bf00      	nop
  }
  return usb_status;  
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fb fa54 	bl	8001f50 <HAL_PCD_EP_Flush>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d816      	bhi.n	8006ae0 <USBD_LL_FlushEP+0x5c>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <USBD_LL_FlushEP+0x34>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006ac9 	.word	0x08006ac9
 8006abc:	08006acf 	.word	0x08006acf
 8006ac0:	08006ad5 	.word	0x08006ad5
 8006ac4:	08006adb 	.word	0x08006adb
    case HAL_OK :
      usb_status = USBD_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]
    break;
 8006acc:	e00b      	b.n	8006ae6 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ad2:	e008      	b.n	8006ae6 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ad8:	e005      	b.n	8006ae6 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ada:	2302      	movs	r3, #2
 8006adc:	73fb      	strb	r3, [r7, #15]
    break;
 8006ade:	e002      	b.n	8006ae6 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ae4:	bf00      	nop
  }
  return usb_status;  
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fb f982 	bl	8001e18 <HAL_PCD_EP_SetStall>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d816      	bhi.n	8006b4c <USBD_LL_StallEP+0x5c>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <USBD_LL_StallEP+0x34>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b3b 	.word	0x08006b3b
 8006b2c:	08006b41 	.word	0x08006b41
 8006b30:	08006b47 	.word	0x08006b47
    case HAL_OK :
      usb_status = USBD_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
    break;
 8006b38:	e00b      	b.n	8006b52 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b3e:	e008      	b.n	8006b52 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b40:	2301      	movs	r3, #1
 8006b42:	73fb      	strb	r3, [r7, #15]
    break;
 8006b44:	e005      	b.n	8006b52 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b46:	2302      	movs	r3, #2
 8006b48:	73fb      	strb	r3, [r7, #15]
    break;
 8006b4a:	e002      	b.n	8006b52 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b50:	bf00      	nop
  }
  return usb_status;  
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006b76:	78fa      	ldrb	r2, [r7, #3]
 8006b78:	4611      	mov	r1, r2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fb f9a1 	bl	8001ec2 <HAL_PCD_EP_ClrStall>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d816      	bhi.n	8006bb8 <USBD_LL_ClearStallEP+0x5c>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <USBD_LL_ClearStallEP+0x34>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006ba1 	.word	0x08006ba1
 8006b94:	08006ba7 	.word	0x08006ba7
 8006b98:	08006bad 	.word	0x08006bad
 8006b9c:	08006bb3 	.word	0x08006bb3
    case HAL_OK :
      usb_status = USBD_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ba4:	e00b      	b.n	8006bbe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8006baa:	e008      	b.n	8006bbe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
    break;
 8006bb0:	e005      	b.n	8006bbe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8006bb6:	e002      	b.n	8006bbe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	73fb      	strb	r3, [r7, #15]
    break;
 8006bbc:	bf00      	nop
  }
  return usb_status; 
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006bda:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da08      	bge.n	8006bf6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	015b      	lsls	r3, r3, #5
 8006bee:	4413      	add	r3, r2
 8006bf0:	332a      	adds	r3, #42	; 0x2a
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	e008      	b.n	8006c08 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	015b      	lsls	r3, r3, #5
 8006c00:	4413      	add	r3, r2
 8006c02:	f203 232a 	addw	r3, r3, #554	; 0x22a
 8006c06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bc80      	pop	{r7}
 8006c10:	4770      	bx	lr
	...

08006c14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	4611      	mov	r1, r2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fa ffa4 	bl	8001b80 <HAL_PCD_SetAddress>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d816      	bhi.n	8006c70 <USBD_LL_SetUSBAddress+0x5c>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <USBD_LL_SetUSBAddress+0x34>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006c5f 	.word	0x08006c5f
 8006c50:	08006c65 	.word	0x08006c65
 8006c54:	08006c6b 	.word	0x08006c6b
    case HAL_OK :
      usb_status = USBD_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c5c:	e00b      	b.n	8006c76 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	73fb      	strb	r3, [r7, #15]
    break;
 8006c62:	e008      	b.n	8006c76 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
    break;
 8006c68:	e005      	b.n	8006c76 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c6e:	e002      	b.n	8006c76 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006c70:	2302      	movs	r3, #2
 8006c72:	73fb      	strb	r3, [r7, #15]
    break;
 8006c74:	bf00      	nop
  }
  return usb_status;  
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	72fb      	strb	r3, [r7, #11]
 8006c90:	4613      	mov	r3, r2
 8006c92:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006ca2:	893b      	ldrh	r3, [r7, #8]
 8006ca4:	7af9      	ldrb	r1, [r7, #11]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	f7fb f87b 	bl	8001da2 <HAL_PCD_EP_Transmit>
 8006cac:	4603      	mov	r3, r0
 8006cae:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006cb0:	7dbb      	ldrb	r3, [r7, #22]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d816      	bhi.n	8006ce4 <USBD_LL_Transmit+0x64>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <USBD_LL_Transmit+0x3c>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006ccd 	.word	0x08006ccd
 8006cc0:	08006cd3 	.word	0x08006cd3
 8006cc4:	08006cd9 	.word	0x08006cd9
 8006cc8:	08006cdf 	.word	0x08006cdf
    case HAL_OK :
      usb_status = USBD_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	75fb      	strb	r3, [r7, #23]
    break;
 8006cd0:	e00b      	b.n	8006cea <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	75fb      	strb	r3, [r7, #23]
    break;
 8006cd6:	e008      	b.n	8006cea <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75fb      	strb	r3, [r7, #23]
    break;
 8006cdc:	e005      	b.n	8006cea <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	75fb      	strb	r3, [r7, #23]
    break;
 8006ce2:	e002      	b.n	8006cea <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	75fb      	strb	r3, [r7, #23]
    break;
 8006ce8:	bf00      	nop
  }
  return usb_status;    
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	460b      	mov	r3, r1
 8006d02:	72fb      	strb	r3, [r7, #11]
 8006d04:	4613      	mov	r3, r2
 8006d06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006d16:	893b      	ldrh	r3, [r7, #8]
 8006d18:	7af9      	ldrb	r1, [r7, #11]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	f7fa fff0 	bl	8001d00 <HAL_PCD_EP_Receive>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006d24:	7dbb      	ldrb	r3, [r7, #22]
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d816      	bhi.n	8006d58 <USBD_LL_PrepareReceive+0x64>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <USBD_LL_PrepareReceive+0x3c>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d41 	.word	0x08006d41
 8006d34:	08006d47 	.word	0x08006d47
 8006d38:	08006d4d 	.word	0x08006d4d
 8006d3c:	08006d53 	.word	0x08006d53
    case HAL_OK :
      usb_status = USBD_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	75fb      	strb	r3, [r7, #23]
    break;
 8006d44:	e00b      	b.n	8006d5e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d46:	2302      	movs	r3, #2
 8006d48:	75fb      	strb	r3, [r7, #23]
    break;
 8006d4a:	e008      	b.n	8006d5e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]
    break;
 8006d50:	e005      	b.n	8006d5e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d52:	2302      	movs	r3, #2
 8006d54:	75fb      	strb	r3, [r7, #23]
    break;
 8006d56:	e002      	b.n	8006d5e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	75fb      	strb	r3, [r7, #23]
    break;
 8006d5c:	bf00      	nop
  }
  return usb_status; 
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fa fffa 	bl	8001d78 <HAL_PCD_EP_GetRxCount>
 8006d84:	4603      	mov	r3, r0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <USBD_static_malloc+0x14>)
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr
 8006da4:	20000128 	.word	0x20000128

08006da8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]

}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr

08006dd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	6039      	str	r1, [r7, #0]
 8006dda:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2212      	movs	r2, #18
 8006de0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006de2:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	200000d0 	.word	0x200000d0

08006df4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2204      	movs	r2, #4
 8006e04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e06:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	200000e4 	.word	0x200000e4

08006e18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	6039      	str	r1, [r7, #0]
 8006e22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d105      	bne.n	8006e36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4907      	ldr	r1, [pc, #28]	; (8006e4c <USBD_FS_ProductStrDescriptor+0x34>)
 8006e2e:	4808      	ldr	r0, [pc, #32]	; (8006e50 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e30:	f7ff f9a0 	bl	8006174 <USBD_GetString>
 8006e34:	e004      	b.n	8006e40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	4904      	ldr	r1, [pc, #16]	; (8006e4c <USBD_FS_ProductStrDescriptor+0x34>)
 8006e3a:	4805      	ldr	r0, [pc, #20]	; (8006e50 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e3c:	f7ff f99a 	bl	8006174 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e40:	4b02      	ldr	r3, [pc, #8]	; (8006e4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000a28 	.word	0x20000a28
 8006e50:	08007980 	.word	0x08007980

08006e54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	6039      	str	r1, [r7, #0]
 8006e5e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	4904      	ldr	r1, [pc, #16]	; (8006e74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e64:	4804      	ldr	r0, [pc, #16]	; (8006e78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e66:	f7ff f985 	bl	8006174 <USBD_GetString>
  return USBD_StrDesc;
 8006e6a:	4b02      	ldr	r3, [pc, #8]	; (8006e74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	20000a28 	.word	0x20000a28
 8006e78:	08007994 	.word	0x08007994

08006e7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4603      	mov	r3, r0
 8006e84:	6039      	str	r1, [r7, #0]
 8006e86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d105      	bne.n	8006e9a <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	4907      	ldr	r1, [pc, #28]	; (8006eb0 <USBD_FS_SerialStrDescriptor+0x34>)
 8006e92:	4808      	ldr	r0, [pc, #32]	; (8006eb4 <USBD_FS_SerialStrDescriptor+0x38>)
 8006e94:	f7ff f96e 	bl	8006174 <USBD_GetString>
 8006e98:	e004      	b.n	8006ea4 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4904      	ldr	r1, [pc, #16]	; (8006eb0 <USBD_FS_SerialStrDescriptor+0x34>)
 8006e9e:	4805      	ldr	r0, [pc, #20]	; (8006eb4 <USBD_FS_SerialStrDescriptor+0x38>)
 8006ea0:	f7ff f968 	bl	8006174 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ea4:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000a28 	.word	0x20000a28
 8006eb4:	080079a8 	.word	0x080079a8

08006eb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	6039      	str	r1, [r7, #0]
 8006ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d105      	bne.n	8006ed6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4907      	ldr	r1, [pc, #28]	; (8006eec <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ece:	4808      	ldr	r0, [pc, #32]	; (8006ef0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ed0:	f7ff f950 	bl	8006174 <USBD_GetString>
 8006ed4:	e004      	b.n	8006ee0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4904      	ldr	r1, [pc, #16]	; (8006eec <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eda:	4805      	ldr	r0, [pc, #20]	; (8006ef0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006edc:	f7ff f94a 	bl	8006174 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000a28 	.word	0x20000a28
 8006ef0:	080079b8 	.word	0x080079b8

08006ef4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d105      	bne.n	8006f12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	4907      	ldr	r1, [pc, #28]	; (8006f28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f0a:	4808      	ldr	r0, [pc, #32]	; (8006f2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f0c:	f7ff f932 	bl	8006174 <USBD_GetString>
 8006f10:	e004      	b.n	8006f1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4904      	ldr	r1, [pc, #16]	; (8006f28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f16:	4805      	ldr	r0, [pc, #20]	; (8006f2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f18:	f7ff f92c 	bl	8006174 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000a28 	.word	0x20000a28
 8006f2c:	080079c4 	.word	0x080079c4

08006f30 <NVIC_SystemReset>:
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006f34:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006f38:	4905      	ldr	r1, [pc, #20]	; (8006f50 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006f3a:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <NVIC_SystemReset+0x20>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006f42:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <NVIC_SystemReset+0x24>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60cb      	str	r3, [r1, #12]
 8006f48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006f4c:	bf00      	nop
    __NOP();
 8006f4e:	e7fd      	b.n	8006f4c <NVIC_SystemReset+0x1c>
 8006f50:	e000ed00 	.word	0xe000ed00
 8006f54:	05fa0004 	.word	0x05fa0004

08006f58 <flush_dirty>:
{ if (9 > file_ofs)			 memcpy (buf, & null_buf_write [file_ofs], 512);}
static void read_null		(register uint32_t * buf, register uint32_t file_ofs) { memset (buf, ' ', 512); }
static void write_null		(register uint32_t * buf, register uint32_t file_ofs) { debug_info [debug_ptr] |= 128<<24; }
*/

static void flush_dirty		(register int disk_slot) {
 8006f58:	b5b0      	push	{r4, r5, r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	4605      	mov	r5, r0

	for (register int i = 0; i < null_buf_size; i ++)
 8006f5e:	2400      	movs	r4, #0
 8006f60:	e00b      	b.n	8006f7a <flush_dirty+0x22>

		disk_decode_table [disk_slot].write_handler (& null_buf_write [i][0], i);
 8006f62:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <flush_dirty+0x30>)
 8006f64:	012b      	lsls	r3, r5, #4
 8006f66:	4413      	add	r3, r2
 8006f68:	3304      	adds	r3, #4
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	0262      	lsls	r2, r4, #9
 8006f6e:	4907      	ldr	r1, [pc, #28]	; (8006f8c <flush_dirty+0x34>)
 8006f70:	440a      	add	r2, r1
 8006f72:	4621      	mov	r1, r4
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
	for (register int i = 0; i < null_buf_size; i ++)
 8006f78:	3401      	adds	r4, #1
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <flush_dirty+0x38>)
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	42a3      	cmp	r3, r4
 8006f80:	dcef      	bgt.n	8006f62 <flush_dirty+0xa>

}
 8006f82:	bf00      	nop
 8006f84:	bdb0      	pop	{r4, r5, r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20002030 	.word	0x20002030
 8006f8c:	2000102c 	.word	0x2000102c
 8006f90:	20001028 	.word	0x20001028

08006f94 <write_unknown>:

// buffer all unknown writes up to 4 KB
static void		write_unknown		(register uint32_t * buf, register uint32_t file_ofs)		{
 8006f94:	b598      	push	{r3, r4, r7, lr}
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	4604      	mov	r4, r0
//debug_info [debug_ptr] |= 64<<24;
	switch (null_buf_size) {
 8006f9a:	4b19      	ldr	r3, [pc, #100]	; (8007000 <write_unknown+0x6c>)
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	db1b      	blt.n	8006fda <write_unknown+0x46>
 8006fa2:	2b07      	cmp	r3, #7
 8006fa4:	dd02      	ble.n	8006fac <write_unknown+0x18>
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d012      	beq.n	8006fd0 <write_unknown+0x3c>
 8006faa:	e016      	b.n	8006fda <write_unknown+0x46>

case 0 ... 7:	memcpy (& null_buf_write [null_buf_size], buf, 512);	null_buf_size ++;
 8006fac:	4b14      	ldr	r3, [pc, #80]	; (8007000 <write_unknown+0x6c>)
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	025b      	lsls	r3, r3, #9
 8006fb2:	4a14      	ldr	r2, [pc, #80]	; (8007004 <write_unknown+0x70>)
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fca4 	bl	800790a <memcpy>
 8006fc2:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <write_unknown+0x6c>)
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <write_unknown+0x6c>)
 8006fcc:	801a      	strh	r2, [r3, #0]
				break;
 8006fce:	e014      	b.n	8006ffa <write_unknown+0x66>

				// flush the dirty sector buffers
case 8:			flush_dirty (default_write_slot [0]);
 8006fd0:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <write_unknown+0x74>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff ffbf 	bl	8006f58 <flush_dirty>
default:		disk_decode_table [default_write_slot [0]].write_handler (buf, null_buf_size ++);	// send the data directly to the default write handler
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <write_unknown+0x74>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	4a0b      	ldr	r2, [pc, #44]	; (800700c <write_unknown+0x78>)
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <write_unknown+0x6c>)
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	1c59      	adds	r1, r3, #1
 8006fee:	b288      	uxth	r0, r1
 8006ff0:	4903      	ldr	r1, [pc, #12]	; (8007000 <write_unknown+0x6c>)
 8006ff2:	8008      	strh	r0, [r1, #0]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4790      	blx	r2

	}
}
 8006ffa:	bf00      	nop
 8006ffc:	bd98      	pop	{r3, r4, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20001028 	.word	0x20001028
 8007004:	2000102c 	.word	0x2000102c
 8007008:	2000202c 	.word	0x2000202c
 800700c:	20002030 	.word	0x20002030

08007010 <read_root_dir>:
static void read_root_dir		(register uint32_t	 * buf, register uint32_t file_ofs)		{ if (file_ofs < 2) memcpy (buf, &root_dir [file_ofs << 4], 512);		}
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
 8007014:	460b      	mov	r3, r1
 8007016:	2b01      	cmp	r3, #1
 8007018:	d808      	bhi.n	800702c <read_root_dir+0x1c>
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	015b      	lsls	r3, r3, #5
 800701e:	4a04      	ldr	r2, [pc, #16]	; (8007030 <read_root_dir+0x20>)
 8007020:	4413      	add	r3, r2
 8007022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007026:	4619      	mov	r1, r3
 8007028:	f000 fc6f 	bl	800790a <memcpy>
 800702c:	bf00      	nop
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000c28 	.word	0x20000c28

08007034 <write_root_dir>:
static void write_root_dir		(register t_dir_slot * buf, register uint32_t file_ofs)		{
 8007034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007038:	af00      	add	r7, sp, #0
 800703a:	4682      	mov	sl, r0
 800703c:	460e      	mov	r6, r1

	if (file_ofs < 2) {
 800703e:	2e01      	cmp	r6, #1
 8007040:	f200 8083 	bhi.w	800714a <write_root_dir+0x116>

		// scan the root directory for GOUTPU~1 file or a file with a FREE_CLUSTER starting address
		register int change_slot = 0;
 8007044:	f04f 0900 	mov.w	r9, #0
		file_ofs <<= 4;
 8007048:	0136      	lsls	r6, r6, #4
		if (default_write_slot [1]) for (register int i = 0; buf -> filename [i] && (i < 16); i ++) {
 800704a:	4b41      	ldr	r3, [pc, #260]	; (8007150 <write_root_dir+0x11c>)
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d062      	beq.n	8007118 <write_root_dir+0xe4>
 8007052:	2500      	movs	r5, #0
 8007054:	e05a      	b.n	800710c <write_root_dir+0xd8>

			register t_dir_slot * b = & buf [i];
 8007056:	462b      	mov	r3, r5
 8007058:	015b      	lsls	r3, r3, #5
 800705a:	eb0a 0403 	add.w	r4, sl, r3

			// ignore deleted or LFN records
			if ((b -> filename [0]	!=	0xE5)
 800705e:	7823      	ldrb	r3, [r4, #0]
 8007060:	2be5      	cmp	r3, #229	; 0xe5
 8007062:	d052      	beq.n	800710a <write_root_dir+0xd6>
			&&	(b -> attributes	!=	0x0F)) {
 8007064:	7ae3      	ldrb	r3, [r4, #11]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d04f      	beq.n	800710a <write_root_dir+0xd6>

				// determine if OVERRIDE.TXT was modified
				if (b -> last_access_date != root_dir [i].last_access_date
 800706a:	8a62      	ldrh	r2, [r4, #18]
 800706c:	4939      	ldr	r1, [pc, #228]	; (8007154 <write_root_dir+0x120>)
 800706e:	016b      	lsls	r3, r5, #5
 8007070:	440b      	add	r3, r1
 8007072:	3312      	adds	r3, #18
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d010      	beq.n	800709c <write_root_dir+0x68>
				&&  ! memcmp (b -> filename, "OVERRIDETXT", 11))		default_write_slot [1] = (b -> starting_cluster >> 11) + 2;
 800707a:	4623      	mov	r3, r4
 800707c:	220b      	movs	r2, #11
 800707e:	4936      	ldr	r1, [pc, #216]	; (8007158 <write_root_dir+0x124>)
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fc33 	bl	80078ec <memcmp>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d107      	bne.n	800709c <write_root_dir+0x68>
 800708c:	8b63      	ldrh	r3, [r4, #26]
 800708e:	0adb      	lsrs	r3, r3, #11
 8007090:	b29b      	uxth	r3, r3
 8007092:	b2db      	uxtb	r3, r3
 8007094:	3302      	adds	r3, #2
 8007096:	b2da      	uxtb	r2, r3
 8007098:	4b2d      	ldr	r3, [pc, #180]	; (8007150 <write_root_dir+0x11c>)
 800709a:	705a      	strb	r2, [r3, #1]

				// set up the default write handler if a .goutputstream file is detected
				if (! memcmp (b -> filename, "GOUTPU~1   ", 11)) {
 800709c:	4623      	mov	r3, r4
 800709e:	220b      	movs	r2, #11
 80070a0:	492e      	ldr	r1, [pc, #184]	; (800715c <write_root_dir+0x128>)
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fc22 	bl	80078ec <memcmp>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <write_root_dir+0x84>
//debug_info [debug_ptr] |= 1<<24;
					default_write_slot [0] = default_write_slot [1];	//	switch ON the default write handler
 80070ae:	4b28      	ldr	r3, [pc, #160]	; (8007150 <write_root_dir+0x11c>)
 80070b0:	785a      	ldrb	r2, [r3, #1]
 80070b2:	4b27      	ldr	r3, [pc, #156]	; (8007150 <write_root_dir+0x11c>)
 80070b4:	701a      	strb	r2, [r3, #0]
					break;
 80070b6:	e02f      	b.n	8007118 <write_root_dir+0xe4>

				}
				// otherwise detect if a file has a new FREE_CLUSTER start address
				register int old_start	=	root_dir [i + file_ofs].starting_cluster;
 80070b8:	462b      	mov	r3, r5
 80070ba:	4433      	add	r3, r6
 80070bc:	4a25      	ldr	r2, [pc, #148]	; (8007154 <write_root_dir+0x120>)
 80070be:	015b      	lsls	r3, r3, #5
 80070c0:	4413      	add	r3, r2
 80070c2:	331a      	adds	r3, #26
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	4698      	mov	r8, r3
				if	(	 		null_buf_size							&&	old_start
 80070c8:	4b25      	ldr	r3, [pc, #148]	; (8007160 <write_root_dir+0x12c>)
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01c      	beq.n	800710a <write_root_dir+0xd6>
 80070d0:	f1b8 0f00 	cmp.w	r8, #0
 80070d4:	d019      	beq.n	800710a <write_root_dir+0xd6>
				&&	(			b -> starting_cluster				!=	old_start				)
 80070d6:	8b63      	ldrh	r3, [r4, #26]
 80070d8:	4543      	cmp	r3, r8
 80070da:	d016      	beq.n	800710a <write_root_dir+0xd6>
				&&	(((			b -> starting_cluster >> 11) + 2)	==	FREE_SPACE_START_SLOT	)
 80070dc:	8b63      	ldrh	r3, [r4, #26]
 80070de:	0adb      	lsrs	r3, r3, #11
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b1e      	cmp	r3, #30
 80070e4:	d111      	bne.n	800710a <write_root_dir+0xd6>
				&&	! memcmp (& b -> filename, & root_dir [i + file_ofs].filename, 11	)) {
 80070e6:	4620      	mov	r0, r4
 80070e8:	462b      	mov	r3, r5
 80070ea:	4433      	add	r3, r6
 80070ec:	015b      	lsls	r3, r3, #5
 80070ee:	4a19      	ldr	r2, [pc, #100]	; (8007154 <write_root_dir+0x120>)
 80070f0:	4413      	add	r3, r2
 80070f2:	220b      	movs	r2, #11
 80070f4:	4619      	mov	r1, r3
 80070f6:	f000 fbf9 	bl	80078ec <memcmp>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d104      	bne.n	800710a <write_root_dir+0xd6>
//debug_info [debug_ptr] |= 2<<24|old_start;
					change_slot = (old_start >> 11) + 2;
 8007100:	ea4f 23e8 	mov.w	r3, r8, asr #11
 8007104:	f103 0902 	add.w	r9, r3, #2
					break;
 8007108:	e006      	b.n	8007118 <write_root_dir+0xe4>
		if (default_write_slot [1]) for (register int i = 0; buf -> filename [i] && (i < 16); i ++) {
 800710a:	3501      	adds	r5, #1
 800710c:	f81a 3005 	ldrb.w	r3, [sl, r5]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <write_root_dir+0xe4>
 8007114:	2d0f      	cmp	r5, #15
 8007116:	dd9e      	ble.n	8007056 <write_root_dir+0x22>

				}
			}
		}
		// if the buffer is dirty, try to find a file to match it with
		if (change_slot) {
 8007118:	f1b9 0f00 	cmp.w	r9, #0
 800711c:	d00c      	beq.n	8007138 <write_root_dir+0x104>

			// get the old file's disk slot index
			if (null_buf_size <= 8)		flush_dirty (change_slot);
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <write_root_dir+0x12c>)
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	2b08      	cmp	r3, #8
 8007124:	d802      	bhi.n	800712c <write_root_dir+0xf8>
 8007126:	4648      	mov	r0, r9
 8007128:	f7ff ff16 	bl	8006f58 <flush_dirty>
			null_buf_size = 0;
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <write_root_dir+0x12c>)
 800712e:	2200      	movs	r2, #0
 8007130:	801a      	strh	r2, [r3, #0]

			// write-protect the disk slot now since the OS freed up space there
//			disk_decode_table [change_slot] = disk_decode_null;

			// switch off the default write handler
			default_write_slot [0] = 0;
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <write_root_dir+0x11c>)
 8007134:	2200      	movs	r2, #0
 8007136:	701a      	strb	r2, [r3, #0]

		}
		memcpy (& root_dir [file_ofs], buf, 512);
 8007138:	0173      	lsls	r3, r6, #5
 800713a:	4a06      	ldr	r2, [pc, #24]	; (8007154 <write_root_dir+0x120>)
 800713c:	4413      	add	r3, r2
 800713e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007142:	4651      	mov	r1, sl
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fbe0 	bl	800790a <memcpy>

	}
}
 800714a:	bf00      	nop
 800714c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007150:	2000202c 	.word	0x2000202c
 8007154:	20000c28 	.word	0x20000c28
 8007158:	080079d4 	.word	0x080079d4
 800715c:	080079e0 	.word	0x080079e0
 8007160:	20001028 	.word	0x20001028

08007164 <io_null>:

static void io_null				(register uint32_t * buf, register uint32_t file_ofs)		{																		}
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
 8007168:	bf00      	nop
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr

08007170 <read_boot_sector>:
static void read_boot_sector	(register uint32_t * buf, register uint32_t file_ofs)		{ if (  ! file_ofs) memcpy (buf, BOOT_BLOCK -> boot_sector, 512); 		}
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
 8007174:	460b      	mov	r3, r1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <read_boot_sector+0x14>
 800717a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800717e:	4902      	ldr	r1, [pc, #8]	; (8007188 <read_boot_sector+0x18>)
 8007180:	f000 fbc3 	bl	800790a <memcpy>
 8007184:	bf00      	nop
 8007186:	bd80      	pop	{r7, pc}
 8007188:	08000a00 	.word	0x08000a00

0800718c <version_txt_R>:
static void version_txt_R		(register uint32_t * buf, register uint32_t file_ofs)		{ //if (! file_ofs) {
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
//		unsigned short cr = 0x0A0D;
//		memcpy ((char *) buf +  0, &APPLICATION -> application_header.product_ID.company_name,  8); memcpy ((char *) buf +  8, &cr, 2);
//		memcpy ((char *) buf + 10, &APPLICATION -> application_header.product_ID.product_name, 16); memcpy ((char *) buf + 26, &cr, 2);
//		memcpy ((char *) buf + 28, &APPLICATION -> application_header.product_ID.version	 ,  4);

	asm ("			push	{r4, r5, r6, r7}					\n\t");
 8007190:	b4f0      	push	{r4, r5, r6, r7}
	asm ("			movw	r7, 0x8008							\n\t");
 8007192:	f248 0708 	movw	r7, #32776	; 0x8008
	asm ("			movt	r7, 0x0800							\n\t");
 8007196:	f6c0 0700 	movt	r7, #2048	; 0x800
	asm ("			ldmia	r7 , {r1, r2, r3, r4, r5, r6, r7}	\n\t");
 800719a:	cffe      	ldmia	r7, {r1, r2, r3, r4, r5, r6, r7}
	asm ("			stmia	r0!, {r1, r2}						\n\t");		//	company name
 800719c:	c006      	stmia	r0!, {r1, r2}
	asm ("			movw	r1, 0x2020							\n\t");
 800719e:	f242 0120 	movw	r1, #8224	; 0x2020
	asm ("			movt	r1, 0x0A0D							\n\t");
 80071a2:	f6c0 210d 	movt	r1, #2573	; 0xa0d
	asm ("			stmia	r0!, {r1, r3, r4, r5, r6}			\n\t");		//	CRLF, product name
 80071a6:	c07a      	stmia	r0!, {r1, r3, r4, r5, r6}
	asm ("			stmia	r0!, {r1, r7}						\n\t");		//	CRLF, product ID
 80071a8:	c082      	stmia	r0!, {r1, r7}
	asm ("			pop		{r4, r5, r6, r7}					\n\t");
 80071aa:	bcf0      	pop	{r4, r5, r6, r7}

080071ac <verskip>:
	asm ("verskip:												\n\t");

//	}
}
 80071ac:	bf00      	nop
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bc80      	pop	{r7}
 80071b2:	4770      	bx	lr

080071b4 <write_FAT>:
					}
					if (8 > file_ofs) memcpy (&root_dir [file_ofs << 4], buf, 512);
	}
}
*/
static void write_FAT			(register uint32_t * buf, register uint32_t file_ofs) { /*if (  ! file_ofs) memcpy (&file_allocation_table, buf, FAT_MAX_ENTRIES * 2);*/	}
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	bf00      	nop
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr

080071c0 <read_FAT>:
static void read_FAT			(register uint16_t * buf, register uint32_t file_ofs) {
 80071c0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1

	switch (file_ofs) {
 80071cc:	2b07      	cmp	r3, #7
 80071ce:	d902      	bls.n	80071d6 <read_FAT+0x16>
 80071d0:	2bef      	cmp	r3, #239	; 0xef
 80071d2:	d849      	bhi.n	8007268 <read_FAT+0xa8>
 80071d4:	e014      	b.n	8007200 <read_FAT+0x40>

//		case 0:					memcpy (buf, &file_allocation_table	, FAT_MAX_ENTRIES * 2);
		case 0 ... 7:			for (register int i = 0; i < 256; i ++) buf [i] = 0xfff0;
 80071d6:	2400      	movs	r4, #0
 80071d8:	e006      	b.n	80071e8 <read_FAT+0x28>
 80071da:	4621      	mov	r1, r4
 80071dc:	0049      	lsls	r1, r1, #1
 80071de:	4411      	add	r1, r2
 80071e0:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 80071e4:	8008      	strh	r0, [r1, #0]
 80071e6:	3401      	adds	r4, #1
 80071e8:	2cff      	cmp	r4, #255	; 0xff
 80071ea:	ddf6      	ble.n	80071da <read_FAT+0x1a>
								if (! file_ofs) { buf [0] = 0xFFF8; buf [1] = 0xFFFF; }
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d13a      	bne.n	8007266 <read_FAT+0xa6>
 80071f0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80071f4:	8013      	strh	r3, [r2, #0]
 80071f6:	1c93      	adds	r3, r2, #2
 80071f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071fc:	801a      	strh	r2, [r3, #0]
								return;
 80071fe:	e032      	b.n	8007266 <read_FAT+0xa6>

		case 8 ... MAX_FAT:;	int			 next_link		= disk_decode_table [(file_ofs >> 3) + 2].next_cluster;
 8007200:	08d9      	lsrs	r1, r3, #3
 8007202:	3102      	adds	r1, #2
 8007204:	481b      	ldr	r0, [pc, #108]	; (8007274 <read_FAT+0xb4>)
 8007206:	0109      	lsls	r1, r1, #4
 8007208:	4401      	add	r1, r0
 800720a:	310c      	adds	r1, #12
 800720c:	8809      	ldrh	r1, [r1, #0]
 800720e:	6079      	str	r1, [r7, #4]
								register int cluster_cnt	= disk_decode_table [(file_ofs >> 3) + 2].used_clusters;
 8007210:	08d9      	lsrs	r1, r3, #3
 8007212:	3102      	adds	r1, #2
 8007214:	4817      	ldr	r0, [pc, #92]	; (8007274 <read_FAT+0xb4>)
 8007216:	0109      	lsls	r1, r1, #4
 8007218:	4401      	add	r1, r0
 800721a:	310e      	adds	r1, #14
 800721c:	8809      	ldrh	r1, [r1, #0]
 800721e:	4688      	mov	r8, r1
								register int cluster_ofs	=					 (file_ofs &  7)<< 8;
 8007220:	0219      	lsls	r1, r3, #8
 8007222:	f401 64e0 	and.w	r4, r1, #1792	; 0x700
								register int FAT_addr		=					  file_ofs		<< 8;
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	461e      	mov	r6, r3
								register int i				=									   0;
 800722a:	2500      	movs	r5, #0
								do {

									FAT_addr++;
 800722c:	3601      	adds	r6, #1
									cluster_ofs++;
 800722e:	3401      	adds	r4, #1
									if		(cluster_cnt < cluster_ofs) buf [i] = 0xfff0;//0;
 8007230:	45a0      	cmp	r8, r4
 8007232:	da06      	bge.n	8007242 <read_FAT+0x82>
 8007234:	462b      	mov	r3, r5
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	4413      	add	r3, r2
 800723a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800723e:	8019      	strh	r1, [r3, #0]
 8007240:	e00d      	b.n	800725e <read_FAT+0x9e>
									else if (cluster_cnt > cluster_ofs) buf [i] = FAT_addr	;
 8007242:	45a0      	cmp	r8, r4
 8007244:	dd05      	ble.n	8007252 <read_FAT+0x92>
 8007246:	462b      	mov	r3, r5
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	4413      	add	r3, r2
 800724c:	b2b1      	uxth	r1, r6
 800724e:	8019      	strh	r1, [r3, #0]
 8007250:	e005      	b.n	800725e <read_FAT+0x9e>
									else 								buf [i] = next_link	;
 8007252:	462b      	mov	r3, r5
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	4413      	add	r3, r2
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	b289      	uxth	r1, r1
 800725c:	8019      	strh	r1, [r3, #0]

								} while (++i < 256);
 800725e:	3501      	adds	r5, #1
 8007260:	2dff      	cmp	r5, #255	; 0xff
 8007262:	dde3      	ble.n	800722c <read_FAT+0x6c>
 8007264:	e000      	b.n	8007268 <read_FAT+0xa8>
								return;
 8007266:	bf00      	nop
	}
}
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20002030 	.word	0x20002030

08007278 <read_firmware>:

static void read_firmware		(register uint32_t * buf, register uint32_t file_ofs) {
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
 800727c:	460b      	mov	r3, r1

	switch (file_ofs) {
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <read_firmware+0x10>
 8007282:	2b01      	cmp	r3, #1
 8007284:	d006      	beq.n	8007294 <read_firmware+0x1c>
 8007286:	e00a      	b.n	800729e <read_firmware+0x26>

		case 0:					memcpy (buf, &BOOT_BLOCK -> product_ID				  , 512); return;
 8007288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800728c:	4904      	ldr	r1, [pc, #16]	; (80072a0 <read_firmware+0x28>)
 800728e:	f000 fb3c 	bl	800790a <memcpy>
 8007292:	e004      	b.n	800729e <read_firmware+0x26>
		case 1:					memcpy (buf, &BOOT_BLOCK -> authentication_block [472], 256);
 8007294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007298:	4902      	ldr	r1, [pc, #8]	; (80072a4 <read_firmware+0x2c>)
 800729a:	f000 fb36 	bl	800790a <memcpy>
	}
};
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	08000c00 	.word	0x08000c00
 80072a4:	08000e00 	.word	0x08000e00

080072a8 <write_firmware>:

static void write_firmware (register uint32_t * buf, register uint32_t file_ofs) {
 80072a8:	b5b0      	push	{r4, r5, r7, lr}
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	4605      	mov	r5, r0
 80072ae:	460b      	mov	r3, r1

	// check if first sector of file
	if (!file_ofs) {
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d135      	bne.n	8007320 <write_firmware+0x78>

		// setup continuous load handler
		disk_decode_table [3].write_handler = write_firmware_2;
 80072b4:	4b1b      	ldr	r3, [pc, #108]	; (8007324 <write_firmware+0x7c>)
 80072b6:	4a1c      	ldr	r2, [pc, #112]	; (8007328 <write_firmware+0x80>)
 80072b8:	635a      	str	r2, [r3, #52]	; 0x34

		// default timer and pointer values
		register t_app_RAM * a = APP_RAM;
 80072ba:	4c1c      	ldr	r4, [pc, #112]	; (800732c <write_firmware+0x84>)
		a -> zero_value = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		a -> flash_position = APPLICATION_BASE;
 80072c2:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <write_firmware+0x88>)
 80072c4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		a -> timer = TIMER_DEFAULT;
 80072c8:	4a1a      	ldr	r2, [pc, #104]	; (8007334 <write_firmware+0x8c>)
 80072ca:	f504 7384 	add.w	r3, r4, #264	; 0x108
 80072ce:	3218      	adds	r2, #24
 80072d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072d4:	e883 0003 	stmia.w	r3, {r0, r1}

		// set the application_systick to an upgrade_error_status_handler
		application_systick = blink_PC13;
 80072d8:	4b17      	ldr	r3, [pc, #92]	; (8007338 <write_firmware+0x90>)
 80072da:	4a18      	ldr	r2, [pc, #96]	; (800733c <write_firmware+0x94>)
 80072dc:	601a      	str	r2, [r3, #0]

		// unlock FPEC
		BOOT_BLOCK -> unlock_fpec ();
 80072de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072e2:	f8d3 39ac 	ldr.w	r3, [r3, #2476]	; 0x9ac
 80072e6:	4798      	blx	r3

	  	// decrypt the first sector to get 'er going
	  	register int i = BOOT_BLOCK -> decrypt (buf, & a -> zero_value);
 80072e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072ec:	f8d3 39b0 	ldr.w	r3, [r3, #2480]	; 0x9b0
 80072f0:	f504 7280 	add.w	r2, r4, #256	; 0x100
 80072f4:	4611      	mov	r1, r2
 80072f6:	4628      	mov	r0, r5
 80072f8:	4798      	blx	r3
 80072fa:	4603      	mov	r3, r0
 80072fc:	461d      	mov	r5, r3
	  	if (i != 3) {
 80072fe:	2d03      	cmp	r5, #3
 8007300:	d00b      	beq.n	800731a <write_firmware+0x72>

			a -> timer = timer_table [i];
 8007302:	490c      	ldr	r1, [pc, #48]	; (8007334 <write_firmware+0x8c>)
 8007304:	f504 7284 	add.w	r2, r4, #264	; 0x108
 8007308:	00eb      	lsls	r3, r5, #3
 800730a:	440b      	add	r3, r1
 800730c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007310:	e882 0003 	stmia.w	r2, {r0, r1}
			disk_decode_table [3].write_handler = io_null;	// lock the firmware handler from further writes
 8007314:	4b03      	ldr	r3, [pc, #12]	; (8007324 <write_firmware+0x7c>)
 8007316:	4a0a      	ldr	r2, [pc, #40]	; (8007340 <write_firmware+0x98>)
 8007318:	635a      	str	r2, [r3, #52]	; 0x34

	  	}
  		// reset the CRC register
  		CRC-> CR  = 1;
 800731a:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <write_firmware+0x9c>)
 800731c:	2201      	movs	r2, #1
 800731e:	609a      	str	r2, [r3, #8]

	}
};
 8007320:	bf00      	nop
 8007322:	bdb0      	pop	{r4, r5, r7, pc}
 8007324:	20002030 	.word	0x20002030
 8007328:	08007349 	.word	0x08007349
 800732c:	20002800 	.word	0x20002800
 8007330:	08008000 	.word	0x08008000
 8007334:	08007a3c 	.word	0x08007a3c
 8007338:	200000ac 	.word	0x200000ac
 800733c:	080073a9 	.word	0x080073a9
 8007340:	08007165 	.word	0x08007165
 8007344:	40023000 	.word	0x40023000

08007348 <write_firmware_2>:

static void write_firmware_2 (register uint32_t * buf, register uint32_t file_ofs) {
 8007348:	b598      	push	{r3, r4, r7, lr}
 800734a:	af00      	add	r7, sp, #0
 800734c:	4602      	mov	r2, r0

	register int i = BOOT_BLOCK -> decrypt (buf, &APP_RAM -> flash_position);
 800734e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007352:	f8d3 39b0 	ldr.w	r3, [r3, #2480]	; 0x9b0
 8007356:	490e      	ldr	r1, [pc, #56]	; (8007390 <write_firmware_2+0x48>)
 8007358:	4610      	mov	r0, r2
 800735a:	4798      	blx	r3
 800735c:	4603      	mov	r3, r0
 800735e:	461c      	mov	r4, r3
	if (i == 3)
 8007360:	2c03      	cmp	r4, #3
 8007362:	d106      	bne.n	8007372 <write_firmware_2+0x2a>

		GPIOC	-> ODR	^= 0x2000;
 8007364:	4a0b      	ldr	r2, [pc, #44]	; (8007394 <write_firmware_2+0x4c>)
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <write_firmware_2+0x4c>)
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800736e:	60d3      	str	r3, [r2, #12]

		APP_RAM -> timer = timer_table [i];
		disk_decode_table [3].write_handler = io_null;	// lock the firmware handler from further writes

	}
};
 8007370:	e00c      	b.n	800738c <write_firmware_2+0x44>
		APP_RAM -> timer = timer_table [i];
 8007372:	4b09      	ldr	r3, [pc, #36]	; (8007398 <write_firmware_2+0x50>)
 8007374:	4909      	ldr	r1, [pc, #36]	; (800739c <write_firmware_2+0x54>)
 8007376:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800737a:	00e3      	lsls	r3, r4, #3
 800737c:	440b      	add	r3, r1
 800737e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007382:	e882 0003 	stmia.w	r2, {r0, r1}
		disk_decode_table [3].write_handler = io_null;	// lock the firmware handler from further writes
 8007386:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <write_firmware_2+0x58>)
 8007388:	4a06      	ldr	r2, [pc, #24]	; (80073a4 <write_firmware_2+0x5c>)
 800738a:	635a      	str	r2, [r3, #52]	; 0x34
};
 800738c:	bf00      	nop
 800738e:	bd98      	pop	{r3, r4, r7, pc}
 8007390:	20002904 	.word	0x20002904
 8007394:	40011000 	.word	0x40011000
 8007398:	20002800 	.word	0x20002800
 800739c:	08007a3c 	.word	0x08007a3c
 80073a0:	20002030 	.word	0x20002030
 80073a4:	08007165 	.word	0x08007165

080073a8 <blink_PC13>:

static void blink_PC13 (void) {
 80073a8:	b598      	push	{r3, r4, r7, lr}
 80073aa:	af00      	add	r7, sp, #0

	register t_app_RAM * a = APP_RAM;
 80073ac:	4c18      	ldr	r4, [pc, #96]	; (8007410 <blink_PC13+0x68>)
	if (!(-- a -> timer.value)) {
 80073ae:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 80073ba:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d123      	bne.n	800740a <blink_PC13+0x62>

		// reset the timer value
		a -> timer.value = a -> timer.reload;
 80073c2:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 80073c6:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108

		// clear or set PC13 according to bit 0 of timer.cycles
		GPIOC -> BSRR = 0x20000000 >> ((a -> timer.cycles & 1) << 4);
 80073ca:	4a12      	ldr	r2, [pc, #72]	; (8007414 <blink_PC13+0x6c>)
 80073cc:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80073da:	fa41 f303 	asr.w	r3, r1, r3
 80073de:	6113      	str	r3, [r2, #16]

		// when the count expires, shit gets real
		if (!(a -> timer.cycles--)) {
 80073e0:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 80073e4:	1e5a      	subs	r2, r3, #1
 80073e6:	b292      	uxth	r2, r2
 80073e8:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10c      	bne.n	800740a <blink_PC13+0x62>
  __ASM volatile ("cpsid i" : : : "memory");
 80073f0:	b672      	cpsid	i

			__disable_irq ();
			switch (a -> timer.mode) {
 80073f2:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
 80073f6:	2b05      	cmp	r3, #5
 80073f8:	d001      	beq.n	80073fe <blink_PC13+0x56>

			default:	NVIC_SystemReset ();
 80073fa:	f7ff fd99 	bl	8006f30 <NVIC_SystemReset>
			case 5:		BOOT_BLOCK -> flash_kernel_handler (10);	//	10 failed flash retries max.
 80073fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007402:	f8d3 39bc 	ldr.w	r3, [r3, #2492]	; 0x9bc
 8007406:	200a      	movs	r0, #10
 8007408:	4798      	blx	r3

			}
		}
	}
}
 800740a:	bf00      	nop
 800740c:	bd98      	pop	{r3, r4, r7, pc}
 800740e:	bf00      	nop
 8007410:	20002800 	.word	0x20002800
 8007414:	40011000 	.word	0x40011000

08007418 <create_file>:

ptr_dir_slot create_file (register ptr_file ptr) {
 8007418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	af00      	add	r7, sp, #0
 800741e:	4606      	mov	r6, r0

	// scan the root dir for a free entry; return 0 if none
	register uint32_t dir_index = 0;
 8007420:	2500      	movs	r5, #0
	do {
		switch (root_dir [dir_index].filename [0]) {
 8007422:	4a49      	ldr	r2, [pc, #292]	; (8007548 <create_file+0x130>)
 8007424:	016b      	lsls	r3, r5, #5
 8007426:	4413      	add	r3, r2
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d006      	beq.n	800743c <create_file+0x24>
 800742e:	2be5      	cmp	r3, #229	; 0xe5
 8007430:	d004      	beq.n	800743c <create_file+0x24>

			case 0x00:
			case 0xE5:	goto FOUND_DIR_ENTRY;
		}
		dir_index++;
 8007432:	3501      	adds	r5, #1

	} while (dir_index < 32);
 8007434:	2d1f      	cmp	r5, #31
 8007436:	d9f4      	bls.n	8007422 <create_file+0xa>
	return 0;									// couldn't find a free directory slot
 8007438:	2300      	movs	r3, #0
 800743a:	e082      	b.n	8007542 <create_file+0x12a>
			case 0xE5:	goto FOUND_DIR_ENTRY;
 800743c:	bf00      	nop

FOUND_DIR_ENTRY:

	// examine the file size and scan thru the links to determine if enough space; return 0 if not
	for (register int j = 0, i = ptr -> dir_entry.file_size; i > 0; i -= 0x100000) {
 800743e:	2400      	movs	r4, #0
 8007440:	69f3      	ldr	r3, [r6, #28]
 8007442:	4698      	mov	r8, r3
 8007444:	e00f      	b.n	8007466 <create_file+0x4e>

		j = disk_decode_table [j].next_cluster;
 8007446:	4a41      	ldr	r2, [pc, #260]	; (800754c <create_file+0x134>)
 8007448:	0123      	lsls	r3, r4, #4
 800744a:	4413      	add	r3, r2
 800744c:	330c      	adds	r3, #12
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	461c      	mov	r4, r3
		if (j == 0xFFFF) return 0;			//	not enough disk space available
 8007452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007456:	429c      	cmp	r4, r3
 8007458:	d101      	bne.n	800745e <create_file+0x46>
 800745a:	2300      	movs	r3, #0
 800745c:	e071      	b.n	8007542 <create_file+0x12a>
		j = (j >> 11) + 2;
 800745e:	12e3      	asrs	r3, r4, #11
 8007460:	1c9c      	adds	r4, r3, #2
	for (register int j = 0, i = ptr -> dir_entry.file_size; i > 0; i -= 0x100000) {
 8007462:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
 8007466:	f1b8 0f00 	cmp.w	r8, #0
 800746a:	dcec      	bgt.n	8007446 <create_file+0x2e>

	}
	// allocate the file entry
	memcpy (&root_dir [dir_index], &ptr -> dir_entry, 32);
 800746c:	016b      	lsls	r3, r5, #5
 800746e:	4a36      	ldr	r2, [pc, #216]	; (8007548 <create_file+0x130>)
 8007470:	4413      	add	r3, r2
 8007472:	4631      	mov	r1, r6
 8007474:	2220      	movs	r2, #32
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fa47 	bl	800790a <memcpy>

	// set up the decode table
	if (ptr -> dir_entry.file_size) {
 800747c:	69f3      	ldr	r3, [r6, #28]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d059      	beq.n	8007536 <create_file+0x11e>

		// set the starting cluster address
		root_dir [dir_index].starting_cluster = FIRST_FREE;
 8007482:	4b32      	ldr	r3, [pc, #200]	; (800754c <create_file+0x134>)
 8007484:	8999      	ldrh	r1, [r3, #12]
 8007486:	4a30      	ldr	r2, [pc, #192]	; (8007548 <create_file+0x130>)
 8007488:	016b      	lsls	r3, r5, #5
 800748a:	4413      	add	r3, r2
 800748c:	331a      	adds	r3, #26
 800748e:	460a      	mov	r2, r1
 8007490:	801a      	strh	r2, [r3, #0]

		// for the best compatibility with older firmware
		// we switch the default write handler if ROM.SAV or PRG.BIN is present
		// and delete FIRMWARE.BIN + SECURITY.BIN
		if (! memcmp (ptr -> dir_entry.filename , "ROM     SAV", 11)
 8007492:	4633      	mov	r3, r6
 8007494:	220b      	movs	r2, #11
 8007496:	492e      	ldr	r1, [pc, #184]	; (8007550 <create_file+0x138>)
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fa27 	bl	80078ec <memcmp>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d008      	beq.n	80074b6 <create_file+0x9e>
		||  ! memcmp (ptr -> dir_entry.filename , "PRG     BIN", 11)) {
 80074a4:	4633      	mov	r3, r6
 80074a6:	220b      	movs	r2, #11
 80074a8:	492a      	ldr	r1, [pc, #168]	; (8007554 <create_file+0x13c>)
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fa1e 	bl	80078ec <memcmp>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10f      	bne.n	80074d6 <create_file+0xbe>

			default_write_slot [1] = (FIRST_FREE >> 11) + 2;
 80074b6:	4b25      	ldr	r3, [pc, #148]	; (800754c <create_file+0x134>)
 80074b8:	899b      	ldrh	r3, [r3, #12]
 80074ba:	0adb      	lsrs	r3, r3, #11
 80074bc:	b29b      	uxth	r3, r3
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	3302      	adds	r3, #2
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	4b24      	ldr	r3, [pc, #144]	; (8007558 <create_file+0x140>)
 80074c6:	705a      	strb	r2, [r3, #1]
			root_dir [0].filename [0] = 0xE5;					//	delete FIRMWARE.BIN
 80074c8:	4b1f      	ldr	r3, [pc, #124]	; (8007548 <create_file+0x130>)
 80074ca:	22e5      	movs	r2, #229	; 0xe5
 80074cc:	701a      	strb	r2, [r3, #0]
			root_dir [1].filename [0] = 0xE5;					//	delete SECURITY.BIN
 80074ce:	4b1e      	ldr	r3, [pc, #120]	; (8007548 <create_file+0x130>)
 80074d0:	22e5      	movs	r2, #229	; 0xe5
 80074d2:	f883 2020 	strb.w	r2, [r3, #32]

		}
		// scan again and set the used clusters fields to 2048 except the last cluster
		register int i = ptr -> dir_entry.file_size;
 80074d6:	69f3      	ldr	r3, [r6, #28]
 80074d8:	4698      	mov	r8, r3
		register int j = 0;
 80074da:	f04f 0a00 	mov.w	sl, #0
		register int k = 0;
 80074de:	f04f 0900 	mov.w	r9, #0
		register t_disk_slot * ddt = & disk_decode_table [0];
 80074e2:	4c1a      	ldr	r4, [pc, #104]	; (800754c <create_file+0x134>)
		do {
			// calculate the next link address
			j = (ddt -> next_cluster >> 11) + 2;
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	0adb      	lsrs	r3, r3, #11
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f103 0a02 	add.w	sl, r3, #2
			ddt = & disk_decode_table [j];
 80074ee:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80074f2:	4a16      	ldr	r2, [pc, #88]	; (800754c <create_file+0x134>)
 80074f4:	189c      	adds	r4, r3, r2

			// set the read & write handlers
			ddt -> read_handler  = ptr -> read_handler;
 80074f6:	6a33      	ldr	r3, [r6, #32]
 80074f8:	6023      	str	r3, [r4, #0]
			ddt -> write_handler = ptr -> write_handler;
 80074fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80074fc:	6063      	str	r3, [r4, #4]

			// calculate the relative_offset as absolute_disk_address - file offset
			ddt -> relative_sector = (j << 11) - k;
 80074fe:	ea4f 23ca 	mov.w	r3, sl, lsl #11
 8007502:	eba3 0309 	sub.w	r3, r3, r9
 8007506:	60a3      	str	r3, [r4, #8]

			// set the used clusters to the max
			ddt -> used_clusters = 2048;
 8007508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800750c:	81e3      	strh	r3, [r4, #14]

			// update the file pointers
			i -= 0x100000;
 800750e:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
			k += 2048;
 8007512:	f509 6900 	add.w	r9, r9, #2048	; 0x800

		} while (i > 0);
 8007516:	f1b8 0f00 	cmp.w	r8, #0
 800751a:	dce3      	bgt.n	80074e4 <create_file+0xcc>

		// set last used clusters based on i
		ddt -> used_clusters = (i + 0x1001FF) >> 9;
 800751c:	f508 1380 	add.w	r3, r8, #1048576	; 0x100000
 8007520:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007524:	125b      	asrs	r3, r3, #9
 8007526:	b29b      	uxth	r3, r3
 8007528:	81e3      	strh	r3, [r4, #14]

		// set free_disk_slot_ptr to the last link in the file
		FIRST_FREE = ddt -> next_cluster;
 800752a:	89a2      	ldrh	r2, [r4, #12]
 800752c:	4b07      	ldr	r3, [pc, #28]	; (800754c <create_file+0x134>)
 800752e:	819a      	strh	r2, [r3, #12]

		// set the last link in the file to 0xFFFF
		ddt -> next_cluster = 0xFFFF;
 8007530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007534:	81a3      	strh	r3, [r4, #12]
	}
	usbd_media_reset = 1;
 8007536:	4b09      	ldr	r3, [pc, #36]	; (800755c <create_file+0x144>)
 8007538:	2201      	movs	r2, #1
 800753a:	701a      	strb	r2, [r3, #0]
	return &root_dir [dir_index];
 800753c:	016b      	lsls	r3, r5, #5
 800753e:	4a02      	ldr	r2, [pc, #8]	; (8007548 <create_file+0x130>)
 8007540:	4413      	add	r3, r2
}
 8007542:	4618      	mov	r0, r3
 8007544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007548:	20000c28 	.word	0x20000c28
 800754c:	20002030 	.word	0x20002030
 8007550:	080079ec 	.word	0x080079ec
 8007554:	080079f8 	.word	0x080079f8
 8007558:	2000202c 	.word	0x2000202c
 800755c:	200000aa 	.word	0x200000aa

08007560 <make_file>:

ptr_dir_slot make_file (register char * filename, register uint32_t filesize, register ptr_io_handler rd_hndlr, register ptr_io_handler wr_hndlr) {
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	b08c      	sub	sp, #48	; 0x30
 8007566:	af00      	add	r7, sp, #0
 8007568:	4680      	mov	r8, r0
 800756a:	460e      	mov	r6, r1
 800756c:	4615      	mov	r5, r2
 800756e:	461c      	mov	r4, r3

	t_file f;
	memcpy (&f, &BOOT_BLOCK -> firmware_dir_entry, 32);	// copy all generic DIR stuff
 8007570:	1d3b      	adds	r3, r7, #4
 8007572:	2220      	movs	r2, #32
 8007574:	490b      	ldr	r1, [pc, #44]	; (80075a4 <make_file+0x44>)
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f9c7 	bl	800790a <memcpy>
	memcpy (&f.dir_entry.filename, filename, 12);
 800757c:	1d3b      	adds	r3, r7, #4
 800757e:	220c      	movs	r2, #12
 8007580:	4641      	mov	r1, r8
 8007582:	4618      	mov	r0, r3
 8007584:	f000 f9c1 	bl	800790a <memcpy>
	f.dir_entry.file_size = filesize;
 8007588:	623e      	str	r6, [r7, #32]
	f.read_handler = rd_hndlr;
 800758a:	627d      	str	r5, [r7, #36]	; 0x24
	f.write_handler = wr_hndlr;
 800758c:	62bc      	str	r4, [r7, #40]	; 0x28
	ptr_dir_slot d = create_file (&f);
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff ff41 	bl	8007418 <create_file>
 8007596:	62f8      	str	r0, [r7, #44]	; 0x2c
	return d;
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 800759a:	4618      	mov	r0, r3
 800759c:	3730      	adds	r7, #48	; 0x30
 800759e:	46bd      	mov	sp, r7
 80075a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a4:	080009c0 	.word	0x080009c0

080075a8 <delete_file>:

	usbd_media_reset = 1;

}
*/
void delete_file (register ptr_dir_slot ptr) {
 80075a8:	b4b0      	push	{r4, r5, r7}
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	4603      	mov	r3, r0

	// put 0xE5 in first byte of dir_entry
	ptr -> filename [0] = 0xE5;
 80075ae:	22e5      	movs	r2, #229	; 0xe5
 80075b0:	701a      	strb	r2, [r3, #0]

	// check if file_size = 0
	if (ptr -> file_size) {
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	d018      	beq.n	80075ea <delete_file+0x42>

		// get starting cluster #

		register int i = ptr -> starting_cluster;
 80075b8:	8b5a      	ldrh	r2, [r3, #26]
 80075ba:	4615      	mov	r5, r2
		register int j;
		register t_disk_slot * ddt;
		do {
			// get the disk offset value
			j = (i >> 11) + 2;
 80075bc:	12ea      	asrs	r2, r5, #11
 80075be:	1c94      	adds	r4, r2, #2

			// set all the defaults
			ddt = & disk_decode_table [j];
 80075c0:	0122      	lsls	r2, r4, #4
 80075c2:	490d      	ldr	r1, [pc, #52]	; (80075f8 <delete_file+0x50>)
 80075c4:	1854      	adds	r4, r2, r1
			ddt -> read_handler  = io_null;
 80075c6:	4a0d      	ldr	r2, [pc, #52]	; (80075fc <delete_file+0x54>)
 80075c8:	6022      	str	r2, [r4, #0]
			ddt -> write_handler = io_null;
 80075ca:	4a0c      	ldr	r2, [pc, #48]	; (80075fc <delete_file+0x54>)
 80075cc:	6062      	str	r2, [r4, #4]
			ddt -> used_clusters = 0;
 80075ce:	2200      	movs	r2, #0
 80075d0:	81e2      	strh	r2, [r4, #14]

			// get next link
			i = ddt -> next_cluster;
 80075d2:	89a2      	ldrh	r2, [r4, #12]
 80075d4:	4615      	mov	r5, r2

		// until cluster terminator
		} while (i != 0xFFFF);
 80075d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075da:	4295      	cmp	r5, r2
 80075dc:	d1ee      	bne.n	80075bc <delete_file+0x14>

		// link it back into FIRST_FREE
		ddt -> next_cluster = FIRST_FREE;
 80075de:	4a06      	ldr	r2, [pc, #24]	; (80075f8 <delete_file+0x50>)
 80075e0:	8992      	ldrh	r2, [r2, #12]
 80075e2:	81a2      	strh	r2, [r4, #12]

		// start FIRST_FREE at starting cluster
		FIRST_FREE = ptr -> starting_cluster;
 80075e4:	8b5a      	ldrh	r2, [r3, #26]
 80075e6:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <delete_file+0x50>)
 80075e8:	819a      	strh	r2, [r3, #12]
	}
	usbd_media_reset = 1;
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <delete_file+0x58>)
 80075ec:	2201      	movs	r2, #1
 80075ee:	701a      	strb	r2, [r3, #0]

}
 80075f0:	bf00      	nop
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bcb0      	pop	{r4, r5, r7}
 80075f6:	4770      	bx	lr
 80075f8:	20002030 	.word	0x20002030
 80075fc:	08007165 	.word	0x08007165
 8007600:	200000aa 	.word	0x200000aa

08007604 <STORAGE_Init_FS>:

int8_t STORAGE_Init_FS(register uint8_t lun)
{
 8007604:	b5b0      	push	{r4, r5, r7, lr}
 8007606:	af00      	add	r7, sp, #0

	// set up the first 2 FAT words, and initialize the rest of the FAT to 0
//	memset (&file_allocation_table, 0, sizeof (file_allocation_table));
	memset (&root_dir			  , 0, sizeof (root_dir));
 8007608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800760c:	2100      	movs	r1, #0
 800760e:	4845      	ldr	r0, [pc, #276]	; (8007724 <STORAGE_Init_FS+0x120>)
 8007610:	f000 f986 	bl	8007920 <memset>

	// initialize the root directory
	root_dir [0] = BOOT_BLOCK -> firmware_dir_entry;
 8007614:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007618:	4a42      	ldr	r2, [pc, #264]	; (8007724 <STORAGE_Init_FS+0x120>)
 800761a:	4615      	mov	r5, r2
 800761c:	f503 641c 	add.w	r4, r3, #2496	; 0x9c0
 8007620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007624:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007628:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	root_dir [1] = BOOT_BLOCK -> security_dir_entry;
 800762c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007630:	4a3c      	ldr	r2, [pc, #240]	; (8007724 <STORAGE_Init_FS+0x120>)
 8007632:	f102 0420 	add.w	r4, r2, #32
 8007636:	f503 651e 	add.w	r5, r3, #2528	; 0x9e0
 800763a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800763c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800763e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// initialize the disk_decode_table
	for (register int i = 0; i < MAX_DECODE_SLOTS; i++) disk_decode_table [i] = disk_decode_null;
 8007646:	2400      	movs	r4, #0
 8007648:	e009      	b.n	800765e <STORAGE_Init_FS+0x5a>
 800764a:	4a37      	ldr	r2, [pc, #220]	; (8007728 <STORAGE_Init_FS+0x124>)
 800764c:	0123      	lsls	r3, r4, #4
 800764e:	4413      	add	r3, r2
 8007650:	4a36      	ldr	r2, [pc, #216]	; (800772c <STORAGE_Init_FS+0x128>)
 8007652:	461d      	mov	r5, r3
 8007654:	4613      	mov	r3, r2
 8007656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007658:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800765c:	3401      	adds	r4, #1
 800765e:	2c21      	cmp	r4, #33	; 0x21
 8007660:	ddf3      	ble.n	800764a <STORAGE_Init_FS+0x46>
	memcpy (&disk_decode_table, &disk_decode_init, sizeof (disk_decode_init));
 8007662:	4a31      	ldr	r2, [pc, #196]	; (8007728 <STORAGE_Init_FS+0x124>)
 8007664:	4b32      	ldr	r3, [pc, #200]	; (8007730 <STORAGE_Init_FS+0x12c>)
 8007666:	4610      	mov	r0, r2
 8007668:	4619      	mov	r1, r3
 800766a:	2350      	movs	r3, #80	; 0x50
 800766c:	461a      	mov	r2, r3
 800766e:	f000 f94c 	bl	800790a <memcpy>
	disk_decode_table [FREE_SPACE_START_SLOT].write_handler		= write_unknown;
 8007672:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <STORAGE_Init_FS+0x124>)
 8007674:	4a2f      	ldr	r2, [pc, #188]	; (8007734 <STORAGE_Init_FS+0x130>)
 8007676:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	disk_decode_table [FREE_SPACE_START_SLOT].relative_sector	= FREE_SPACE_START_SLOT << 11;
 800767a:	4b2b      	ldr	r3, [pc, #172]	; (8007728 <STORAGE_Init_FS+0x124>)
 800767c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007680:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	default_write_slot [0]	= 0;		//	dummy write slot
 8007684:	4b2c      	ldr	r3, [pc, #176]	; (8007738 <STORAGE_Init_FS+0x134>)
 8007686:	2200      	movs	r2, #0
 8007688:	701a      	strb	r2, [r3, #0]
	default_write_slot [1]	= 3;		//	FIRMWARE.BIN slot
 800768a:	4b2b      	ldr	r3, [pc, #172]	; (8007738 <STORAGE_Init_FS+0x134>)
 800768c:	2203      	movs	r2, #3
 800768e:	705a      	strb	r2, [r3, #1]
	null_buf_size			= 0;
 8007690:	4b2a      	ldr	r3, [pc, #168]	; (800773c <STORAGE_Init_FS+0x138>)
 8007692:	2200      	movs	r2, #0
 8007694:	801a      	strh	r2, [r3, #0]

	// link up free slots to free_disk_slot_ptr
	FIRST_FREE = (DISK_DECODE_RESERVED - 2) << 11;
 8007696:	4b24      	ldr	r3, [pc, #144]	; (8007728 <STORAGE_Init_FS+0x124>)
 8007698:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800769c:	819a      	strh	r2, [r3, #12]
	for (register int i = DISK_DECODE_RESERVED; i < MAX_DECODE_SLOTS - 1; i++) disk_decode_table [i].next_cluster = (i - 1) << 11;
 800769e:	2405      	movs	r4, #5
 80076a0:	e00b      	b.n	80076ba <STORAGE_Init_FS+0xb6>
 80076a2:	b2a3      	uxth	r3, r4
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	02db      	lsls	r3, r3, #11
 80076aa:	b299      	uxth	r1, r3
 80076ac:	4a1e      	ldr	r2, [pc, #120]	; (8007728 <STORAGE_Init_FS+0x124>)
 80076ae:	0123      	lsls	r3, r4, #4
 80076b0:	4413      	add	r3, r2
 80076b2:	330c      	adds	r3, #12
 80076b4:	460a      	mov	r2, r1
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	3401      	adds	r4, #1
 80076ba:	2c20      	cmp	r4, #32
 80076bc:	ddf1      	ble.n	80076a2 <STORAGE_Init_FS+0x9e>

	// check the application file size
	register t_application * a = APPLICATION;
 80076be:	4c20      	ldr	r4, [pc, #128]	; (8007740 <STORAGE_Init_FS+0x13c>)
	if (a -> application_header.file_size <= 8192) {
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c6:	d829      	bhi.n	800771c <STORAGE_Init_FS+0x118>

		// reset the CRC accumulator
		CRC -> CR = 1;
 80076c8:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <STORAGE_Init_FS+0x140>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	609a      	str	r2, [r3, #8]

		// generate the CRC32 for the application
		for (register int i = 2; i < a -> application_header.file_size; i++)
 80076ce:	2502      	movs	r5, #2
 80076d0:	e005      	b.n	80076de <STORAGE_Init_FS+0xda>
			CRC -> DR = application -> payload [i];
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <STORAGE_Init_FS+0x140>)
 80076d4:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <STORAGE_Init_FS+0x13c>)
 80076d6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80076da:	6013      	str	r3, [r2, #0]
		for (register int i = 2; i < a -> application_header.file_size; i++)
 80076dc:	3501      	adds	r5, #1
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	462a      	mov	r2, r5
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d8f5      	bhi.n	80076d2 <STORAGE_Init_FS+0xce>

		// check the CRC32 with the application header
		if (CRC -> DR == a -> application_header.CRC32
 80076e6:	4b17      	ldr	r3, [pc, #92]	; (8007744 <STORAGE_Init_FS+0x140>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	6863      	ldr	r3, [r4, #4]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d115      	bne.n	800771c <STORAGE_Init_FS+0x118>
	    && !memcmp (a ->application_header.product_ID.company_name, BOOT_BLOCK -> product_ID.company_name,  8)) {
 80076f0:	f104 0308 	add.w	r3, r4, #8
 80076f4:	2208      	movs	r2, #8
 80076f6:	4914      	ldr	r1, [pc, #80]	; (8007748 <STORAGE_Init_FS+0x144>)
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 f8f7 	bl	80078ec <memcmp>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10b      	bne.n	800771c <STORAGE_Init_FS+0x118>

			application_systick = a -> systick_handler;
 8007704:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007706:	4a11      	ldr	r2, [pc, #68]	; (800774c <STORAGE_Init_FS+0x148>)
 8007708:	6013      	str	r3, [r2, #0]
			a -> initialization_handler (&kernel_functions);
 800770a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800770c:	4810      	ldr	r0, [pc, #64]	; (8007750 <STORAGE_Init_FS+0x14c>)
 800770e:	4798      	blx	r3
			make_file ("VERSION TXT\a", 36, version_txt_R, io_null);
 8007710:	4b10      	ldr	r3, [pc, #64]	; (8007754 <STORAGE_Init_FS+0x150>)
 8007712:	4a11      	ldr	r2, [pc, #68]	; (8007758 <STORAGE_Init_FS+0x154>)
 8007714:	2124      	movs	r1, #36	; 0x24
 8007716:	4811      	ldr	r0, [pc, #68]	; (800775c <STORAGE_Init_FS+0x158>)
 8007718:	f7ff ff22 	bl	8007560 <make_file>
		}
	}
//	make_file ("WRITEBUFBIN ", 4352, read_buf , io_null);
//	make_file ("BS      TXT ",    1, read_null, write_null);
	return (USBD_OK);
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	bdb0      	pop	{r4, r5, r7, pc}
 8007722:	bf00      	nop
 8007724:	20000c28 	.word	0x20000c28
 8007728:	20002030 	.word	0x20002030
 800772c:	08007acc 	.word	0x08007acc
 8007730:	08007a7c 	.word	0x08007a7c
 8007734:	08006f95 	.word	0x08006f95
 8007738:	2000202c 	.word	0x2000202c
 800773c:	20001028 	.word	0x20001028
 8007740:	08008000 	.word	0x08008000
 8007744:	40023000 	.word	0x40023000
 8007748:	08000c00 	.word	0x08000c00
 800774c:	200000ac 	.word	0x200000ac
 8007750:	08007adc 	.word	0x08007adc
 8007754:	08007165 	.word	0x08007165
 8007758:	0800718d 	.word	0x0800718d
 800775c:	08007a04 	.word	0x08007a04

08007760 <STORAGE_GetCapacity_FS>:

int8_t STORAGE_GetCapacity_FS(register uint8_t lun, register uint32_t *block_num, register uint16_t *block_size)
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007764:	f44f 3388 	mov.w	r3, #69632	; 0x11000
 8007768:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 800776a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800776e:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
 8007770:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007772:	4618      	mov	r0, r3
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr
	...

0800777c <media_change>:

void media_change (void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0

	STORAGE_Init_FS (0);
 8007780:	2000      	movs	r0, #0
 8007782:	f7ff ff3f 	bl	8007604 <STORAGE_Init_FS>
	usbd_media_reset = 1;
 8007786:	4b02      	ldr	r3, [pc, #8]	; (8007790 <media_change+0x14>)
 8007788:	2201      	movs	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]

};
 800778c:	bf00      	nop
 800778e:	bd80      	pop	{r7, pc}
 8007790:	200000aa 	.word	0x200000aa

08007794 <STORAGE_IsReady_FS>:

int8_t STORAGE_IsReady_FS(register uint8_t lun)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
	return (USBD_OK);
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr

080077a2 <STORAGE_IsWriteProtected_FS>:

int8_t STORAGE_IsWriteProtected_FS(register uint8_t lun)
{
 80077a2:	b480      	push	{r7}
 80077a4:	af00      	add	r7, sp, #0
  return (USBD_OK);
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr

080077b0 <STORAGE_Read_FS>:

int8_t STORAGE_Read_FS (register uint8_t lun, register void *buf, register uint32_t blk_addr, register uint32_t blk_len)
{
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	460e      	mov	r6, r1
 80077b6:	4614      	mov	r4, r2
 80077b8:	461d      	mov	r5, r3
//	if (lun) return (USBD_FAIL);
	do {

		// ensure buffer is cleared out
		memset (buf, 0, 512);
 80077ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077be:	2100      	movs	r1, #0
 80077c0:	4630      	mov	r0, r6
 80077c2:	f000 f8ad 	bl	8007920 <memset>

		// bounds check: quietly ignore invalid addresses
		if (blk_addr < STORAGE_BLK_NBR) {
 80077c6:	f5b4 3f88 	cmp.w	r4, #69632	; 0x11000
 80077ca:	d20e      	bcs.n	80077ea <STORAGE_Read_FS+0x3a>

			disk_decode_table [blk_addr >> 11].read_handler (buf, blk_addr -
 80077cc:	0ae3      	lsrs	r3, r4, #11
 80077ce:	4a0b      	ldr	r2, [pc, #44]	; (80077fc <STORAGE_Read_FS+0x4c>)
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	4413      	add	r3, r2
 80077d4:	681b      	ldr	r3, [r3, #0]
			disk_decode_table [blk_addr >> 11].relative_sector);
 80077d6:	0ae2      	lsrs	r2, r4, #11
 80077d8:	4908      	ldr	r1, [pc, #32]	; (80077fc <STORAGE_Read_FS+0x4c>)
 80077da:	0112      	lsls	r2, r2, #4
 80077dc:	440a      	add	r2, r1
 80077de:	3208      	adds	r2, #8
 80077e0:	6812      	ldr	r2, [r2, #0]
			disk_decode_table [blk_addr >> 11].read_handler (buf, blk_addr -
 80077e2:	1aa2      	subs	r2, r4, r2
 80077e4:	4611      	mov	r1, r2
 80077e6:	4630      	mov	r0, r6
 80077e8:	4798      	blx	r3

		}
		blk_addr++;
 80077ea:	3401      	adds	r4, #1
		buf += 512;
 80077ec:	f506 7600 	add.w	r6, r6, #512	; 0x200

	} while (--blk_len);
 80077f0:	3d01      	subs	r5, #1
 80077f2:	2d00      	cmp	r5, #0
 80077f4:	d1e1      	bne.n	80077ba <STORAGE_Read_FS+0xa>

  return (USBD_OK);
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077fc:	20002030 	.word	0x20002030

08007800 <STORAGE_Write_FS>:

int8_t STORAGE_Write_FS (register uint8_t lun, register void *buf, register uint32_t blk_addr, register uint32_t blk_len)
{
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	af00      	add	r7, sp, #0
 8007804:	460e      	mov	r6, r1
 8007806:	4614      	mov	r4, r2
 8007808:	461d      	mov	r5, r3
//	if (lun) return (USBD_FAIL);
	do {

		// bounds check: quietly ignore invalid addresses
		if (blk_addr < STORAGE_BLK_NBR) {
 800780a:	f5b4 3f88 	cmp.w	r4, #69632	; 0x11000
 800780e:	d20f      	bcs.n	8007830 <STORAGE_Write_FS+0x30>

			disk_decode_table [blk_addr >> 11].write_handler (buf, blk_addr -
 8007810:	0ae3      	lsrs	r3, r4, #11
 8007812:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <STORAGE_Write_FS+0x44>)
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	4413      	add	r3, r2
 8007818:	3304      	adds	r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
			disk_decode_table [blk_addr >> 11].relative_sector);
 800781c:	0ae2      	lsrs	r2, r4, #11
 800781e:	4909      	ldr	r1, [pc, #36]	; (8007844 <STORAGE_Write_FS+0x44>)
 8007820:	0112      	lsls	r2, r2, #4
 8007822:	440a      	add	r2, r1
 8007824:	3208      	adds	r2, #8
 8007826:	6812      	ldr	r2, [r2, #0]
			disk_decode_table [blk_addr >> 11].write_handler (buf, blk_addr -
 8007828:	1aa2      	subs	r2, r4, r2
 800782a:	4611      	mov	r1, r2
 800782c:	4630      	mov	r0, r6
 800782e:	4798      	blx	r3

		}
		blk_addr++;
 8007830:	3401      	adds	r4, #1
		buf += 512;
 8007832:	f506 7600 	add.w	r6, r6, #512	; 0x200

	} while (--blk_len);
 8007836:	3d01      	subs	r5, #1
 8007838:	2d00      	cmp	r5, #0
 800783a:	d1e6      	bne.n	800780a <STORAGE_Write_FS+0xa>
//debug_ptr ++;
	return (USBD_OK);
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007842:	bf00      	nop
 8007844:	20002030 	.word	0x20002030

08007848 <STORAGE_GetMaxLun_FS>:

int8_t STORAGE_GetMaxLun_FS(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  return (STORAGE_LUN_NBR - 1);
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	46bd      	mov	sp, r7
 8007852:	bc80      	pop	{r7}
 8007854:	4770      	bx	lr
	...

08007858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007858:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800785a:	e003      	b.n	8007864 <LoopCopyDataInit>

0800785c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800785e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007860:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007862:	3104      	adds	r1, #4

08007864 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007864:	480a      	ldr	r0, [pc, #40]	; (8007890 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007866:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007868:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800786a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800786c:	d3f6      	bcc.n	800785c <CopyDataInit>
  ldr r2, =_sbss
 800786e:	4a0a      	ldr	r2, [pc, #40]	; (8007898 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007870:	e002      	b.n	8007878 <LoopFillZerobss>

08007872 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007872:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007874:	f842 3b04 	str.w	r3, [r2], #4

08007878 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007878:	4b08      	ldr	r3, [pc, #32]	; (800789c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800787a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800787c:	d3f9      	bcc.n	8007872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800787e:	f7fe fef1 	bl	8006664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007882:	f000 f80f 	bl	80078a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007886:	f7fe fd35 	bl	80062f4 <main>
  bx lr
 800788a:	4770      	bx	lr
  ldr r3, =_sidata
 800788c:	08007b18 	.word	0x08007b18
  ldr r0, =_sdata
 8007890:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007894:	20000108 	.word	0x20000108
  ldr r2, =_sbss
 8007898:	20000108 	.word	0x20000108
  ldr r3, = _ebss
 800789c:	20002250 	.word	0x20002250

080078a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80078a0:	e7fe      	b.n	80078a0 <ADC1_2_IRQHandler>
	...

080078a4 <__libc_init_array>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	2500      	movs	r5, #0
 80078a8:	4e0c      	ldr	r6, [pc, #48]	; (80078dc <__libc_init_array+0x38>)
 80078aa:	4c0d      	ldr	r4, [pc, #52]	; (80078e0 <__libc_init_array+0x3c>)
 80078ac:	1ba4      	subs	r4, r4, r6
 80078ae:	10a4      	asrs	r4, r4, #2
 80078b0:	42a5      	cmp	r5, r4
 80078b2:	d109      	bne.n	80078c8 <__libc_init_array+0x24>
 80078b4:	f000 f83c 	bl	8007930 <_init>
 80078b8:	2500      	movs	r5, #0
 80078ba:	4e0a      	ldr	r6, [pc, #40]	; (80078e4 <__libc_init_array+0x40>)
 80078bc:	4c0a      	ldr	r4, [pc, #40]	; (80078e8 <__libc_init_array+0x44>)
 80078be:	1ba4      	subs	r4, r4, r6
 80078c0:	10a4      	asrs	r4, r4, #2
 80078c2:	42a5      	cmp	r5, r4
 80078c4:	d105      	bne.n	80078d2 <__libc_init_array+0x2e>
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078cc:	4798      	blx	r3
 80078ce:	3501      	adds	r5, #1
 80078d0:	e7ee      	b.n	80078b0 <__libc_init_array+0xc>
 80078d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078d6:	4798      	blx	r3
 80078d8:	3501      	adds	r5, #1
 80078da:	e7f2      	b.n	80078c2 <__libc_init_array+0x1e>
 80078dc:	08007b10 	.word	0x08007b10
 80078e0:	08007b10 	.word	0x08007b10
 80078e4:	08007b10 	.word	0x08007b10
 80078e8:	08007b14 	.word	0x08007b14

080078ec <memcmp>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	3901      	subs	r1, #1
 80078f0:	4402      	add	r2, r0
 80078f2:	4290      	cmp	r0, r2
 80078f4:	d101      	bne.n	80078fa <memcmp+0xe>
 80078f6:	2000      	movs	r0, #0
 80078f8:	bd10      	pop	{r4, pc}
 80078fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80078fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007902:	42a3      	cmp	r3, r4
 8007904:	d0f5      	beq.n	80078f2 <memcmp+0x6>
 8007906:	1b18      	subs	r0, r3, r4
 8007908:	bd10      	pop	{r4, pc}

0800790a <memcpy>:
 800790a:	b510      	push	{r4, lr}
 800790c:	1e43      	subs	r3, r0, #1
 800790e:	440a      	add	r2, r1
 8007910:	4291      	cmp	r1, r2
 8007912:	d100      	bne.n	8007916 <memcpy+0xc>
 8007914:	bd10      	pop	{r4, pc}
 8007916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800791a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800791e:	e7f7      	b.n	8007910 <memcpy+0x6>

08007920 <memset>:
 8007920:	4603      	mov	r3, r0
 8007922:	4402      	add	r2, r0
 8007924:	4293      	cmp	r3, r2
 8007926:	d100      	bne.n	800792a <memset+0xa>
 8007928:	4770      	bx	lr
 800792a:	f803 1b01 	strb.w	r1, [r3], #1
 800792e:	e7f9      	b.n	8007924 <memset+0x4>

08007930 <_init>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	bf00      	nop
 8007934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007936:	bc08      	pop	{r3}
 8007938:	469e      	mov	lr, r3
 800793a:	4770      	bx	lr

0800793c <_fini>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	bf00      	nop
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr
